#include "STD_TYPES.h"
#include "BIT_MATH.h"
#include "ERR_TYPE.h"

#include "RCC_CONFIG.h"
#include "RCC_INTERFACE.h"
#include "RCC_PRV.h"
#include "RCC_REG.h"

void 	RCC_voidInit 					(void)
{

}

uint8 	RCC_u8ClockPeripheralEnable 	(RCC_Bus_List_t copy_u32BusID , uint8 copy_u8PeripheralID)
{
	uint8 Local_u8ErrorState = OK ;
	if (copy_u8PeripheralID < 32)
	{
		switch (copy_u32BusID)
		{
			case BUS_RCC_AHB  :	SET_BIT (RCC_AHBENR ,copy_u8PeripheralID); break;
			case BUS_RCC_APB2 :	SET_BIT (RCC_APB2	,copy_u8PeripheralID); break;
			case BUS_RCC_APB1 :	SET_BIT (RCC_APB1	,copy_u8PeripheralID); break;
			default : Local_u8ErrorState = NOK ; break ;
		}
	}
	else
	{
		Local_u8ErrorState = NOK ;
	}
	return Local_u8ErrorState ;
}

uint8 	RCC_u8ClockPeripheralDisable 	(RCC_Bus_List_t copy_u32BusID , uint8 copy_u8PeripheralID)
{
	uint8 Local_u8ErrorState = OK ;
	if (copy_u8PeripheralID < 32)
	{
		switch (copy_u32BusID)
		{
		case BUS_RCC_AHB  :	CLR_BIT (RCC_AHBENR ,copy_u8PeripheralID); break;
		case BUS_RCC_APB2 :	CLR_BIT (RCC_APB2	,copy_u8PeripheralID); break;
		case BUS_RCC_APB1 :	CLR_BIT (RCC_APB1	,copy_u8PeripheralID); break;
		default : Local_u8ErrorState = NOK ; break ;
		}
	}
	else
	{
		Local_u8ErrorState = NOK ;
	}
	return Local_u8ErrorState ;
}
