
System.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004df2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000cc  00800060  00004df2  00004e86  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  0080012c  0080012c  00004f52  2**0
                  ALLOC
  3 .stab         00004af4  00000000  00000000  00004f54  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001885  00000000  00000000  00009a48  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000b2cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000b40d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000b57d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000d1c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000e0b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000ee60  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000efc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000f24d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000fa1b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 e0 23 	jmp	0x47c0	; 0x47c0 <__vector_1>
       8:	0c 94 13 24 	jmp	0x4826	; 0x4826 <__vector_2>
       c:	0c 94 46 24 	jmp	0x488c	; 0x488c <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 0f 07 	jmp	0xe1e	; 0xe1e <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ef       	ldi	r30, 0xF2	; 242
      68:	fd e4       	ldi	r31, 0x4D	; 77
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 32       	cpi	r26, 0x2C	; 44
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e2       	ldi	r26, 0x2C	; 44
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 33       	cpi	r26, 0x3D	; 61
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 10 26 	call	0x4c20	; 0x4c20 <main>
      8a:	0c 94 f7 26 	jmp	0x4dee	; 0x4dee <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c0 26 	jmp	0x4d80	; 0x4d80 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab ef       	ldi	r26, 0xFB	; 251
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 dc 26 	jmp	0x4db8	; 0x4db8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 cc 26 	jmp	0x4d98	; 0x4d98 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e8 26 	jmp	0x4dd0	; 0x4dd0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 cc 26 	jmp	0x4d98	; 0x4d98 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e8 26 	jmp	0x4dd0	; 0x4dd0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c0 26 	jmp	0x4d80	; 0x4d80 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8b ef       	ldi	r24, 0xFB	; 251
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 dc 26 	jmp	0x4db8	; 0x4db8 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 cc 26 	jmp	0x4d98	; 0x4d98 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 e8 26 	jmp	0x4dd0	; 0x4dd0 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 cc 26 	jmp	0x4d98	; 0x4d98 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 e8 26 	jmp	0x4dd0	; 0x4dd0 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 cc 26 	jmp	0x4d98	; 0x4d98 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 e8 26 	jmp	0x4dd0	; 0x4dd0 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 d0 26 	jmp	0x4da0	; 0x4da0 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 ec 26 	jmp	0x4dd8	; 0x4dd8 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_voidInit>:
	 * @brief this function is used to initialize ADC and prepare it for conversions starting .
	 * @param void
	 * @return void
	 */
	void ADC_voidInit  			   ( void )
	{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
											/* 1- REFERENCE SELECTION : AVCC with external capacitor at AREF pin */

		CLR_BIT ( ADMUX , ADMUX_REFS1 ) ;
     b4e:	a7 e2       	ldi	r26, 0x27	; 39
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e7 e2       	ldi	r30, 0x27	; 39
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	8f 77       	andi	r24, 0x7F	; 127
     b5a:	8c 93       	st	X, r24
		SET_BIT ( ADMUX , ADMUX_REFS0 ) ;
     b5c:	a7 e2       	ldi	r26, 0x27	; 39
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e7 e2       	ldi	r30, 0x27	; 39
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	80 64       	ori	r24, 0x40	; 64
     b68:	8c 93       	st	X, r24
	#if 			ADC_u8RESOLUTION == EIGHT_BITS

											/* 2- PREPARE : LEFT ADJUST : 8_BITS RESOLUTION */

		SET_BIT ( ADMUX , ADMUX_ADLAR ) ; 						// LEFT ADJUST
     b6a:	a7 e2       	ldi	r26, 0x27	; 39
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e7 e2       	ldi	r30, 0x27	; 39
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	80 62       	ori	r24, 0x20	; 32
     b76:	8c 93       	st	X, r24

	#endif

											/* 3- CHECK ON PRESCULAR CONFIGURATION SETTINGS  */

		ADCSRA &= PRESCALER_MASK  ; 					// CLEAR THE PRESCALER BITS
     b78:	a6 e2       	ldi	r26, 0x26	; 38
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e6 e2       	ldi	r30, 0x26	; 38
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	88 7f       	andi	r24, 0xF8	; 248
     b84:	8c 93       	st	X, r24
		ADCSRA |= ADC_u8PRESCALER ;
     b86:	a6 e2       	ldi	r26, 0x26	; 38
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e6 e2       	ldi	r30, 0x26	; 38
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	87 60       	ori	r24, 0x07	; 7
     b92:	8c 93       	st	X, r24

											/* 4- ADC ENABLE */

		SET_BIT ( ADCSRA , ADCSRA_ADEN ) ;
     b94:	a6 e2       	ldi	r26, 0x26	; 38
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e6 e2       	ldi	r30, 0x26	; 38
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	80 68       	ori	r24, 0x80	; 128
     ba0:	8c 93       	st	X, r24

	}
     ba2:	cf 91       	pop	r28
     ba4:	df 91       	pop	r29
     ba6:	08 95       	ret

00000ba8 <ADC_u8StartSingleConversionSynch>:
	 * @param copy_Channel : the required analog channel to convert , choose from options @ADC_Channel_t
	 * @param copy_pu16DigitalResult : out parameter for the digital result
	 * @return error state
	 */
	uint16 ADC_u8StartSingleConversionSynch ( ADC_Channel_t copy_Channel , uint16* copy_pu16DigitalResult )
	{
     ba8:	df 93       	push	r29
     baa:	cf 93       	push	r28
     bac:	cd b7       	in	r28, 0x3d	; 61
     bae:	de b7       	in	r29, 0x3e	; 62
     bb0:	28 97       	sbiw	r28, 0x08	; 8
     bb2:	0f b6       	in	r0, 0x3f	; 63
     bb4:	f8 94       	cli
     bb6:	de bf       	out	0x3e, r29	; 62
     bb8:	0f be       	out	0x3f, r0	; 63
     bba:	cd bf       	out	0x3d, r28	; 61
     bbc:	8e 83       	std	Y+6, r24	; 0x06
     bbe:	78 87       	std	Y+8, r23	; 0x08
     bc0:	6f 83       	std	Y+7, r22	; 0x07
		uint8 Local_u8ErrorState = OK ;
     bc2:	1d 82       	std	Y+5, r1	; 0x05
		if ( copy_pu16DigitalResult != NULL )
     bc4:	8f 81       	ldd	r24, Y+7	; 0x07
     bc6:	98 85       	ldd	r25, Y+8	; 0x08
     bc8:	00 97       	sbiw	r24, 0x00	; 0
     bca:	09 f4       	brne	.+2      	; 0xbce <ADC_u8StartSingleConversionSynch+0x26>
     bcc:	6a c0       	rjmp	.+212    	; 0xca2 <ADC_u8StartSingleConversionSynch+0xfa>
		{
			if ( ADC_u8BusyFlag == IDLE )
     bce:	80 91 33 01 	lds	r24, 0x0133
     bd2:	88 23       	and	r24, r24
     bd4:	09 f0       	breq	.+2      	; 0xbd8 <ADC_u8StartSingleConversionSynch+0x30>
     bd6:	62 c0       	rjmp	.+196    	; 0xc9c <ADC_u8StartSingleConversionSynch+0xf4>
			{
				uint32 Local_u32Counter = 0u ;
     bd8:	19 82       	std	Y+1, r1	; 0x01
     bda:	1a 82       	std	Y+2, r1	; 0x02
     bdc:	1b 82       	std	Y+3, r1	; 0x03
     bde:	1c 82       	std	Y+4, r1	; 0x04

										/* ADC IS NOW BUSY */

				ADC_u8BusyFlag = BUSY ;
     be0:	81 e0       	ldi	r24, 0x01	; 1
     be2:	80 93 33 01 	sts	0x0133, r24

										/* 1- SET THE REQUIRED CHANNEL */

				ADMUX &= CHANNEL_SELECTION_MASK ;				/* Clear the channel selection bits */
     be6:	a7 e2       	ldi	r26, 0x27	; 39
     be8:	b0 e0       	ldi	r27, 0x00	; 0
     bea:	e7 e2       	ldi	r30, 0x27	; 39
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	80 81       	ld	r24, Z
     bf0:	80 7e       	andi	r24, 0xE0	; 224
     bf2:	8c 93       	st	X, r24
				ADMUX |= copy_Channel ;
     bf4:	a7 e2       	ldi	r26, 0x27	; 39
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e7 e2       	ldi	r30, 0x27	; 39
     bfa:	f0 e0       	ldi	r31, 0x00	; 0
     bfc:	90 81       	ld	r25, Z
     bfe:	8e 81       	ldd	r24, Y+6	; 0x06
     c00:	89 2b       	or	r24, r25
     c02:	8c 93       	st	X, r24

										/* 2- SRART CONVERSION */

				SET_BIT ( ADCSRA , ADCSRA_ADSC ) ;
     c04:	a6 e2       	ldi	r26, 0x26	; 38
     c06:	b0 e0       	ldi	r27, 0x00	; 0
     c08:	e6 e2       	ldi	r30, 0x26	; 38
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	80 81       	ld	r24, Z
     c0e:	80 64       	ori	r24, 0x40	; 64
     c10:	8c 93       	st	X, r24
     c12:	0b c0       	rjmp	.+22     	; 0xc2a <ADC_u8StartSingleConversionSynch+0x82>

										/* 3- Wait (Block) until conversion is completed or the time out has not passed yet */

				while (( GET_BIT ( ADCSRA , ADCSRA_ADIF) == 0 ) && (Local_u32Counter < ADC_u32TIMEOUT_COUNT ) )
				{
					Local_u32Counter ++ ;
     c14:	89 81       	ldd	r24, Y+1	; 0x01
     c16:	9a 81       	ldd	r25, Y+2	; 0x02
     c18:	ab 81       	ldd	r26, Y+3	; 0x03
     c1a:	bc 81       	ldd	r27, Y+4	; 0x04
     c1c:	01 96       	adiw	r24, 0x01	; 1
     c1e:	a1 1d       	adc	r26, r1
     c20:	b1 1d       	adc	r27, r1
     c22:	89 83       	std	Y+1, r24	; 0x01
     c24:	9a 83       	std	Y+2, r25	; 0x02
     c26:	ab 83       	std	Y+3, r26	; 0x03
     c28:	bc 83       	std	Y+4, r27	; 0x04

				SET_BIT ( ADCSRA , ADCSRA_ADSC ) ;

										/* 3- Wait (Block) until conversion is completed or the time out has not passed yet */

				while (( GET_BIT ( ADCSRA , ADCSRA_ADIF) == 0 ) && (Local_u32Counter < ADC_u32TIMEOUT_COUNT ) )
     c2a:	e6 e2       	ldi	r30, 0x26	; 38
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	80 81       	ld	r24, Z
     c30:	82 95       	swap	r24
     c32:	8f 70       	andi	r24, 0x0F	; 15
     c34:	88 2f       	mov	r24, r24
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	81 70       	andi	r24, 0x01	; 1
     c3a:	90 70       	andi	r25, 0x00	; 0
     c3c:	00 97       	sbiw	r24, 0x00	; 0
     c3e:	61 f4       	brne	.+24     	; 0xc58 <ADC_u8StartSingleConversionSynch+0xb0>
     c40:	89 81       	ldd	r24, Y+1	; 0x01
     c42:	9a 81       	ldd	r25, Y+2	; 0x02
     c44:	ab 81       	ldd	r26, Y+3	; 0x03
     c46:	bc 81       	ldd	r27, Y+4	; 0x04
     c48:	88 38       	cpi	r24, 0x88	; 136
     c4a:	23 e1       	ldi	r18, 0x13	; 19
     c4c:	92 07       	cpc	r25, r18
     c4e:	20 e0       	ldi	r18, 0x00	; 0
     c50:	a2 07       	cpc	r26, r18
     c52:	20 e0       	ldi	r18, 0x00	; 0
     c54:	b2 07       	cpc	r27, r18
     c56:	f0 f2       	brcs	.-68     	; 0xc14 <ADC_u8StartSingleConversionSynch+0x6c>
				{
					Local_u32Counter ++ ;
				}
				if ( Local_u32Counter == ADC_u32TIMEOUT_COUNT )
     c58:	89 81       	ldd	r24, Y+1	; 0x01
     c5a:	9a 81       	ldd	r25, Y+2	; 0x02
     c5c:	ab 81       	ldd	r26, Y+3	; 0x03
     c5e:	bc 81       	ldd	r27, Y+4	; 0x04
     c60:	88 38       	cpi	r24, 0x88	; 136
     c62:	23 e1       	ldi	r18, 0x13	; 19
     c64:	92 07       	cpc	r25, r18
     c66:	20 e0       	ldi	r18, 0x00	; 0
     c68:	a2 07       	cpc	r26, r18
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	b2 07       	cpc	r27, r18
     c6e:	19 f4       	brne	.+6      	; 0xc76 <ADC_u8StartSingleConversionSynch+0xce>
				{
								/* LOOP IS BROKEN BECAUSE TIME OUT HAS PASSED */

					Local_u8ErrorState = TIMEOUT_ERR ;
     c70:	83 e0       	ldi	r24, 0x03	; 3
     c72:	8d 83       	std	Y+5, r24	; 0x05
     c74:	18 c0       	rjmp	.+48     	; 0xca6 <ADC_u8StartSingleConversionSynch+0xfe>
				}
				else     		/* LOOP IS BROKEN BECAUSE FLAG IS RAISED */
				{
											/* 4- CLEAR THE FLAG */

					SET_BIT ( ADCSRA , ADCSRA_ADIF ) ;
     c76:	a6 e2       	ldi	r26, 0x26	; 38
     c78:	b0 e0       	ldi	r27, 0x00	; 0
     c7a:	e6 e2       	ldi	r30, 0x26	; 38
     c7c:	f0 e0       	ldi	r31, 0x00	; 0
     c7e:	80 81       	ld	r24, Z
     c80:	80 61       	ori	r24, 0x10	; 16
     c82:	8c 93       	st	X, r24
											/* 5- READ THE DATA */

					#if 			ADC_u8RESOLUTION == EIGHT_BITS
							// IN 8-BIT RESOLUTION ( ADC READONG == ADCH )

						*copy_pu16DigitalResult =  (uint16)ADCH ;
     c84:	e5 e2       	ldi	r30, 0x25	; 37
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	80 81       	ld	r24, Z
     c8a:	88 2f       	mov	r24, r24
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	ef 81       	ldd	r30, Y+7	; 0x07
     c90:	f8 85       	ldd	r31, Y+8	; 0x08
     c92:	91 83       	std	Z+1, r25	; 0x01
     c94:	80 83       	st	Z, r24
						*copy_pu16DigitalResult =  ADC ;

					#endif
									/*TASK IS DONE , ADC IS NOW IDLE */

						ADC_u8BusyFlag = IDLE ;
     c96:	10 92 33 01 	sts	0x0133, r1
     c9a:	05 c0       	rjmp	.+10     	; 0xca6 <ADC_u8StartSingleConversionSynch+0xfe>
				}
			}
			else
			{
				Local_u8ErrorState = BUSY_ERR ;
     c9c:	84 e0       	ldi	r24, 0x04	; 4
     c9e:	8d 83       	std	Y+5, r24	; 0x05
     ca0:	02 c0       	rjmp	.+4      	; 0xca6 <ADC_u8StartSingleConversionSynch+0xfe>
			}
		}
		else
		{
			Local_u8ErrorState = NULL_PTR ;
     ca2:	82 e0       	ldi	r24, 0x02	; 2
     ca4:	8d 83       	std	Y+5, r24	; 0x05
		}

		return Local_u8ErrorState ;
     ca6:	8d 81       	ldd	r24, Y+5	; 0x05
     ca8:	88 2f       	mov	r24, r24
     caa:	90 e0       	ldi	r25, 0x00	; 0

	}
     cac:	28 96       	adiw	r28, 0x08	; 8
     cae:	0f b6       	in	r0, 0x3f	; 63
     cb0:	f8 94       	cli
     cb2:	de bf       	out	0x3e, r29	; 62
     cb4:	0f be       	out	0x3f, r0	; 63
     cb6:	cd bf       	out	0x3d, r28	; 61
     cb8:	cf 91       	pop	r28
     cba:	df 91       	pop	r29
     cbc:	08 95       	ret

00000cbe <ADC_u8StartSingleConversionAsynch>:
	 * @param void(*copy_pvNotification)(void) : out parameter for the ISR function
	 * @return error state
	 */
	uint16 ADC_u8StartSingleConversionAsynch ( ADC_Channel_t copy_Channel , uint16* copy_pu16DigitalResult , void(*copy_pvNotification)(void) )

	{
     cbe:	df 93       	push	r29
     cc0:	cf 93       	push	r28
     cc2:	00 d0       	rcall	.+0      	; 0xcc4 <ADC_u8StartSingleConversionAsynch+0x6>
     cc4:	00 d0       	rcall	.+0      	; 0xcc6 <ADC_u8StartSingleConversionAsynch+0x8>
     cc6:	00 d0       	rcall	.+0      	; 0xcc8 <ADC_u8StartSingleConversionAsynch+0xa>
     cc8:	cd b7       	in	r28, 0x3d	; 61
     cca:	de b7       	in	r29, 0x3e	; 62
     ccc:	8a 83       	std	Y+2, r24	; 0x02
     cce:	7c 83       	std	Y+4, r23	; 0x04
     cd0:	6b 83       	std	Y+3, r22	; 0x03
     cd2:	5e 83       	std	Y+6, r21	; 0x06
     cd4:	4d 83       	std	Y+5, r20	; 0x05
		ADC_u8AsynchType = SINGLE ;
     cd6:	10 92 34 01 	sts	0x0134, r1
		uint8 Local_u8ErrorState = OK ;
     cda:	19 82       	std	Y+1, r1	; 0x01
		if ( ( copy_pu16DigitalResult != NULL ) && ( copy_pvNotification != NULL ) )
     cdc:	8b 81       	ldd	r24, Y+3	; 0x03
     cde:	9c 81       	ldd	r25, Y+4	; 0x04
     ce0:	00 97       	sbiw	r24, 0x00	; 0
     ce2:	c1 f1       	breq	.+112    	; 0xd54 <ADC_u8StartSingleConversionAsynch+0x96>
     ce4:	8d 81       	ldd	r24, Y+5	; 0x05
     ce6:	9e 81       	ldd	r25, Y+6	; 0x06
     ce8:	00 97       	sbiw	r24, 0x00	; 0
     cea:	a1 f1       	breq	.+104    	; 0xd54 <ADC_u8StartSingleConversionAsynch+0x96>
		{
			if ( ADC_u8BusyFlag == IDLE )
     cec:	80 91 33 01 	lds	r24, 0x0133
     cf0:	88 23       	and	r24, r24
     cf2:	69 f5       	brne	.+90     	; 0xd4e <ADC_u8StartSingleConversionAsynch+0x90>
			{
													/* ADC IS BUSY */

				ADC_u8BusyFlag = BUSY ;
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	80 93 33 01 	sts	0x0133, r24

					/* CONVERT THE DIGITAL RESULT AND THE NOTIFICATION FUNCTION LOCAL VARIABLES INTO GLOBAL */

				ADC_pu16DigitalResult  = copy_pu16DigitalResult ;
     cfa:	8b 81       	ldd	r24, Y+3	; 0x03
     cfc:	9c 81       	ldd	r25, Y+4	; 0x04
     cfe:	90 93 30 01 	sts	0x0130, r25
     d02:	80 93 2f 01 	sts	0x012F, r24
				ADC_pvNotificationFunc = copy_pvNotification ;
     d06:	8d 81       	ldd	r24, Y+5	; 0x05
     d08:	9e 81       	ldd	r25, Y+6	; 0x06
     d0a:	90 93 32 01 	sts	0x0132, r25
     d0e:	80 93 31 01 	sts	0x0131, r24



													/* 1- SET THE REQUIRED CHANNEL */

				ADMUX &= CHANNEL_SELECTION_MASK ;
     d12:	a7 e2       	ldi	r26, 0x27	; 39
     d14:	b0 e0       	ldi	r27, 0x00	; 0
     d16:	e7 e2       	ldi	r30, 0x27	; 39
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	80 81       	ld	r24, Z
     d1c:	80 7e       	andi	r24, 0xE0	; 224
     d1e:	8c 93       	st	X, r24
				ADMUX |= copy_Channel ;
     d20:	a7 e2       	ldi	r26, 0x27	; 39
     d22:	b0 e0       	ldi	r27, 0x00	; 0
     d24:	e7 e2       	ldi	r30, 0x27	; 39
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	90 81       	ld	r25, Z
     d2a:	8a 81       	ldd	r24, Y+2	; 0x02
     d2c:	89 2b       	or	r24, r25
     d2e:	8c 93       	st	X, r24

													/* 2- SRART CONVERSION */

				SET_BIT ( ADCSRA , ADCSRA_ADSC ) ;
     d30:	a6 e2       	ldi	r26, 0x26	; 38
     d32:	b0 e0       	ldi	r27, 0x00	; 0
     d34:	e6 e2       	ldi	r30, 0x26	; 38
     d36:	f0 e0       	ldi	r31, 0x00	; 0
     d38:	80 81       	ld	r24, Z
     d3a:	80 64       	ori	r24, 0x40	; 64
     d3c:	8c 93       	st	X, r24

													/* 3- ENABLE ADC CONVERSION COMPLETE INTERRUPT */

				SET_BIT( ADCSRA , ADCSRA_ADIE ) ;
     d3e:	a6 e2       	ldi	r26, 0x26	; 38
     d40:	b0 e0       	ldi	r27, 0x00	; 0
     d42:	e6 e2       	ldi	r30, 0x26	; 38
     d44:	f0 e0       	ldi	r31, 0x00	; 0
     d46:	80 81       	ld	r24, Z
     d48:	88 60       	ori	r24, 0x08	; 8
     d4a:	8c 93       	st	X, r24
     d4c:	05 c0       	rjmp	.+10     	; 0xd58 <ADC_u8StartSingleConversionAsynch+0x9a>

			}
			else
			{
				Local_u8ErrorState = BUSY_ERR ;
     d4e:	84 e0       	ldi	r24, 0x04	; 4
     d50:	89 83       	std	Y+1, r24	; 0x01
     d52:	02 c0       	rjmp	.+4      	; 0xd58 <ADC_u8StartSingleConversionAsynch+0x9a>
			}
		}
		else
		{
			Local_u8ErrorState = NULL_PTR ;
     d54:	82 e0       	ldi	r24, 0x02	; 2
     d56:	89 83       	std	Y+1, r24	; 0x01
		}

		return Local_u8ErrorState ;
     d58:	89 81       	ldd	r24, Y+1	; 0x01
     d5a:	88 2f       	mov	r24, r24
     d5c:	90 e0       	ldi	r25, 0x00	; 0
	}
     d5e:	26 96       	adiw	r28, 0x06	; 6
     d60:	0f b6       	in	r0, 0x3f	; 63
     d62:	f8 94       	cli
     d64:	de bf       	out	0x3e, r29	; 62
     d66:	0f be       	out	0x3f, r0	; 63
     d68:	cd bf       	out	0x3d, r28	; 61
     d6a:	cf 91       	pop	r28
     d6c:	df 91       	pop	r29
     d6e:	08 95       	ret

00000d70 <ADC_u8StartChainConversionAsynch>:
	 * @brief this function is used to start Chain channel Asynch. conversions and get back with the result
	 * @param copy_Channel : the required struct pointer @ADC_Chain_t
	 * @return error state
	 */
	uint8  ADC_u8StartChainConversionAsynch 	 	 (const ADC_Chain_t *copy_ChainData)
	{
     d70:	df 93       	push	r29
     d72:	cf 93       	push	r28
     d74:	00 d0       	rcall	.+0      	; 0xd76 <ADC_u8StartChainConversionAsynch+0x6>
     d76:	0f 92       	push	r0
     d78:	cd b7       	in	r28, 0x3d	; 61
     d7a:	de b7       	in	r29, 0x3e	; 62
     d7c:	9b 83       	std	Y+3, r25	; 0x03
     d7e:	8a 83       	std	Y+2, r24	; 0x02
		uint8 Local_u8ErrorState = OK ;
     d80:	19 82       	std	Y+1, r1	; 0x01
		if (	copy_ChainData != NULL	)
     d82:	8a 81       	ldd	r24, Y+2	; 0x02
     d84:	9b 81       	ldd	r25, Y+3	; 0x03
     d86:	00 97       	sbiw	r24, 0x00	; 0
     d88:	09 f4       	brne	.+2      	; 0xd8c <ADC_u8StartChainConversionAsynch+0x1c>
     d8a:	40 c0       	rjmp	.+128    	; 0xe0c <ADC_u8StartChainConversionAsynch+0x9c>
		{
			if (ADC_u8BusyFlag == IDLE)
     d8c:	80 91 33 01 	lds	r24, 0x0133
     d90:	88 23       	and	r24, r24
     d92:	c9 f5       	brne	.+114    	; 0xe06 <ADC_u8StartChainConversionAsynch+0x96>
			{
														/* Set the ADC busy flag */
				ADC_u8BusyFlag = BUSY;
     d94:	81 e0       	ldi	r24, 0x01	; 1
     d96:	80 93 33 01 	sts	0x0133, r24

				ADC_u8AsynchType = CHAIN;
     d9a:	81 e0       	ldi	r24, 0x01	; 1
     d9c:	80 93 34 01 	sts	0x0134, r24
														/* Save the parameters */

				ADC_pChainData = copy_ChainData ;
     da0:	8a 81       	ldd	r24, Y+2	; 0x02
     da2:	9b 81       	ldd	r25, Y+3	; 0x03
     da4:	90 93 2d 01 	sts	0x012D, r25
     da8:	80 93 2c 01 	sts	0x012C, r24

				ADC_u8ConversionIndex = 0u ;
     dac:	10 92 2e 01 	sts	0x012E, r1

														/* Set the FIRST ADC channel */
				ADMUX &= CHANNEL_SELECTION_MASK;
     db0:	a7 e2       	ldi	r26, 0x27	; 39
     db2:	b0 e0       	ldi	r27, 0x00	; 0
     db4:	e7 e2       	ldi	r30, 0x27	; 39
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	80 81       	ld	r24, Z
     dba:	80 7e       	andi	r24, 0xE0	; 224
     dbc:	8c 93       	st	X, r24
				ADMUX |= ADC_pChainData->ChannelArr[ADC_u8ConversionIndex];
     dbe:	a7 e2       	ldi	r26, 0x27	; 39
     dc0:	b0 e0       	ldi	r27, 0x00	; 0
     dc2:	e7 e2       	ldi	r30, 0x27	; 39
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	40 81       	ld	r20, Z
     dc8:	e0 91 2c 01 	lds	r30, 0x012C
     dcc:	f0 91 2d 01 	lds	r31, 0x012D
     dd0:	21 81       	ldd	r18, Z+1	; 0x01
     dd2:	32 81       	ldd	r19, Z+2	; 0x02
     dd4:	80 91 2e 01 	lds	r24, 0x012E
     dd8:	88 2f       	mov	r24, r24
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	f9 01       	movw	r30, r18
     dde:	e8 0f       	add	r30, r24
     de0:	f9 1f       	adc	r31, r25
     de2:	80 81       	ld	r24, Z
     de4:	84 2b       	or	r24, r20
     de6:	8c 93       	st	X, r24


														/* Enable ADC conversion complete interrupt AND START CONVERSIONt */
				SET_BIT(ADCSRA, ADCSRA_ADSC);
     de8:	a6 e2       	ldi	r26, 0x26	; 38
     dea:	b0 e0       	ldi	r27, 0x00	; 0
     dec:	e6 e2       	ldi	r30, 0x26	; 38
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	80 81       	ld	r24, Z
     df2:	80 64       	ori	r24, 0x40	; 64
     df4:	8c 93       	st	X, r24
				SET_BIT(ADCSRA, ADCSRA_ADIE);
     df6:	a6 e2       	ldi	r26, 0x26	; 38
     df8:	b0 e0       	ldi	r27, 0x00	; 0
     dfa:	e6 e2       	ldi	r30, 0x26	; 38
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	80 81       	ld	r24, Z
     e00:	88 60       	ori	r24, 0x08	; 8
     e02:	8c 93       	st	X, r24
     e04:	05 c0       	rjmp	.+10     	; 0xe10 <ADC_u8StartChainConversionAsynch+0xa0>
			}
			else
			{
				Local_u8ErrorState = BUSY_ERR ;
     e06:	84 e0       	ldi	r24, 0x04	; 4
     e08:	89 83       	std	Y+1, r24	; 0x01
     e0a:	02 c0       	rjmp	.+4      	; 0xe10 <ADC_u8StartChainConversionAsynch+0xa0>
			}
		}
		else
		{
			Local_u8ErrorState = NULL_PTR;
     e0c:	82 e0       	ldi	r24, 0x02	; 2
     e0e:	89 83       	std	Y+1, r24	; 0x01
		}
		return Local_u8ErrorState ;
     e10:	89 81       	ldd	r24, Y+1	; 0x01
	}
     e12:	0f 90       	pop	r0
     e14:	0f 90       	pop	r0
     e16:	0f 90       	pop	r0
     e18:	cf 91       	pop	r28
     e1a:	df 91       	pop	r29
     e1c:	08 95       	ret

00000e1e <__vector_16>:
	 */
												/* ADC CONVERSION COMPLETE ISR */

	void __vector_16 ( void )			__attribute__((signal)) ;
	void __vector_16 ( void )
	{
     e1e:	1f 92       	push	r1
     e20:	0f 92       	push	r0
     e22:	0f b6       	in	r0, 0x3f	; 63
     e24:	0f 92       	push	r0
     e26:	11 24       	eor	r1, r1
     e28:	2f 93       	push	r18
     e2a:	3f 93       	push	r19
     e2c:	4f 93       	push	r20
     e2e:	5f 93       	push	r21
     e30:	6f 93       	push	r22
     e32:	7f 93       	push	r23
     e34:	8f 93       	push	r24
     e36:	9f 93       	push	r25
     e38:	af 93       	push	r26
     e3a:	bf 93       	push	r27
     e3c:	ef 93       	push	r30
     e3e:	ff 93       	push	r31
     e40:	df 93       	push	r29
     e42:	cf 93       	push	r28
     e44:	cd b7       	in	r28, 0x3d	; 61
     e46:	de b7       	in	r29, 0x3e	; 62
		if (ADC_u8AsynchType == SINGLE)
     e48:	80 91 34 01 	lds	r24, 0x0134
     e4c:	88 23       	and	r24, r24
     e4e:	09 f5       	brne	.+66     	; 0xe92 <__vector_16+0x74>
		{
			#if 			ADC_u8RESOLUTION == EIGHT_BITS

							// IN 8-BIT RESOLUTION ( ADC READONG == ADCH )

					*ADC_pu16DigitalResult = (uint16)ADCH ;
     e50:	a0 91 2f 01 	lds	r26, 0x012F
     e54:	b0 91 30 01 	lds	r27, 0x0130
     e58:	e5 e2       	ldi	r30, 0x25	; 37
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	80 81       	ld	r24, Z
     e5e:	88 2f       	mov	r24, r24
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	8d 93       	st	X+, r24
     e64:	9c 93       	st	X, r25
			#elif 			ADC_u8RESOLUTION == TEN_BITS
					*ADC_pu16DigitalResult = ADC ;
			#endif
							/* ADC INTERRUPT DISABLE */

			CLR_BIT(ADCSRA,ADCSRA_ADIE) ;
     e66:	a6 e2       	ldi	r26, 0x26	; 38
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	e6 e2       	ldi	r30, 0x26	; 38
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 81       	ld	r24, Z
     e70:	87 7f       	andi	r24, 0xF7	; 247
     e72:	8c 93       	st	X, r24

							/*TASK IS DONE , ADC IS NOW IDLE */

			ADC_u8BusyFlag = IDLE ;
     e74:	10 92 33 01 	sts	0x0133, r1

							/* INVOKE THE CALLBACK NOTIFICATION FUNCTION */

			if ( ADC_pvNotificationFunc != NULL )
     e78:	80 91 31 01 	lds	r24, 0x0131
     e7c:	90 91 32 01 	lds	r25, 0x0132
     e80:	00 97       	sbiw	r24, 0x00	; 0
     e82:	09 f4       	brne	.+2      	; 0xe86 <__vector_16+0x68>
     e84:	6d c0       	rjmp	.+218    	; 0xf60 <__vector_16+0x142>
			{
				ADC_pvNotificationFunc() ;
     e86:	e0 91 31 01 	lds	r30, 0x0131
     e8a:	f0 91 32 01 	lds	r31, 0x0132
     e8e:	09 95       	icall
     e90:	67 c0       	rjmp	.+206    	; 0xf60 <__vector_16+0x142>
			else
			{
				// DO NOTHING
			}
		}
		else if (ADC_u8AsynchType == CHAIN )
     e92:	80 91 34 01 	lds	r24, 0x0134
     e96:	81 30       	cpi	r24, 0x01	; 1
     e98:	09 f0       	breq	.+2      	; 0xe9c <__vector_16+0x7e>
     e9a:	62 c0       	rjmp	.+196    	; 0xf60 <__vector_16+0x142>
		{

			#if 			ADC_u8RESOLUTION == EIGHT_BITS

							// IN 8-BIT RESOLUTION ( ADC READONG == ADCH )
					ADC_pChainData -> ResultArr[ADC_u8ConversionIndex] = (uint16)ADCH ;
     e9c:	e0 91 2c 01 	lds	r30, 0x012C
     ea0:	f0 91 2d 01 	lds	r31, 0x012D
     ea4:	23 81       	ldd	r18, Z+3	; 0x03
     ea6:	34 81       	ldd	r19, Z+4	; 0x04
     ea8:	80 91 2e 01 	lds	r24, 0x012E
     eac:	88 2f       	mov	r24, r24
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	88 0f       	add	r24, r24
     eb2:	99 1f       	adc	r25, r25
     eb4:	d9 01       	movw	r26, r18
     eb6:	a8 0f       	add	r26, r24
     eb8:	b9 1f       	adc	r27, r25
     eba:	e5 e2       	ldi	r30, 0x25	; 37
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	88 2f       	mov	r24, r24
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	11 96       	adiw	r26, 0x01	; 1
     ec6:	9c 93       	st	X, r25
     ec8:	8e 93       	st	-X, r24
			#elif 			ADC_u8RESOLUTION == TEN_BITS
					ADC_pChainData -> ResultArr[ADC_u8ConversionIndex] = ADC ;

			#endif

					ADC_u8ConversionIndex ++ ;
     eca:	80 91 2e 01 	lds	r24, 0x012E
     ece:	8f 5f       	subi	r24, 0xFF	; 255
     ed0:	80 93 2e 01 	sts	0x012E, r24

								/* If all samples have been taken, disable the ADC and call the callback function */
			if (ADC_u8ConversionIndex == ADC_pChainData->ConversionsNum)
     ed4:	e0 91 2c 01 	lds	r30, 0x012C
     ed8:	f0 91 2d 01 	lds	r31, 0x012D
     edc:	90 81       	ld	r25, Z
     ede:	80 91 2e 01 	lds	r24, 0x012E
     ee2:	98 17       	cp	r25, r24
     ee4:	d1 f4       	brne	.+52     	; 0xf1a <__vector_16+0xfc>
			{
				ADC_u8BusyFlag = IDLE;
     ee6:	10 92 33 01 	sts	0x0133, r1

				CLR_BIT(ADCSRA, ADCSRA_ADIE);   				// DISABLE INTERRUPT
     eea:	a6 e2       	ldi	r26, 0x26	; 38
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	e6 e2       	ldi	r30, 0x26	; 38
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	87 7f       	andi	r24, 0xF7	; 247
     ef6:	8c 93       	st	X, r24

				if(ADC_pChainData->NotificationFunc != NULL)
     ef8:	e0 91 2c 01 	lds	r30, 0x012C
     efc:	f0 91 2d 01 	lds	r31, 0x012D
     f00:	85 81       	ldd	r24, Z+5	; 0x05
     f02:	96 81       	ldd	r25, Z+6	; 0x06
     f04:	00 97       	sbiw	r24, 0x00	; 0
     f06:	61 f1       	breq	.+88     	; 0xf60 <__vector_16+0x142>
				{
					ADC_pChainData->NotificationFunc() ;
     f08:	e0 91 2c 01 	lds	r30, 0x012C
     f0c:	f0 91 2d 01 	lds	r31, 0x012D
     f10:	05 80       	ldd	r0, Z+5	; 0x05
     f12:	f6 81       	ldd	r31, Z+6	; 0x06
     f14:	e0 2d       	mov	r30, r0
     f16:	09 95       	icall
     f18:	23 c0       	rjmp	.+70     	; 0xf60 <__vector_16+0x142>
				        			/* start the next conversion */
			else
			{
								/* Set the ADC channel */

				ADMUX &= CHANNEL_SELECTION_MASK;
     f1a:	a7 e2       	ldi	r26, 0x27	; 39
     f1c:	b0 e0       	ldi	r27, 0x00	; 0
     f1e:	e7 e2       	ldi	r30, 0x27	; 39
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	80 81       	ld	r24, Z
     f24:	80 7e       	andi	r24, 0xE0	; 224
     f26:	8c 93       	st	X, r24
				ADMUX |= ADC_pChainData->ChannelArr[ADC_u8ConversionIndex];
     f28:	a7 e2       	ldi	r26, 0x27	; 39
     f2a:	b0 e0       	ldi	r27, 0x00	; 0
     f2c:	e7 e2       	ldi	r30, 0x27	; 39
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	40 81       	ld	r20, Z
     f32:	e0 91 2c 01 	lds	r30, 0x012C
     f36:	f0 91 2d 01 	lds	r31, 0x012D
     f3a:	21 81       	ldd	r18, Z+1	; 0x01
     f3c:	32 81       	ldd	r19, Z+2	; 0x02
     f3e:	80 91 2e 01 	lds	r24, 0x012E
     f42:	88 2f       	mov	r24, r24
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	f9 01       	movw	r30, r18
     f48:	e8 0f       	add	r30, r24
     f4a:	f9 1f       	adc	r31, r25
     f4c:	80 81       	ld	r24, Z
     f4e:	84 2b       	or	r24, r20
     f50:	8c 93       	st	X, r24


								/* Start next conversion */
				SET_BIT(ADCSRA, ADCSRA_ADSC);
     f52:	a6 e2       	ldi	r26, 0x26	; 38
     f54:	b0 e0       	ldi	r27, 0x00	; 0
     f56:	e6 e2       	ldi	r30, 0x26	; 38
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	80 64       	ori	r24, 0x40	; 64
     f5e:	8c 93       	st	X, r24
			}
		}


	}
     f60:	cf 91       	pop	r28
     f62:	df 91       	pop	r29
     f64:	ff 91       	pop	r31
     f66:	ef 91       	pop	r30
     f68:	bf 91       	pop	r27
     f6a:	af 91       	pop	r26
     f6c:	9f 91       	pop	r25
     f6e:	8f 91       	pop	r24
     f70:	7f 91       	pop	r23
     f72:	6f 91       	pop	r22
     f74:	5f 91       	pop	r21
     f76:	4f 91       	pop	r20
     f78:	3f 91       	pop	r19
     f7a:	2f 91       	pop	r18
     f7c:	0f 90       	pop	r0
     f7e:	0f be       	out	0x3f, r0	; 63
     f80:	0f 90       	pop	r0
     f82:	1f 90       	pop	r1
     f84:	18 95       	reti

00000f86 <Hamoksha_voidWelcome>:
#include "Assignment_Private_Headers.h"

		uint8 u8_Flag ;

void Hamoksha_voidWelcome (void)
{
     f86:	df 93       	push	r29
     f88:	cf 93       	push	r28
     f8a:	cd b7       	in	r28, 0x3d	; 61
     f8c:	de b7       	in	r29, 0x3e	; 62
     f8e:	ef 97       	sbiw	r28, 0x3f	; 63
     f90:	0f b6       	in	r0, 0x3f	; 63
     f92:	f8 94       	cli
     f94:	de bf       	out	0x3e, r29	; 62
     f96:	0f be       	out	0x3f, r0	; 63
     f98:	cd bf       	out	0x3d, r28	; 61
			0b00000101 ,
			0b00001110 ,
			0b00010100 ,
			0b00001110 ,
			0b00010001 ,
			0 } ;
     f9a:	ce 01       	movw	r24, r28
     f9c:	4e 96       	adiw	r24, 0x1e	; 30
     f9e:	9f ab       	std	Y+55, r25	; 0x37
     fa0:	8e ab       	std	Y+54, r24	; 0x36
     fa2:	a3 e2       	ldi	r26, 0x23	; 35
     fa4:	b1 e0       	ldi	r27, 0x01	; 1
     fa6:	b9 af       	std	Y+57, r27	; 0x39
     fa8:	a8 af       	std	Y+56, r26	; 0x38
     faa:	b8 e0       	ldi	r27, 0x08	; 8
     fac:	ba af       	std	Y+58, r27	; 0x3a
     fae:	e8 ad       	ldd	r30, Y+56	; 0x38
     fb0:	f9 ad       	ldd	r31, Y+57	; 0x39
     fb2:	00 80       	ld	r0, Z
     fb4:	88 ad       	ldd	r24, Y+56	; 0x38
     fb6:	99 ad       	ldd	r25, Y+57	; 0x39
     fb8:	01 96       	adiw	r24, 0x01	; 1
     fba:	99 af       	std	Y+57, r25	; 0x39
     fbc:	88 af       	std	Y+56, r24	; 0x38
     fbe:	ae a9       	ldd	r26, Y+54	; 0x36
     fc0:	bf a9       	ldd	r27, Y+55	; 0x37
     fc2:	0c 92       	st	X, r0
     fc4:	ee a9       	ldd	r30, Y+54	; 0x36
     fc6:	ff a9       	ldd	r31, Y+55	; 0x37
     fc8:	31 96       	adiw	r30, 0x01	; 1
     fca:	ff ab       	std	Y+55, r31	; 0x37
     fcc:	ee ab       	std	Y+54, r30	; 0x36
     fce:	fa ad       	ldd	r31, Y+58	; 0x3a
     fd0:	f1 50       	subi	r31, 0x01	; 1
     fd2:	fa af       	std	Y+58, r31	; 0x3a
     fd4:	8a ad       	ldd	r24, Y+58	; 0x3a
     fd6:	88 23       	and	r24, r24
     fd8:	51 f7       	brne	.-44     	; 0xfae <Hamoksha_voidWelcome+0x28>
			0b00010100 ,
			0b00001110 ,
			0b00000101 ,
			0b00001110 ,
			0b00010001 ,
			0 } ;
     fda:	de 01       	movw	r26, r28
     fdc:	96 96       	adiw	r26, 0x26	; 38
     fde:	bc af       	std	Y+60, r27	; 0x3c
     fe0:	ab af       	std	Y+59, r26	; 0x3b
     fe2:	eb e1       	ldi	r30, 0x1B	; 27
     fe4:	f1 e0       	ldi	r31, 0x01	; 1
     fe6:	fe af       	std	Y+62, r31	; 0x3e
     fe8:	ed af       	std	Y+61, r30	; 0x3d
     fea:	f8 e0       	ldi	r31, 0x08	; 8
     fec:	ff af       	std	Y+63, r31	; 0x3f
     fee:	ad ad       	ldd	r26, Y+61	; 0x3d
     ff0:	be ad       	ldd	r27, Y+62	; 0x3e
     ff2:	0c 90       	ld	r0, X
     ff4:	ed ad       	ldd	r30, Y+61	; 0x3d
     ff6:	fe ad       	ldd	r31, Y+62	; 0x3e
     ff8:	31 96       	adiw	r30, 0x01	; 1
     ffa:	fe af       	std	Y+62, r31	; 0x3e
     ffc:	ed af       	std	Y+61, r30	; 0x3d
     ffe:	ab ad       	ldd	r26, Y+59	; 0x3b
    1000:	bc ad       	ldd	r27, Y+60	; 0x3c
    1002:	0c 92       	st	X, r0
    1004:	eb ad       	ldd	r30, Y+59	; 0x3b
    1006:	fc ad       	ldd	r31, Y+60	; 0x3c
    1008:	31 96       	adiw	r30, 0x01	; 1
    100a:	fc af       	std	Y+60, r31	; 0x3c
    100c:	eb af       	std	Y+59, r30	; 0x3b
    100e:	ff ad       	ldd	r31, Y+63	; 0x3f
    1010:	f1 50       	subi	r31, 0x01	; 1
    1012:	ff af       	std	Y+63, r31	; 0x3f
    1014:	8f ad       	ldd	r24, Y+63	; 0x3f
    1016:	88 23       	and	r24, r24
    1018:	51 f7       	brne	.-44     	; 0xfee <Hamoksha_voidWelcome+0x68>
	uint8 Local_u8ZeroArr[8]={0};
    101a:	88 e0       	ldi	r24, 0x08	; 8
    101c:	fe 01       	movw	r30, r28
    101e:	be 96       	adiw	r30, 0x2e	; 46
    1020:	df 01       	movw	r26, r30
    1022:	98 2f       	mov	r25, r24
    1024:	1d 92       	st	X+, r1
    1026:	9a 95       	dec	r25
    1028:	e9 f7       	brne	.-6      	; 0x1024 <Hamoksha_voidWelcome+0x9e>
	uint8 XPos = 0 ;
    102a:	1d 8e       	std	Y+29, r1	; 0x1d
	CLCD_voidSendCommand(1);
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	0e 94 74 1b 	call	0x36e8	; 0x36e8 <CLCD_voidSendCommand>
	CLCD_voidGoToXY(5U,0U);
    1032:	85 e0       	ldi	r24, 0x05	; 5
    1034:	60 e0       	ldi	r22, 0x00	; 0
    1036:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <CLCD_voidGoToXY>
	voidSendString("WELCOME");
    103a:	80 e6       	ldi	r24, 0x60	; 96
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	0e 94 44 1c 	call	0x3888	; 0x3888 <voidSendString>
    1042:	0e c1       	rjmp	.+540    	; 0x1260 <Hamoksha_voidWelcome+0x2da>
	while ( XPos !=16 )
	{
		//CLCD_voidSendCommand(1);
		CLCD_u8WriteSpecialCharacter( 1u , Local_u8Pattern1Arr, XPos , 1u );
    1044:	9e 01       	movw	r18, r28
    1046:	22 5e       	subi	r18, 0xE2	; 226
    1048:	3f 4f       	sbci	r19, 0xFF	; 255
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	b9 01       	movw	r22, r18
    104e:	4d 8d       	ldd	r20, Y+29	; 0x1d
    1050:	21 e0       	ldi	r18, 0x01	; 1
    1052:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <CLCD_u8WriteSpecialCharacter>
    1056:	80 e0       	ldi	r24, 0x00	; 0
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	aa e7       	ldi	r26, 0x7A	; 122
    105c:	b3 e4       	ldi	r27, 0x43	; 67
    105e:	89 8f       	std	Y+25, r24	; 0x19
    1060:	9a 8f       	std	Y+26, r25	; 0x1a
    1062:	ab 8f       	std	Y+27, r26	; 0x1b
    1064:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1066:	69 8d       	ldd	r22, Y+25	; 0x19
    1068:	7a 8d       	ldd	r23, Y+26	; 0x1a
    106a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    106c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    106e:	20 e0       	ldi	r18, 0x00	; 0
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	4a e7       	ldi	r20, 0x7A	; 122
    1074:	55 e4       	ldi	r21, 0x45	; 69
    1076:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    107a:	dc 01       	movw	r26, r24
    107c:	cb 01       	movw	r24, r22
    107e:	8d 8b       	std	Y+21, r24	; 0x15
    1080:	9e 8b       	std	Y+22, r25	; 0x16
    1082:	af 8b       	std	Y+23, r26	; 0x17
    1084:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1086:	6d 89       	ldd	r22, Y+21	; 0x15
    1088:	7e 89       	ldd	r23, Y+22	; 0x16
    108a:	8f 89       	ldd	r24, Y+23	; 0x17
    108c:	98 8d       	ldd	r25, Y+24	; 0x18
    108e:	20 e0       	ldi	r18, 0x00	; 0
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	40 e8       	ldi	r20, 0x80	; 128
    1094:	5f e3       	ldi	r21, 0x3F	; 63
    1096:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    109a:	88 23       	and	r24, r24
    109c:	2c f4       	brge	.+10     	; 0x10a8 <Hamoksha_voidWelcome+0x122>
		__ticks = 1;
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	9c 8b       	std	Y+20, r25	; 0x14
    10a4:	8b 8b       	std	Y+19, r24	; 0x13
    10a6:	3f c0       	rjmp	.+126    	; 0x1126 <Hamoksha_voidWelcome+0x1a0>
	else if (__tmp > 65535)
    10a8:	6d 89       	ldd	r22, Y+21	; 0x15
    10aa:	7e 89       	ldd	r23, Y+22	; 0x16
    10ac:	8f 89       	ldd	r24, Y+23	; 0x17
    10ae:	98 8d       	ldd	r25, Y+24	; 0x18
    10b0:	20 e0       	ldi	r18, 0x00	; 0
    10b2:	3f ef       	ldi	r19, 0xFF	; 255
    10b4:	4f e7       	ldi	r20, 0x7F	; 127
    10b6:	57 e4       	ldi	r21, 0x47	; 71
    10b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10bc:	18 16       	cp	r1, r24
    10be:	4c f5       	brge	.+82     	; 0x1112 <Hamoksha_voidWelcome+0x18c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10c0:	69 8d       	ldd	r22, Y+25	; 0x19
    10c2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    10c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    10c8:	20 e0       	ldi	r18, 0x00	; 0
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	40 e2       	ldi	r20, 0x20	; 32
    10ce:	51 e4       	ldi	r21, 0x41	; 65
    10d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10d4:	dc 01       	movw	r26, r24
    10d6:	cb 01       	movw	r24, r22
    10d8:	bc 01       	movw	r22, r24
    10da:	cd 01       	movw	r24, r26
    10dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10e0:	dc 01       	movw	r26, r24
    10e2:	cb 01       	movw	r24, r22
    10e4:	9c 8b       	std	Y+20, r25	; 0x14
    10e6:	8b 8b       	std	Y+19, r24	; 0x13
    10e8:	0f c0       	rjmp	.+30     	; 0x1108 <Hamoksha_voidWelcome+0x182>
    10ea:	80 e9       	ldi	r24, 0x90	; 144
    10ec:	91 e0       	ldi	r25, 0x01	; 1
    10ee:	9a 8b       	std	Y+18, r25	; 0x12
    10f0:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    10f2:	89 89       	ldd	r24, Y+17	; 0x11
    10f4:	9a 89       	ldd	r25, Y+18	; 0x12
    10f6:	01 97       	sbiw	r24, 0x01	; 1
    10f8:	f1 f7       	brne	.-4      	; 0x10f6 <Hamoksha_voidWelcome+0x170>
    10fa:	9a 8b       	std	Y+18, r25	; 0x12
    10fc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10fe:	8b 89       	ldd	r24, Y+19	; 0x13
    1100:	9c 89       	ldd	r25, Y+20	; 0x14
    1102:	01 97       	sbiw	r24, 0x01	; 1
    1104:	9c 8b       	std	Y+20, r25	; 0x14
    1106:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1108:	8b 89       	ldd	r24, Y+19	; 0x13
    110a:	9c 89       	ldd	r25, Y+20	; 0x14
    110c:	00 97       	sbiw	r24, 0x00	; 0
    110e:	69 f7       	brne	.-38     	; 0x10ea <Hamoksha_voidWelcome+0x164>
    1110:	14 c0       	rjmp	.+40     	; 0x113a <Hamoksha_voidWelcome+0x1b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1112:	6d 89       	ldd	r22, Y+21	; 0x15
    1114:	7e 89       	ldd	r23, Y+22	; 0x16
    1116:	8f 89       	ldd	r24, Y+23	; 0x17
    1118:	98 8d       	ldd	r25, Y+24	; 0x18
    111a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    111e:	dc 01       	movw	r26, r24
    1120:	cb 01       	movw	r24, r22
    1122:	9c 8b       	std	Y+20, r25	; 0x14
    1124:	8b 8b       	std	Y+19, r24	; 0x13
    1126:	8b 89       	ldd	r24, Y+19	; 0x13
    1128:	9c 89       	ldd	r25, Y+20	; 0x14
    112a:	98 8b       	std	Y+16, r25	; 0x10
    112c:	8f 87       	std	Y+15, r24	; 0x0f
    112e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1130:	98 89       	ldd	r25, Y+16	; 0x10
    1132:	01 97       	sbiw	r24, 0x01	; 1
    1134:	f1 f7       	brne	.-4      	; 0x1132 <Hamoksha_voidWelcome+0x1ac>
    1136:	98 8b       	std	Y+16, r25	; 0x10
    1138:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(250);
		CLCD_u8WriteSpecialCharacter( 3u , Local_u8ZeroArr, XPos , 1u );
    113a:	9e 01       	movw	r18, r28
    113c:	22 5d       	subi	r18, 0xD2	; 210
    113e:	3f 4f       	sbci	r19, 0xFF	; 255
    1140:	83 e0       	ldi	r24, 0x03	; 3
    1142:	b9 01       	movw	r22, r18
    1144:	4d 8d       	ldd	r20, Y+29	; 0x1d
    1146:	21 e0       	ldi	r18, 0x01	; 1
    1148:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <CLCD_u8WriteSpecialCharacter>
		XPos ++ ;
    114c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    114e:	8f 5f       	subi	r24, 0xFF	; 255
    1150:	8d 8f       	std	Y+29, r24	; 0x1d
		//CLCD_voidSendCommand(1);
		CLCD_u8WriteSpecialCharacter( 2u , Local_u8Pattern2Arr, XPos , 1u );
    1152:	9e 01       	movw	r18, r28
    1154:	2a 5d       	subi	r18, 0xDA	; 218
    1156:	3f 4f       	sbci	r19, 0xFF	; 255
    1158:	82 e0       	ldi	r24, 0x02	; 2
    115a:	b9 01       	movw	r22, r18
    115c:	4d 8d       	ldd	r20, Y+29	; 0x1d
    115e:	21 e0       	ldi	r18, 0x01	; 1
    1160:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <CLCD_u8WriteSpecialCharacter>
    1164:	80 e0       	ldi	r24, 0x00	; 0
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	aa e7       	ldi	r26, 0x7A	; 122
    116a:	b3 e4       	ldi	r27, 0x43	; 67
    116c:	8b 87       	std	Y+11, r24	; 0x0b
    116e:	9c 87       	std	Y+12, r25	; 0x0c
    1170:	ad 87       	std	Y+13, r26	; 0x0d
    1172:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1174:	6b 85       	ldd	r22, Y+11	; 0x0b
    1176:	7c 85       	ldd	r23, Y+12	; 0x0c
    1178:	8d 85       	ldd	r24, Y+13	; 0x0d
    117a:	9e 85       	ldd	r25, Y+14	; 0x0e
    117c:	20 e0       	ldi	r18, 0x00	; 0
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	4a e7       	ldi	r20, 0x7A	; 122
    1182:	55 e4       	ldi	r21, 0x45	; 69
    1184:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1188:	dc 01       	movw	r26, r24
    118a:	cb 01       	movw	r24, r22
    118c:	8f 83       	std	Y+7, r24	; 0x07
    118e:	98 87       	std	Y+8, r25	; 0x08
    1190:	a9 87       	std	Y+9, r26	; 0x09
    1192:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1194:	6f 81       	ldd	r22, Y+7	; 0x07
    1196:	78 85       	ldd	r23, Y+8	; 0x08
    1198:	89 85       	ldd	r24, Y+9	; 0x09
    119a:	9a 85       	ldd	r25, Y+10	; 0x0a
    119c:	20 e0       	ldi	r18, 0x00	; 0
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	40 e8       	ldi	r20, 0x80	; 128
    11a2:	5f e3       	ldi	r21, 0x3F	; 63
    11a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11a8:	88 23       	and	r24, r24
    11aa:	2c f4       	brge	.+10     	; 0x11b6 <Hamoksha_voidWelcome+0x230>
		__ticks = 1;
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	9e 83       	std	Y+6, r25	; 0x06
    11b2:	8d 83       	std	Y+5, r24	; 0x05
    11b4:	3f c0       	rjmp	.+126    	; 0x1234 <Hamoksha_voidWelcome+0x2ae>
	else if (__tmp > 65535)
    11b6:	6f 81       	ldd	r22, Y+7	; 0x07
    11b8:	78 85       	ldd	r23, Y+8	; 0x08
    11ba:	89 85       	ldd	r24, Y+9	; 0x09
    11bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    11be:	20 e0       	ldi	r18, 0x00	; 0
    11c0:	3f ef       	ldi	r19, 0xFF	; 255
    11c2:	4f e7       	ldi	r20, 0x7F	; 127
    11c4:	57 e4       	ldi	r21, 0x47	; 71
    11c6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11ca:	18 16       	cp	r1, r24
    11cc:	4c f5       	brge	.+82     	; 0x1220 <Hamoksha_voidWelcome+0x29a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    11d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    11d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    11d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    11d6:	20 e0       	ldi	r18, 0x00	; 0
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	40 e2       	ldi	r20, 0x20	; 32
    11dc:	51 e4       	ldi	r21, 0x41	; 65
    11de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11e2:	dc 01       	movw	r26, r24
    11e4:	cb 01       	movw	r24, r22
    11e6:	bc 01       	movw	r22, r24
    11e8:	cd 01       	movw	r24, r26
    11ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11ee:	dc 01       	movw	r26, r24
    11f0:	cb 01       	movw	r24, r22
    11f2:	9e 83       	std	Y+6, r25	; 0x06
    11f4:	8d 83       	std	Y+5, r24	; 0x05
    11f6:	0f c0       	rjmp	.+30     	; 0x1216 <Hamoksha_voidWelcome+0x290>
    11f8:	80 e9       	ldi	r24, 0x90	; 144
    11fa:	91 e0       	ldi	r25, 0x01	; 1
    11fc:	9c 83       	std	Y+4, r25	; 0x04
    11fe:	8b 83       	std	Y+3, r24	; 0x03
    1200:	8b 81       	ldd	r24, Y+3	; 0x03
    1202:	9c 81       	ldd	r25, Y+4	; 0x04
    1204:	01 97       	sbiw	r24, 0x01	; 1
    1206:	f1 f7       	brne	.-4      	; 0x1204 <Hamoksha_voidWelcome+0x27e>
    1208:	9c 83       	std	Y+4, r25	; 0x04
    120a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    120c:	8d 81       	ldd	r24, Y+5	; 0x05
    120e:	9e 81       	ldd	r25, Y+6	; 0x06
    1210:	01 97       	sbiw	r24, 0x01	; 1
    1212:	9e 83       	std	Y+6, r25	; 0x06
    1214:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1216:	8d 81       	ldd	r24, Y+5	; 0x05
    1218:	9e 81       	ldd	r25, Y+6	; 0x06
    121a:	00 97       	sbiw	r24, 0x00	; 0
    121c:	69 f7       	brne	.-38     	; 0x11f8 <Hamoksha_voidWelcome+0x272>
    121e:	14 c0       	rjmp	.+40     	; 0x1248 <Hamoksha_voidWelcome+0x2c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1220:	6f 81       	ldd	r22, Y+7	; 0x07
    1222:	78 85       	ldd	r23, Y+8	; 0x08
    1224:	89 85       	ldd	r24, Y+9	; 0x09
    1226:	9a 85       	ldd	r25, Y+10	; 0x0a
    1228:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    122c:	dc 01       	movw	r26, r24
    122e:	cb 01       	movw	r24, r22
    1230:	9e 83       	std	Y+6, r25	; 0x06
    1232:	8d 83       	std	Y+5, r24	; 0x05
    1234:	8d 81       	ldd	r24, Y+5	; 0x05
    1236:	9e 81       	ldd	r25, Y+6	; 0x06
    1238:	9a 83       	std	Y+2, r25	; 0x02
    123a:	89 83       	std	Y+1, r24	; 0x01
    123c:	89 81       	ldd	r24, Y+1	; 0x01
    123e:	9a 81       	ldd	r25, Y+2	; 0x02
    1240:	01 97       	sbiw	r24, 0x01	; 1
    1242:	f1 f7       	brne	.-4      	; 0x1240 <Hamoksha_voidWelcome+0x2ba>
    1244:	9a 83       	std	Y+2, r25	; 0x02
    1246:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(250);
		CLCD_u8WriteSpecialCharacter( 3u , Local_u8ZeroArr, XPos , 1u );
    1248:	9e 01       	movw	r18, r28
    124a:	22 5d       	subi	r18, 0xD2	; 210
    124c:	3f 4f       	sbci	r19, 0xFF	; 255
    124e:	83 e0       	ldi	r24, 0x03	; 3
    1250:	b9 01       	movw	r22, r18
    1252:	4d 8d       	ldd	r20, Y+29	; 0x1d
    1254:	21 e0       	ldi	r18, 0x01	; 1
    1256:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <CLCD_u8WriteSpecialCharacter>
		XPos ++ ;
    125a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    125c:	8f 5f       	subi	r24, 0xFF	; 255
    125e:	8d 8f       	std	Y+29, r24	; 0x1d
	uint8 Local_u8ZeroArr[8]={0};
	uint8 XPos = 0 ;
	CLCD_voidSendCommand(1);
	CLCD_voidGoToXY(5U,0U);
	voidSendString("WELCOME");
	while ( XPos !=16 )
    1260:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1262:	80 31       	cpi	r24, 0x10	; 16
    1264:	09 f0       	breq	.+2      	; 0x1268 <Hamoksha_voidWelcome+0x2e2>
    1266:	ee ce       	rjmp	.-548    	; 0x1044 <Hamoksha_voidWelcome+0xbe>
		CLCD_u8WriteSpecialCharacter( 2u , Local_u8Pattern2Arr, XPos , 1u );
		_delay_ms(250);
		CLCD_u8WriteSpecialCharacter( 3u , Local_u8ZeroArr, XPos , 1u );
		XPos ++ ;
	}
}
    1268:	ef 96       	adiw	r28, 0x3f	; 63
    126a:	0f b6       	in	r0, 0x3f	; 63
    126c:	f8 94       	cli
    126e:	de bf       	out	0x3e, r29	; 62
    1270:	0f be       	out	0x3f, r0	; 63
    1272:	cd bf       	out	0x3d, r28	; 61
    1274:	cf 91       	pop	r28
    1276:	df 91       	pop	r29
    1278:	08 95       	ret

0000127a <CLCD_voidID>:
void CLCD_voidID (void)
{
    127a:	0f 93       	push	r16
    127c:	1f 93       	push	r17
    127e:	df 93       	push	r29
    1280:	cf 93       	push	r28
    1282:	cd b7       	in	r28, 0x3d	; 61
    1284:	de b7       	in	r29, 0x3e	; 62
    1286:	ce 5b       	subi	r28, 0xBE	; 190
    1288:	d0 40       	sbci	r29, 0x00	; 0
    128a:	0f b6       	in	r0, 0x3f	; 63
    128c:	f8 94       	cli
    128e:	de bf       	out	0x3e, r29	; 62
    1290:	0f be       	out	0x3f, r0	; 63
    1292:	cd bf       	out	0x3d, r28	; 61
	u8_Flag = 1 ;
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	80 93 3c 01 	sts	0x013C, r24
	uint8 Local_u8TrialCounter = 1 ;
    129a:	fe 01       	movw	r30, r28
    129c:	e2 55       	subi	r30, 0x52	; 82
    129e:	ff 4f       	sbci	r31, 0xFF	; 255
    12a0:	81 e0       	ldi	r24, 0x01	; 1
    12a2:	80 83       	st	Z, r24
	uint8 Local_u8IDCounter = 0 ;
    12a4:	fe 01       	movw	r30, r28
    12a6:	e3 55       	subi	r30, 0x53	; 83
    12a8:	ff 4f       	sbci	r31, 0xFF	; 255
    12aa:	10 82       	st	Z, r1
	uint8 Local_u8ID[4] ;
	uint8 Local_u8Password[4] ;
	uint8 Local_u8PasswordEntry[4] ;
	uint8 Local_u8Iterator = 0 ;
    12ac:	fe 01       	movw	r30, r28
    12ae:	e4 55       	subi	r30, 0x54	; 84
    12b0:	ff 4f       	sbci	r31, 0xFF	; 255
    12b2:	10 82       	st	Z, r1
	uint8 Local_u8XPos = 0 ;
    12b4:	fe 01       	movw	r30, r28
    12b6:	e5 55       	subi	r30, 0x55	; 85
    12b8:	ff 4f       	sbci	r31, 0xFF	; 255
    12ba:	10 82       	st	Z, r1
	uint8 Local_u8Flag = 0 ;
    12bc:	fe 01       	movw	r30, r28
    12be:	e6 55       	subi	r30, 0x56	; 86
    12c0:	ff 4f       	sbci	r31, 0xFF	; 255
    12c2:	10 82       	st	Z, r1
	uint8 Local_u8PasswordCheckingIterator = 0 ;
    12c4:	fe 01       	movw	r30, r28
    12c6:	e7 55       	subi	r30, 0x57	; 87
    12c8:	ff 4f       	sbci	r31, 0xFF	; 255
    12ca:	10 82       	st	Z, r1
	DIO_PinVal_t Local_Pin2Reading ;
	DIO_PinVal_t Local_Pin3Reading ;
	DIO_PinVal_t Local_Pin4Reading ;
	DIO_PinVal_t Local_Pin5Reading ;
	CLCD_voidSendCommand(1);
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	0e 94 74 1b 	call	0x36e8	; 0x36e8 <CLCD_voidSendCommand>
	voidSendString("Please Enter ID:");
    12d2:	88 e6       	ldi	r24, 0x68	; 104
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	0e 94 44 1c 	call	0x3888	; 0x3888 <voidSendString>
	CLCD_voidGoToXY(0u,1u);
    12da:	80 e0       	ldi	r24, 0x00	; 0
    12dc:	61 e0       	ldi	r22, 0x01	; 1
    12de:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <CLCD_voidGoToXY>
    12e2:	f7 c3       	rjmp	.+2030   	; 0x1ad2 <CLCD_voidID+0x858>
	while (Local_u8IDCounter != 4)
	{
		DIO_u8GetPinValue(DIO_PORTD , DIO_PIN2 ,&Local_Pin2Reading);
    12e4:	9e 01       	movw	r18, r28
    12e6:	25 54       	subi	r18, 0x45	; 69
    12e8:	3f 4f       	sbci	r19, 0xFF	; 255
    12ea:	83 e0       	ldi	r24, 0x03	; 3
    12ec:	62 e0       	ldi	r22, 0x02	; 2
    12ee:	a9 01       	movw	r20, r18
    12f0:	0e 94 94 20 	call	0x4128	; 0x4128 <DIO_u8GetPinValue>
		DIO_u8GetPinValue(DIO_PORTD , DIO_PIN3 ,&Local_Pin3Reading);
    12f4:	9e 01       	movw	r18, r28
    12f6:	24 54       	subi	r18, 0x44	; 68
    12f8:	3f 4f       	sbci	r19, 0xFF	; 255
    12fa:	83 e0       	ldi	r24, 0x03	; 3
    12fc:	63 e0       	ldi	r22, 0x03	; 3
    12fe:	a9 01       	movw	r20, r18
    1300:	0e 94 94 20 	call	0x4128	; 0x4128 <DIO_u8GetPinValue>
		DIO_u8GetPinValue(DIO_PORTD , DIO_PIN4 ,&Local_Pin4Reading);
    1304:	9e 01       	movw	r18, r28
    1306:	23 54       	subi	r18, 0x43	; 67
    1308:	3f 4f       	sbci	r19, 0xFF	; 255
    130a:	83 e0       	ldi	r24, 0x03	; 3
    130c:	64 e0       	ldi	r22, 0x04	; 4
    130e:	a9 01       	movw	r20, r18
    1310:	0e 94 94 20 	call	0x4128	; 0x4128 <DIO_u8GetPinValue>
		DIO_u8GetPinValue(DIO_PORTD , DIO_PIN5 ,&Local_Pin5Reading);
    1314:	9e 01       	movw	r18, r28
    1316:	22 54       	subi	r18, 0x42	; 66
    1318:	3f 4f       	sbci	r19, 0xFF	; 255
    131a:	83 e0       	ldi	r24, 0x03	; 3
    131c:	65 e0       	ldi	r22, 0x05	; 5
    131e:	a9 01       	movw	r20, r18
    1320:	0e 94 94 20 	call	0x4128	; 0x4128 <DIO_u8GetPinValue>
		if (Local_Pin2Reading == DIO_PIN_LOW)
    1324:	fe 01       	movw	r30, r28
    1326:	e5 54       	subi	r30, 0x45	; 69
    1328:	ff 4f       	sbci	r31, 0xFF	; 255
    132a:	80 81       	ld	r24, Z
    132c:	88 23       	and	r24, r24
    132e:	09 f0       	breq	.+2      	; 0x1332 <CLCD_voidID+0xb8>
    1330:	ef c0       	rjmp	.+478    	; 0x1510 <CLCD_voidID+0x296>
		{
			voidSendNumber( 1 );
    1332:	61 e0       	ldi	r22, 0x01	; 1
    1334:	70 e0       	ldi	r23, 0x00	; 0
    1336:	80 e0       	ldi	r24, 0x00	; 0
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	0e 94 82 1c 	call	0x3904	; 0x3904 <voidSendNumber>
			OpenSound();
    133e:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <OpenSound>
    1342:	fe 01       	movw	r30, r28
    1344:	eb 55       	subi	r30, 0x5B	; 91
    1346:	ff 4f       	sbci	r31, 0xFF	; 255
    1348:	80 e0       	ldi	r24, 0x00	; 0
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	aa e7       	ldi	r26, 0x7A	; 122
    134e:	b3 e4       	ldi	r27, 0x43	; 67
    1350:	80 83       	st	Z, r24
    1352:	91 83       	std	Z+1, r25	; 0x01
    1354:	a2 83       	std	Z+2, r26	; 0x02
    1356:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1358:	8e 01       	movw	r16, r28
    135a:	0f 55       	subi	r16, 0x5F	; 95
    135c:	1f 4f       	sbci	r17, 0xFF	; 255
    135e:	fe 01       	movw	r30, r28
    1360:	eb 55       	subi	r30, 0x5B	; 91
    1362:	ff 4f       	sbci	r31, 0xFF	; 255
    1364:	60 81       	ld	r22, Z
    1366:	71 81       	ldd	r23, Z+1	; 0x01
    1368:	82 81       	ldd	r24, Z+2	; 0x02
    136a:	93 81       	ldd	r25, Z+3	; 0x03
    136c:	20 e0       	ldi	r18, 0x00	; 0
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	4a e7       	ldi	r20, 0x7A	; 122
    1372:	55 e4       	ldi	r21, 0x45	; 69
    1374:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1378:	dc 01       	movw	r26, r24
    137a:	cb 01       	movw	r24, r22
    137c:	f8 01       	movw	r30, r16
    137e:	80 83       	st	Z, r24
    1380:	91 83       	std	Z+1, r25	; 0x01
    1382:	a2 83       	std	Z+2, r26	; 0x02
    1384:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1386:	fe 01       	movw	r30, r28
    1388:	ef 55       	subi	r30, 0x5F	; 95
    138a:	ff 4f       	sbci	r31, 0xFF	; 255
    138c:	60 81       	ld	r22, Z
    138e:	71 81       	ldd	r23, Z+1	; 0x01
    1390:	82 81       	ldd	r24, Z+2	; 0x02
    1392:	93 81       	ldd	r25, Z+3	; 0x03
    1394:	20 e0       	ldi	r18, 0x00	; 0
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	40 e8       	ldi	r20, 0x80	; 128
    139a:	5f e3       	ldi	r21, 0x3F	; 63
    139c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13a0:	88 23       	and	r24, r24
    13a2:	44 f4       	brge	.+16     	; 0x13b4 <CLCD_voidID+0x13a>
		__ticks = 1;
    13a4:	fe 01       	movw	r30, r28
    13a6:	e1 56       	subi	r30, 0x61	; 97
    13a8:	ff 4f       	sbci	r31, 0xFF	; 255
    13aa:	81 e0       	ldi	r24, 0x01	; 1
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	91 83       	std	Z+1, r25	; 0x01
    13b0:	80 83       	st	Z, r24
    13b2:	64 c0       	rjmp	.+200    	; 0x147c <CLCD_voidID+0x202>
	else if (__tmp > 65535)
    13b4:	fe 01       	movw	r30, r28
    13b6:	ef 55       	subi	r30, 0x5F	; 95
    13b8:	ff 4f       	sbci	r31, 0xFF	; 255
    13ba:	60 81       	ld	r22, Z
    13bc:	71 81       	ldd	r23, Z+1	; 0x01
    13be:	82 81       	ldd	r24, Z+2	; 0x02
    13c0:	93 81       	ldd	r25, Z+3	; 0x03
    13c2:	20 e0       	ldi	r18, 0x00	; 0
    13c4:	3f ef       	ldi	r19, 0xFF	; 255
    13c6:	4f e7       	ldi	r20, 0x7F	; 127
    13c8:	57 e4       	ldi	r21, 0x47	; 71
    13ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13ce:	18 16       	cp	r1, r24
    13d0:	0c f0       	brlt	.+2      	; 0x13d4 <CLCD_voidID+0x15a>
    13d2:	43 c0       	rjmp	.+134    	; 0x145a <CLCD_voidID+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13d4:	fe 01       	movw	r30, r28
    13d6:	eb 55       	subi	r30, 0x5B	; 91
    13d8:	ff 4f       	sbci	r31, 0xFF	; 255
    13da:	60 81       	ld	r22, Z
    13dc:	71 81       	ldd	r23, Z+1	; 0x01
    13de:	82 81       	ldd	r24, Z+2	; 0x02
    13e0:	93 81       	ldd	r25, Z+3	; 0x03
    13e2:	20 e0       	ldi	r18, 0x00	; 0
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	40 e2       	ldi	r20, 0x20	; 32
    13e8:	51 e4       	ldi	r21, 0x41	; 65
    13ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13ee:	dc 01       	movw	r26, r24
    13f0:	cb 01       	movw	r24, r22
    13f2:	8e 01       	movw	r16, r28
    13f4:	01 56       	subi	r16, 0x61	; 97
    13f6:	1f 4f       	sbci	r17, 0xFF	; 255
    13f8:	bc 01       	movw	r22, r24
    13fa:	cd 01       	movw	r24, r26
    13fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1400:	dc 01       	movw	r26, r24
    1402:	cb 01       	movw	r24, r22
    1404:	f8 01       	movw	r30, r16
    1406:	91 83       	std	Z+1, r25	; 0x01
    1408:	80 83       	st	Z, r24
    140a:	1f c0       	rjmp	.+62     	; 0x144a <CLCD_voidID+0x1d0>
    140c:	fe 01       	movw	r30, r28
    140e:	e3 56       	subi	r30, 0x63	; 99
    1410:	ff 4f       	sbci	r31, 0xFF	; 255
    1412:	80 e9       	ldi	r24, 0x90	; 144
    1414:	91 e0       	ldi	r25, 0x01	; 1
    1416:	91 83       	std	Z+1, r25	; 0x01
    1418:	80 83       	st	Z, r24
    141a:	fe 01       	movw	r30, r28
    141c:	e3 56       	subi	r30, 0x63	; 99
    141e:	ff 4f       	sbci	r31, 0xFF	; 255
    1420:	80 81       	ld	r24, Z
    1422:	91 81       	ldd	r25, Z+1	; 0x01
    1424:	01 97       	sbiw	r24, 0x01	; 1
    1426:	f1 f7       	brne	.-4      	; 0x1424 <CLCD_voidID+0x1aa>
    1428:	fe 01       	movw	r30, r28
    142a:	e3 56       	subi	r30, 0x63	; 99
    142c:	ff 4f       	sbci	r31, 0xFF	; 255
    142e:	91 83       	std	Z+1, r25	; 0x01
    1430:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1432:	de 01       	movw	r26, r28
    1434:	a1 56       	subi	r26, 0x61	; 97
    1436:	bf 4f       	sbci	r27, 0xFF	; 255
    1438:	fe 01       	movw	r30, r28
    143a:	e1 56       	subi	r30, 0x61	; 97
    143c:	ff 4f       	sbci	r31, 0xFF	; 255
    143e:	80 81       	ld	r24, Z
    1440:	91 81       	ldd	r25, Z+1	; 0x01
    1442:	01 97       	sbiw	r24, 0x01	; 1
    1444:	11 96       	adiw	r26, 0x01	; 1
    1446:	9c 93       	st	X, r25
    1448:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    144a:	fe 01       	movw	r30, r28
    144c:	e1 56       	subi	r30, 0x61	; 97
    144e:	ff 4f       	sbci	r31, 0xFF	; 255
    1450:	80 81       	ld	r24, Z
    1452:	91 81       	ldd	r25, Z+1	; 0x01
    1454:	00 97       	sbiw	r24, 0x00	; 0
    1456:	d1 f6       	brne	.-76     	; 0x140c <CLCD_voidID+0x192>
    1458:	27 c0       	rjmp	.+78     	; 0x14a8 <CLCD_voidID+0x22e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    145a:	8e 01       	movw	r16, r28
    145c:	01 56       	subi	r16, 0x61	; 97
    145e:	1f 4f       	sbci	r17, 0xFF	; 255
    1460:	fe 01       	movw	r30, r28
    1462:	ef 55       	subi	r30, 0x5F	; 95
    1464:	ff 4f       	sbci	r31, 0xFF	; 255
    1466:	60 81       	ld	r22, Z
    1468:	71 81       	ldd	r23, Z+1	; 0x01
    146a:	82 81       	ldd	r24, Z+2	; 0x02
    146c:	93 81       	ldd	r25, Z+3	; 0x03
    146e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1472:	dc 01       	movw	r26, r24
    1474:	cb 01       	movw	r24, r22
    1476:	f8 01       	movw	r30, r16
    1478:	91 83       	std	Z+1, r25	; 0x01
    147a:	80 83       	st	Z, r24
    147c:	de 01       	movw	r26, r28
    147e:	a5 56       	subi	r26, 0x65	; 101
    1480:	bf 4f       	sbci	r27, 0xFF	; 255
    1482:	fe 01       	movw	r30, r28
    1484:	e1 56       	subi	r30, 0x61	; 97
    1486:	ff 4f       	sbci	r31, 0xFF	; 255
    1488:	80 81       	ld	r24, Z
    148a:	91 81       	ldd	r25, Z+1	; 0x01
    148c:	8d 93       	st	X+, r24
    148e:	9c 93       	st	X, r25
    1490:	fe 01       	movw	r30, r28
    1492:	e5 56       	subi	r30, 0x65	; 101
    1494:	ff 4f       	sbci	r31, 0xFF	; 255
    1496:	80 81       	ld	r24, Z
    1498:	91 81       	ldd	r25, Z+1	; 0x01
    149a:	01 97       	sbiw	r24, 0x01	; 1
    149c:	f1 f7       	brne	.-4      	; 0x149a <CLCD_voidID+0x220>
    149e:	fe 01       	movw	r30, r28
    14a0:	e5 56       	subi	r30, 0x65	; 101
    14a2:	ff 4f       	sbci	r31, 0xFF	; 255
    14a4:	91 83       	std	Z+1, r25	; 0x01
    14a6:	80 83       	st	Z, r24
			_delay_ms(250);
			CLCD_voidGoToXY(Local_u8XPos,1);
    14a8:	fe 01       	movw	r30, r28
    14aa:	e5 55       	subi	r30, 0x55	; 85
    14ac:	ff 4f       	sbci	r31, 0xFF	; 255
    14ae:	80 81       	ld	r24, Z
    14b0:	61 e0       	ldi	r22, 0x01	; 1
    14b2:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <CLCD_voidGoToXY>
			CLCD_voidSendData('*');
    14b6:	8a e2       	ldi	r24, 0x2A	; 42
    14b8:	0e 94 8f 1b 	call	0x371e	; 0x371e <CLCD_voidSendData>
			Local_u8ID[Local_u8Iterator] = '1' ;
    14bc:	fe 01       	movw	r30, r28
    14be:	e4 55       	subi	r30, 0x54	; 84
    14c0:	ff 4f       	sbci	r31, 0xFF	; 255
    14c2:	80 81       	ld	r24, Z
    14c4:	28 2f       	mov	r18, r24
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	ce 01       	movw	r24, r28
    14ca:	81 55       	subi	r24, 0x51	; 81
    14cc:	9f 4f       	sbci	r25, 0xFF	; 255
    14ce:	fc 01       	movw	r30, r24
    14d0:	e2 0f       	add	r30, r18
    14d2:	f3 1f       	adc	r31, r19
    14d4:	81 e3       	ldi	r24, 0x31	; 49
    14d6:	80 83       	st	Z, r24
			Local_u8IDCounter ++ ;
    14d8:	de 01       	movw	r26, r28
    14da:	a3 55       	subi	r26, 0x53	; 83
    14dc:	bf 4f       	sbci	r27, 0xFF	; 255
    14de:	fe 01       	movw	r30, r28
    14e0:	e3 55       	subi	r30, 0x53	; 83
    14e2:	ff 4f       	sbci	r31, 0xFF	; 255
    14e4:	80 81       	ld	r24, Z
    14e6:	8f 5f       	subi	r24, 0xFF	; 255
    14e8:	8c 93       	st	X, r24
			Local_u8Iterator  ++ ;
    14ea:	de 01       	movw	r26, r28
    14ec:	a4 55       	subi	r26, 0x54	; 84
    14ee:	bf 4f       	sbci	r27, 0xFF	; 255
    14f0:	fe 01       	movw	r30, r28
    14f2:	e4 55       	subi	r30, 0x54	; 84
    14f4:	ff 4f       	sbci	r31, 0xFF	; 255
    14f6:	80 81       	ld	r24, Z
    14f8:	8f 5f       	subi	r24, 0xFF	; 255
    14fa:	8c 93       	st	X, r24
			Local_u8XPos 	  ++ ;
    14fc:	de 01       	movw	r26, r28
    14fe:	a5 55       	subi	r26, 0x55	; 85
    1500:	bf 4f       	sbci	r27, 0xFF	; 255
    1502:	fe 01       	movw	r30, r28
    1504:	e5 55       	subi	r30, 0x55	; 85
    1506:	ff 4f       	sbci	r31, 0xFF	; 255
    1508:	80 81       	ld	r24, Z
    150a:	8f 5f       	subi	r24, 0xFF	; 255
    150c:	8c 93       	st	X, r24
    150e:	e1 c2       	rjmp	.+1474   	; 0x1ad2 <CLCD_voidID+0x858>
		}
		else if (Local_Pin3Reading == DIO_PIN_LOW)
    1510:	fe 01       	movw	r30, r28
    1512:	e4 54       	subi	r30, 0x44	; 68
    1514:	ff 4f       	sbci	r31, 0xFF	; 255
    1516:	80 81       	ld	r24, Z
    1518:	88 23       	and	r24, r24
    151a:	09 f0       	breq	.+2      	; 0x151e <CLCD_voidID+0x2a4>
    151c:	ef c0       	rjmp	.+478    	; 0x16fc <CLCD_voidID+0x482>
		{
			voidSendNumber( 2 );
    151e:	62 e0       	ldi	r22, 0x02	; 2
    1520:	70 e0       	ldi	r23, 0x00	; 0
    1522:	80 e0       	ldi	r24, 0x00	; 0
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	0e 94 82 1c 	call	0x3904	; 0x3904 <voidSendNumber>
			OpenSound();
    152a:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <OpenSound>
    152e:	fe 01       	movw	r30, r28
    1530:	e9 56       	subi	r30, 0x69	; 105
    1532:	ff 4f       	sbci	r31, 0xFF	; 255
    1534:	80 e0       	ldi	r24, 0x00	; 0
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	aa e7       	ldi	r26, 0x7A	; 122
    153a:	b3 e4       	ldi	r27, 0x43	; 67
    153c:	80 83       	st	Z, r24
    153e:	91 83       	std	Z+1, r25	; 0x01
    1540:	a2 83       	std	Z+2, r26	; 0x02
    1542:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1544:	8e 01       	movw	r16, r28
    1546:	0d 56       	subi	r16, 0x6D	; 109
    1548:	1f 4f       	sbci	r17, 0xFF	; 255
    154a:	fe 01       	movw	r30, r28
    154c:	e9 56       	subi	r30, 0x69	; 105
    154e:	ff 4f       	sbci	r31, 0xFF	; 255
    1550:	60 81       	ld	r22, Z
    1552:	71 81       	ldd	r23, Z+1	; 0x01
    1554:	82 81       	ldd	r24, Z+2	; 0x02
    1556:	93 81       	ldd	r25, Z+3	; 0x03
    1558:	20 e0       	ldi	r18, 0x00	; 0
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	4a e7       	ldi	r20, 0x7A	; 122
    155e:	55 e4       	ldi	r21, 0x45	; 69
    1560:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1564:	dc 01       	movw	r26, r24
    1566:	cb 01       	movw	r24, r22
    1568:	f8 01       	movw	r30, r16
    156a:	80 83       	st	Z, r24
    156c:	91 83       	std	Z+1, r25	; 0x01
    156e:	a2 83       	std	Z+2, r26	; 0x02
    1570:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1572:	fe 01       	movw	r30, r28
    1574:	ed 56       	subi	r30, 0x6D	; 109
    1576:	ff 4f       	sbci	r31, 0xFF	; 255
    1578:	60 81       	ld	r22, Z
    157a:	71 81       	ldd	r23, Z+1	; 0x01
    157c:	82 81       	ldd	r24, Z+2	; 0x02
    157e:	93 81       	ldd	r25, Z+3	; 0x03
    1580:	20 e0       	ldi	r18, 0x00	; 0
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	40 e8       	ldi	r20, 0x80	; 128
    1586:	5f e3       	ldi	r21, 0x3F	; 63
    1588:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    158c:	88 23       	and	r24, r24
    158e:	44 f4       	brge	.+16     	; 0x15a0 <CLCD_voidID+0x326>
		__ticks = 1;
    1590:	fe 01       	movw	r30, r28
    1592:	ef 56       	subi	r30, 0x6F	; 111
    1594:	ff 4f       	sbci	r31, 0xFF	; 255
    1596:	81 e0       	ldi	r24, 0x01	; 1
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	91 83       	std	Z+1, r25	; 0x01
    159c:	80 83       	st	Z, r24
    159e:	64 c0       	rjmp	.+200    	; 0x1668 <CLCD_voidID+0x3ee>
	else if (__tmp > 65535)
    15a0:	fe 01       	movw	r30, r28
    15a2:	ed 56       	subi	r30, 0x6D	; 109
    15a4:	ff 4f       	sbci	r31, 0xFF	; 255
    15a6:	60 81       	ld	r22, Z
    15a8:	71 81       	ldd	r23, Z+1	; 0x01
    15aa:	82 81       	ldd	r24, Z+2	; 0x02
    15ac:	93 81       	ldd	r25, Z+3	; 0x03
    15ae:	20 e0       	ldi	r18, 0x00	; 0
    15b0:	3f ef       	ldi	r19, 0xFF	; 255
    15b2:	4f e7       	ldi	r20, 0x7F	; 127
    15b4:	57 e4       	ldi	r21, 0x47	; 71
    15b6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15ba:	18 16       	cp	r1, r24
    15bc:	0c f0       	brlt	.+2      	; 0x15c0 <CLCD_voidID+0x346>
    15be:	43 c0       	rjmp	.+134    	; 0x1646 <CLCD_voidID+0x3cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15c0:	fe 01       	movw	r30, r28
    15c2:	e9 56       	subi	r30, 0x69	; 105
    15c4:	ff 4f       	sbci	r31, 0xFF	; 255
    15c6:	60 81       	ld	r22, Z
    15c8:	71 81       	ldd	r23, Z+1	; 0x01
    15ca:	82 81       	ldd	r24, Z+2	; 0x02
    15cc:	93 81       	ldd	r25, Z+3	; 0x03
    15ce:	20 e0       	ldi	r18, 0x00	; 0
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	40 e2       	ldi	r20, 0x20	; 32
    15d4:	51 e4       	ldi	r21, 0x41	; 65
    15d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15da:	dc 01       	movw	r26, r24
    15dc:	cb 01       	movw	r24, r22
    15de:	8e 01       	movw	r16, r28
    15e0:	0f 56       	subi	r16, 0x6F	; 111
    15e2:	1f 4f       	sbci	r17, 0xFF	; 255
    15e4:	bc 01       	movw	r22, r24
    15e6:	cd 01       	movw	r24, r26
    15e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15ec:	dc 01       	movw	r26, r24
    15ee:	cb 01       	movw	r24, r22
    15f0:	f8 01       	movw	r30, r16
    15f2:	91 83       	std	Z+1, r25	; 0x01
    15f4:	80 83       	st	Z, r24
    15f6:	1f c0       	rjmp	.+62     	; 0x1636 <CLCD_voidID+0x3bc>
    15f8:	fe 01       	movw	r30, r28
    15fa:	e1 57       	subi	r30, 0x71	; 113
    15fc:	ff 4f       	sbci	r31, 0xFF	; 255
    15fe:	80 e9       	ldi	r24, 0x90	; 144
    1600:	91 e0       	ldi	r25, 0x01	; 1
    1602:	91 83       	std	Z+1, r25	; 0x01
    1604:	80 83       	st	Z, r24
    1606:	fe 01       	movw	r30, r28
    1608:	e1 57       	subi	r30, 0x71	; 113
    160a:	ff 4f       	sbci	r31, 0xFF	; 255
    160c:	80 81       	ld	r24, Z
    160e:	91 81       	ldd	r25, Z+1	; 0x01
    1610:	01 97       	sbiw	r24, 0x01	; 1
    1612:	f1 f7       	brne	.-4      	; 0x1610 <CLCD_voidID+0x396>
    1614:	fe 01       	movw	r30, r28
    1616:	e1 57       	subi	r30, 0x71	; 113
    1618:	ff 4f       	sbci	r31, 0xFF	; 255
    161a:	91 83       	std	Z+1, r25	; 0x01
    161c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    161e:	de 01       	movw	r26, r28
    1620:	af 56       	subi	r26, 0x6F	; 111
    1622:	bf 4f       	sbci	r27, 0xFF	; 255
    1624:	fe 01       	movw	r30, r28
    1626:	ef 56       	subi	r30, 0x6F	; 111
    1628:	ff 4f       	sbci	r31, 0xFF	; 255
    162a:	80 81       	ld	r24, Z
    162c:	91 81       	ldd	r25, Z+1	; 0x01
    162e:	01 97       	sbiw	r24, 0x01	; 1
    1630:	11 96       	adiw	r26, 0x01	; 1
    1632:	9c 93       	st	X, r25
    1634:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1636:	fe 01       	movw	r30, r28
    1638:	ef 56       	subi	r30, 0x6F	; 111
    163a:	ff 4f       	sbci	r31, 0xFF	; 255
    163c:	80 81       	ld	r24, Z
    163e:	91 81       	ldd	r25, Z+1	; 0x01
    1640:	00 97       	sbiw	r24, 0x00	; 0
    1642:	d1 f6       	brne	.-76     	; 0x15f8 <CLCD_voidID+0x37e>
    1644:	27 c0       	rjmp	.+78     	; 0x1694 <CLCD_voidID+0x41a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1646:	8e 01       	movw	r16, r28
    1648:	0f 56       	subi	r16, 0x6F	; 111
    164a:	1f 4f       	sbci	r17, 0xFF	; 255
    164c:	fe 01       	movw	r30, r28
    164e:	ed 56       	subi	r30, 0x6D	; 109
    1650:	ff 4f       	sbci	r31, 0xFF	; 255
    1652:	60 81       	ld	r22, Z
    1654:	71 81       	ldd	r23, Z+1	; 0x01
    1656:	82 81       	ldd	r24, Z+2	; 0x02
    1658:	93 81       	ldd	r25, Z+3	; 0x03
    165a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    165e:	dc 01       	movw	r26, r24
    1660:	cb 01       	movw	r24, r22
    1662:	f8 01       	movw	r30, r16
    1664:	91 83       	std	Z+1, r25	; 0x01
    1666:	80 83       	st	Z, r24
    1668:	de 01       	movw	r26, r28
    166a:	a3 57       	subi	r26, 0x73	; 115
    166c:	bf 4f       	sbci	r27, 0xFF	; 255
    166e:	fe 01       	movw	r30, r28
    1670:	ef 56       	subi	r30, 0x6F	; 111
    1672:	ff 4f       	sbci	r31, 0xFF	; 255
    1674:	80 81       	ld	r24, Z
    1676:	91 81       	ldd	r25, Z+1	; 0x01
    1678:	8d 93       	st	X+, r24
    167a:	9c 93       	st	X, r25
    167c:	fe 01       	movw	r30, r28
    167e:	e3 57       	subi	r30, 0x73	; 115
    1680:	ff 4f       	sbci	r31, 0xFF	; 255
    1682:	80 81       	ld	r24, Z
    1684:	91 81       	ldd	r25, Z+1	; 0x01
    1686:	01 97       	sbiw	r24, 0x01	; 1
    1688:	f1 f7       	brne	.-4      	; 0x1686 <CLCD_voidID+0x40c>
    168a:	fe 01       	movw	r30, r28
    168c:	e3 57       	subi	r30, 0x73	; 115
    168e:	ff 4f       	sbci	r31, 0xFF	; 255
    1690:	91 83       	std	Z+1, r25	; 0x01
    1692:	80 83       	st	Z, r24
			_delay_ms(250);
			CLCD_voidGoToXY(Local_u8XPos,1);
    1694:	fe 01       	movw	r30, r28
    1696:	e5 55       	subi	r30, 0x55	; 85
    1698:	ff 4f       	sbci	r31, 0xFF	; 255
    169a:	80 81       	ld	r24, Z
    169c:	61 e0       	ldi	r22, 0x01	; 1
    169e:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <CLCD_voidGoToXY>
			CLCD_voidSendData('*');
    16a2:	8a e2       	ldi	r24, 0x2A	; 42
    16a4:	0e 94 8f 1b 	call	0x371e	; 0x371e <CLCD_voidSendData>
			Local_u8ID[Local_u8Iterator] = '2' ;
    16a8:	fe 01       	movw	r30, r28
    16aa:	e4 55       	subi	r30, 0x54	; 84
    16ac:	ff 4f       	sbci	r31, 0xFF	; 255
    16ae:	80 81       	ld	r24, Z
    16b0:	28 2f       	mov	r18, r24
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	ce 01       	movw	r24, r28
    16b6:	81 55       	subi	r24, 0x51	; 81
    16b8:	9f 4f       	sbci	r25, 0xFF	; 255
    16ba:	fc 01       	movw	r30, r24
    16bc:	e2 0f       	add	r30, r18
    16be:	f3 1f       	adc	r31, r19
    16c0:	82 e3       	ldi	r24, 0x32	; 50
    16c2:	80 83       	st	Z, r24
			Local_u8IDCounter ++ ;
    16c4:	de 01       	movw	r26, r28
    16c6:	a3 55       	subi	r26, 0x53	; 83
    16c8:	bf 4f       	sbci	r27, 0xFF	; 255
    16ca:	fe 01       	movw	r30, r28
    16cc:	e3 55       	subi	r30, 0x53	; 83
    16ce:	ff 4f       	sbci	r31, 0xFF	; 255
    16d0:	80 81       	ld	r24, Z
    16d2:	8f 5f       	subi	r24, 0xFF	; 255
    16d4:	8c 93       	st	X, r24
			Local_u8Iterator  ++ ;
    16d6:	de 01       	movw	r26, r28
    16d8:	a4 55       	subi	r26, 0x54	; 84
    16da:	bf 4f       	sbci	r27, 0xFF	; 255
    16dc:	fe 01       	movw	r30, r28
    16de:	e4 55       	subi	r30, 0x54	; 84
    16e0:	ff 4f       	sbci	r31, 0xFF	; 255
    16e2:	80 81       	ld	r24, Z
    16e4:	8f 5f       	subi	r24, 0xFF	; 255
    16e6:	8c 93       	st	X, r24
			Local_u8XPos 	  ++ ;
    16e8:	de 01       	movw	r26, r28
    16ea:	a5 55       	subi	r26, 0x55	; 85
    16ec:	bf 4f       	sbci	r27, 0xFF	; 255
    16ee:	fe 01       	movw	r30, r28
    16f0:	e5 55       	subi	r30, 0x55	; 85
    16f2:	ff 4f       	sbci	r31, 0xFF	; 255
    16f4:	80 81       	ld	r24, Z
    16f6:	8f 5f       	subi	r24, 0xFF	; 255
    16f8:	8c 93       	st	X, r24
    16fa:	eb c1       	rjmp	.+982    	; 0x1ad2 <CLCD_voidID+0x858>
		}
		else if (Local_Pin4Reading == DIO_PIN_LOW)
    16fc:	fe 01       	movw	r30, r28
    16fe:	e3 54       	subi	r30, 0x43	; 67
    1700:	ff 4f       	sbci	r31, 0xFF	; 255
    1702:	80 81       	ld	r24, Z
    1704:	88 23       	and	r24, r24
    1706:	09 f0       	breq	.+2      	; 0x170a <CLCD_voidID+0x490>
    1708:	ef c0       	rjmp	.+478    	; 0x18e8 <CLCD_voidID+0x66e>
		{
			voidSendNumber( 3 );
    170a:	63 e0       	ldi	r22, 0x03	; 3
    170c:	70 e0       	ldi	r23, 0x00	; 0
    170e:	80 e0       	ldi	r24, 0x00	; 0
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	0e 94 82 1c 	call	0x3904	; 0x3904 <voidSendNumber>
			OpenSound();
    1716:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <OpenSound>
    171a:	fe 01       	movw	r30, r28
    171c:	e7 57       	subi	r30, 0x77	; 119
    171e:	ff 4f       	sbci	r31, 0xFF	; 255
    1720:	80 e0       	ldi	r24, 0x00	; 0
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	aa e7       	ldi	r26, 0x7A	; 122
    1726:	b3 e4       	ldi	r27, 0x43	; 67
    1728:	80 83       	st	Z, r24
    172a:	91 83       	std	Z+1, r25	; 0x01
    172c:	a2 83       	std	Z+2, r26	; 0x02
    172e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1730:	8e 01       	movw	r16, r28
    1732:	0b 57       	subi	r16, 0x7B	; 123
    1734:	1f 4f       	sbci	r17, 0xFF	; 255
    1736:	fe 01       	movw	r30, r28
    1738:	e7 57       	subi	r30, 0x77	; 119
    173a:	ff 4f       	sbci	r31, 0xFF	; 255
    173c:	60 81       	ld	r22, Z
    173e:	71 81       	ldd	r23, Z+1	; 0x01
    1740:	82 81       	ldd	r24, Z+2	; 0x02
    1742:	93 81       	ldd	r25, Z+3	; 0x03
    1744:	20 e0       	ldi	r18, 0x00	; 0
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	4a e7       	ldi	r20, 0x7A	; 122
    174a:	55 e4       	ldi	r21, 0x45	; 69
    174c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1750:	dc 01       	movw	r26, r24
    1752:	cb 01       	movw	r24, r22
    1754:	f8 01       	movw	r30, r16
    1756:	80 83       	st	Z, r24
    1758:	91 83       	std	Z+1, r25	; 0x01
    175a:	a2 83       	std	Z+2, r26	; 0x02
    175c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    175e:	fe 01       	movw	r30, r28
    1760:	eb 57       	subi	r30, 0x7B	; 123
    1762:	ff 4f       	sbci	r31, 0xFF	; 255
    1764:	60 81       	ld	r22, Z
    1766:	71 81       	ldd	r23, Z+1	; 0x01
    1768:	82 81       	ldd	r24, Z+2	; 0x02
    176a:	93 81       	ldd	r25, Z+3	; 0x03
    176c:	20 e0       	ldi	r18, 0x00	; 0
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	40 e8       	ldi	r20, 0x80	; 128
    1772:	5f e3       	ldi	r21, 0x3F	; 63
    1774:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1778:	88 23       	and	r24, r24
    177a:	44 f4       	brge	.+16     	; 0x178c <CLCD_voidID+0x512>
		__ticks = 1;
    177c:	fe 01       	movw	r30, r28
    177e:	ed 57       	subi	r30, 0x7D	; 125
    1780:	ff 4f       	sbci	r31, 0xFF	; 255
    1782:	81 e0       	ldi	r24, 0x01	; 1
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	91 83       	std	Z+1, r25	; 0x01
    1788:	80 83       	st	Z, r24
    178a:	64 c0       	rjmp	.+200    	; 0x1854 <CLCD_voidID+0x5da>
	else if (__tmp > 65535)
    178c:	fe 01       	movw	r30, r28
    178e:	eb 57       	subi	r30, 0x7B	; 123
    1790:	ff 4f       	sbci	r31, 0xFF	; 255
    1792:	60 81       	ld	r22, Z
    1794:	71 81       	ldd	r23, Z+1	; 0x01
    1796:	82 81       	ldd	r24, Z+2	; 0x02
    1798:	93 81       	ldd	r25, Z+3	; 0x03
    179a:	20 e0       	ldi	r18, 0x00	; 0
    179c:	3f ef       	ldi	r19, 0xFF	; 255
    179e:	4f e7       	ldi	r20, 0x7F	; 127
    17a0:	57 e4       	ldi	r21, 0x47	; 71
    17a2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17a6:	18 16       	cp	r1, r24
    17a8:	0c f0       	brlt	.+2      	; 0x17ac <CLCD_voidID+0x532>
    17aa:	43 c0       	rjmp	.+134    	; 0x1832 <CLCD_voidID+0x5b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17ac:	fe 01       	movw	r30, r28
    17ae:	e7 57       	subi	r30, 0x77	; 119
    17b0:	ff 4f       	sbci	r31, 0xFF	; 255
    17b2:	60 81       	ld	r22, Z
    17b4:	71 81       	ldd	r23, Z+1	; 0x01
    17b6:	82 81       	ldd	r24, Z+2	; 0x02
    17b8:	93 81       	ldd	r25, Z+3	; 0x03
    17ba:	20 e0       	ldi	r18, 0x00	; 0
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	40 e2       	ldi	r20, 0x20	; 32
    17c0:	51 e4       	ldi	r21, 0x41	; 65
    17c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17c6:	dc 01       	movw	r26, r24
    17c8:	cb 01       	movw	r24, r22
    17ca:	8e 01       	movw	r16, r28
    17cc:	0d 57       	subi	r16, 0x7D	; 125
    17ce:	1f 4f       	sbci	r17, 0xFF	; 255
    17d0:	bc 01       	movw	r22, r24
    17d2:	cd 01       	movw	r24, r26
    17d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17d8:	dc 01       	movw	r26, r24
    17da:	cb 01       	movw	r24, r22
    17dc:	f8 01       	movw	r30, r16
    17de:	91 83       	std	Z+1, r25	; 0x01
    17e0:	80 83       	st	Z, r24
    17e2:	1f c0       	rjmp	.+62     	; 0x1822 <CLCD_voidID+0x5a8>
    17e4:	fe 01       	movw	r30, r28
    17e6:	ef 57       	subi	r30, 0x7F	; 127
    17e8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ea:	80 e9       	ldi	r24, 0x90	; 144
    17ec:	91 e0       	ldi	r25, 0x01	; 1
    17ee:	91 83       	std	Z+1, r25	; 0x01
    17f0:	80 83       	st	Z, r24
    17f2:	fe 01       	movw	r30, r28
    17f4:	ef 57       	subi	r30, 0x7F	; 127
    17f6:	ff 4f       	sbci	r31, 0xFF	; 255
    17f8:	80 81       	ld	r24, Z
    17fa:	91 81       	ldd	r25, Z+1	; 0x01
    17fc:	01 97       	sbiw	r24, 0x01	; 1
    17fe:	f1 f7       	brne	.-4      	; 0x17fc <CLCD_voidID+0x582>
    1800:	fe 01       	movw	r30, r28
    1802:	ef 57       	subi	r30, 0x7F	; 127
    1804:	ff 4f       	sbci	r31, 0xFF	; 255
    1806:	91 83       	std	Z+1, r25	; 0x01
    1808:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    180a:	de 01       	movw	r26, r28
    180c:	ad 57       	subi	r26, 0x7D	; 125
    180e:	bf 4f       	sbci	r27, 0xFF	; 255
    1810:	fe 01       	movw	r30, r28
    1812:	ed 57       	subi	r30, 0x7D	; 125
    1814:	ff 4f       	sbci	r31, 0xFF	; 255
    1816:	80 81       	ld	r24, Z
    1818:	91 81       	ldd	r25, Z+1	; 0x01
    181a:	01 97       	sbiw	r24, 0x01	; 1
    181c:	11 96       	adiw	r26, 0x01	; 1
    181e:	9c 93       	st	X, r25
    1820:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1822:	fe 01       	movw	r30, r28
    1824:	ed 57       	subi	r30, 0x7D	; 125
    1826:	ff 4f       	sbci	r31, 0xFF	; 255
    1828:	80 81       	ld	r24, Z
    182a:	91 81       	ldd	r25, Z+1	; 0x01
    182c:	00 97       	sbiw	r24, 0x00	; 0
    182e:	d1 f6       	brne	.-76     	; 0x17e4 <CLCD_voidID+0x56a>
    1830:	27 c0       	rjmp	.+78     	; 0x1880 <CLCD_voidID+0x606>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1832:	8e 01       	movw	r16, r28
    1834:	0d 57       	subi	r16, 0x7D	; 125
    1836:	1f 4f       	sbci	r17, 0xFF	; 255
    1838:	fe 01       	movw	r30, r28
    183a:	eb 57       	subi	r30, 0x7B	; 123
    183c:	ff 4f       	sbci	r31, 0xFF	; 255
    183e:	60 81       	ld	r22, Z
    1840:	71 81       	ldd	r23, Z+1	; 0x01
    1842:	82 81       	ldd	r24, Z+2	; 0x02
    1844:	93 81       	ldd	r25, Z+3	; 0x03
    1846:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    184a:	dc 01       	movw	r26, r24
    184c:	cb 01       	movw	r24, r22
    184e:	f8 01       	movw	r30, r16
    1850:	91 83       	std	Z+1, r25	; 0x01
    1852:	80 83       	st	Z, r24
    1854:	de 01       	movw	r26, r28
    1856:	a1 58       	subi	r26, 0x81	; 129
    1858:	bf 4f       	sbci	r27, 0xFF	; 255
    185a:	fe 01       	movw	r30, r28
    185c:	ed 57       	subi	r30, 0x7D	; 125
    185e:	ff 4f       	sbci	r31, 0xFF	; 255
    1860:	80 81       	ld	r24, Z
    1862:	91 81       	ldd	r25, Z+1	; 0x01
    1864:	8d 93       	st	X+, r24
    1866:	9c 93       	st	X, r25
    1868:	fe 01       	movw	r30, r28
    186a:	e1 58       	subi	r30, 0x81	; 129
    186c:	ff 4f       	sbci	r31, 0xFF	; 255
    186e:	80 81       	ld	r24, Z
    1870:	91 81       	ldd	r25, Z+1	; 0x01
    1872:	01 97       	sbiw	r24, 0x01	; 1
    1874:	f1 f7       	brne	.-4      	; 0x1872 <CLCD_voidID+0x5f8>
    1876:	fe 01       	movw	r30, r28
    1878:	e1 58       	subi	r30, 0x81	; 129
    187a:	ff 4f       	sbci	r31, 0xFF	; 255
    187c:	91 83       	std	Z+1, r25	; 0x01
    187e:	80 83       	st	Z, r24
			_delay_ms(250);
			CLCD_voidGoToXY(Local_u8XPos,1);
    1880:	fe 01       	movw	r30, r28
    1882:	e5 55       	subi	r30, 0x55	; 85
    1884:	ff 4f       	sbci	r31, 0xFF	; 255
    1886:	80 81       	ld	r24, Z
    1888:	61 e0       	ldi	r22, 0x01	; 1
    188a:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <CLCD_voidGoToXY>
			CLCD_voidSendData('*');
    188e:	8a e2       	ldi	r24, 0x2A	; 42
    1890:	0e 94 8f 1b 	call	0x371e	; 0x371e <CLCD_voidSendData>
			Local_u8ID[Local_u8Iterator] = '3' ;
    1894:	fe 01       	movw	r30, r28
    1896:	e4 55       	subi	r30, 0x54	; 84
    1898:	ff 4f       	sbci	r31, 0xFF	; 255
    189a:	80 81       	ld	r24, Z
    189c:	28 2f       	mov	r18, r24
    189e:	30 e0       	ldi	r19, 0x00	; 0
    18a0:	ce 01       	movw	r24, r28
    18a2:	81 55       	subi	r24, 0x51	; 81
    18a4:	9f 4f       	sbci	r25, 0xFF	; 255
    18a6:	fc 01       	movw	r30, r24
    18a8:	e2 0f       	add	r30, r18
    18aa:	f3 1f       	adc	r31, r19
    18ac:	83 e3       	ldi	r24, 0x33	; 51
    18ae:	80 83       	st	Z, r24
			Local_u8IDCounter ++ ;
    18b0:	de 01       	movw	r26, r28
    18b2:	a3 55       	subi	r26, 0x53	; 83
    18b4:	bf 4f       	sbci	r27, 0xFF	; 255
    18b6:	fe 01       	movw	r30, r28
    18b8:	e3 55       	subi	r30, 0x53	; 83
    18ba:	ff 4f       	sbci	r31, 0xFF	; 255
    18bc:	80 81       	ld	r24, Z
    18be:	8f 5f       	subi	r24, 0xFF	; 255
    18c0:	8c 93       	st	X, r24
			Local_u8Iterator  ++ ;
    18c2:	de 01       	movw	r26, r28
    18c4:	a4 55       	subi	r26, 0x54	; 84
    18c6:	bf 4f       	sbci	r27, 0xFF	; 255
    18c8:	fe 01       	movw	r30, r28
    18ca:	e4 55       	subi	r30, 0x54	; 84
    18cc:	ff 4f       	sbci	r31, 0xFF	; 255
    18ce:	80 81       	ld	r24, Z
    18d0:	8f 5f       	subi	r24, 0xFF	; 255
    18d2:	8c 93       	st	X, r24
			Local_u8XPos 	  ++ ;
    18d4:	de 01       	movw	r26, r28
    18d6:	a5 55       	subi	r26, 0x55	; 85
    18d8:	bf 4f       	sbci	r27, 0xFF	; 255
    18da:	fe 01       	movw	r30, r28
    18dc:	e5 55       	subi	r30, 0x55	; 85
    18de:	ff 4f       	sbci	r31, 0xFF	; 255
    18e0:	80 81       	ld	r24, Z
    18e2:	8f 5f       	subi	r24, 0xFF	; 255
    18e4:	8c 93       	st	X, r24
    18e6:	f5 c0       	rjmp	.+490    	; 0x1ad2 <CLCD_voidID+0x858>
		}
		else if (Local_Pin5Reading == DIO_PIN_LOW)
    18e8:	fe 01       	movw	r30, r28
    18ea:	e2 54       	subi	r30, 0x42	; 66
    18ec:	ff 4f       	sbci	r31, 0xFF	; 255
    18ee:	80 81       	ld	r24, Z
    18f0:	88 23       	and	r24, r24
    18f2:	09 f0       	breq	.+2      	; 0x18f6 <CLCD_voidID+0x67c>
    18f4:	ee c0       	rjmp	.+476    	; 0x1ad2 <CLCD_voidID+0x858>
		{
			voidSendNumber( 4 );
    18f6:	64 e0       	ldi	r22, 0x04	; 4
    18f8:	70 e0       	ldi	r23, 0x00	; 0
    18fa:	80 e0       	ldi	r24, 0x00	; 0
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	0e 94 82 1c 	call	0x3904	; 0x3904 <voidSendNumber>
			OpenSound();
    1902:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <OpenSound>
    1906:	fe 01       	movw	r30, r28
    1908:	e5 58       	subi	r30, 0x85	; 133
    190a:	ff 4f       	sbci	r31, 0xFF	; 255
    190c:	80 e0       	ldi	r24, 0x00	; 0
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	aa e7       	ldi	r26, 0x7A	; 122
    1912:	b3 e4       	ldi	r27, 0x43	; 67
    1914:	80 83       	st	Z, r24
    1916:	91 83       	std	Z+1, r25	; 0x01
    1918:	a2 83       	std	Z+2, r26	; 0x02
    191a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    191c:	8e 01       	movw	r16, r28
    191e:	09 58       	subi	r16, 0x89	; 137
    1920:	1f 4f       	sbci	r17, 0xFF	; 255
    1922:	fe 01       	movw	r30, r28
    1924:	e5 58       	subi	r30, 0x85	; 133
    1926:	ff 4f       	sbci	r31, 0xFF	; 255
    1928:	60 81       	ld	r22, Z
    192a:	71 81       	ldd	r23, Z+1	; 0x01
    192c:	82 81       	ldd	r24, Z+2	; 0x02
    192e:	93 81       	ldd	r25, Z+3	; 0x03
    1930:	20 e0       	ldi	r18, 0x00	; 0
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	4a e7       	ldi	r20, 0x7A	; 122
    1936:	55 e4       	ldi	r21, 0x45	; 69
    1938:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    193c:	dc 01       	movw	r26, r24
    193e:	cb 01       	movw	r24, r22
    1940:	f8 01       	movw	r30, r16
    1942:	80 83       	st	Z, r24
    1944:	91 83       	std	Z+1, r25	; 0x01
    1946:	a2 83       	std	Z+2, r26	; 0x02
    1948:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    194a:	fe 01       	movw	r30, r28
    194c:	e9 58       	subi	r30, 0x89	; 137
    194e:	ff 4f       	sbci	r31, 0xFF	; 255
    1950:	60 81       	ld	r22, Z
    1952:	71 81       	ldd	r23, Z+1	; 0x01
    1954:	82 81       	ldd	r24, Z+2	; 0x02
    1956:	93 81       	ldd	r25, Z+3	; 0x03
    1958:	20 e0       	ldi	r18, 0x00	; 0
    195a:	30 e0       	ldi	r19, 0x00	; 0
    195c:	40 e8       	ldi	r20, 0x80	; 128
    195e:	5f e3       	ldi	r21, 0x3F	; 63
    1960:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1964:	88 23       	and	r24, r24
    1966:	44 f4       	brge	.+16     	; 0x1978 <CLCD_voidID+0x6fe>
		__ticks = 1;
    1968:	fe 01       	movw	r30, r28
    196a:	eb 58       	subi	r30, 0x8B	; 139
    196c:	ff 4f       	sbci	r31, 0xFF	; 255
    196e:	81 e0       	ldi	r24, 0x01	; 1
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	91 83       	std	Z+1, r25	; 0x01
    1974:	80 83       	st	Z, r24
    1976:	64 c0       	rjmp	.+200    	; 0x1a40 <CLCD_voidID+0x7c6>
	else if (__tmp > 65535)
    1978:	fe 01       	movw	r30, r28
    197a:	e9 58       	subi	r30, 0x89	; 137
    197c:	ff 4f       	sbci	r31, 0xFF	; 255
    197e:	60 81       	ld	r22, Z
    1980:	71 81       	ldd	r23, Z+1	; 0x01
    1982:	82 81       	ldd	r24, Z+2	; 0x02
    1984:	93 81       	ldd	r25, Z+3	; 0x03
    1986:	20 e0       	ldi	r18, 0x00	; 0
    1988:	3f ef       	ldi	r19, 0xFF	; 255
    198a:	4f e7       	ldi	r20, 0x7F	; 127
    198c:	57 e4       	ldi	r21, 0x47	; 71
    198e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1992:	18 16       	cp	r1, r24
    1994:	0c f0       	brlt	.+2      	; 0x1998 <CLCD_voidID+0x71e>
    1996:	43 c0       	rjmp	.+134    	; 0x1a1e <CLCD_voidID+0x7a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1998:	fe 01       	movw	r30, r28
    199a:	e5 58       	subi	r30, 0x85	; 133
    199c:	ff 4f       	sbci	r31, 0xFF	; 255
    199e:	60 81       	ld	r22, Z
    19a0:	71 81       	ldd	r23, Z+1	; 0x01
    19a2:	82 81       	ldd	r24, Z+2	; 0x02
    19a4:	93 81       	ldd	r25, Z+3	; 0x03
    19a6:	20 e0       	ldi	r18, 0x00	; 0
    19a8:	30 e0       	ldi	r19, 0x00	; 0
    19aa:	40 e2       	ldi	r20, 0x20	; 32
    19ac:	51 e4       	ldi	r21, 0x41	; 65
    19ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19b2:	dc 01       	movw	r26, r24
    19b4:	cb 01       	movw	r24, r22
    19b6:	8e 01       	movw	r16, r28
    19b8:	0b 58       	subi	r16, 0x8B	; 139
    19ba:	1f 4f       	sbci	r17, 0xFF	; 255
    19bc:	bc 01       	movw	r22, r24
    19be:	cd 01       	movw	r24, r26
    19c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19c4:	dc 01       	movw	r26, r24
    19c6:	cb 01       	movw	r24, r22
    19c8:	f8 01       	movw	r30, r16
    19ca:	91 83       	std	Z+1, r25	; 0x01
    19cc:	80 83       	st	Z, r24
    19ce:	1f c0       	rjmp	.+62     	; 0x1a0e <CLCD_voidID+0x794>
    19d0:	fe 01       	movw	r30, r28
    19d2:	ed 58       	subi	r30, 0x8D	; 141
    19d4:	ff 4f       	sbci	r31, 0xFF	; 255
    19d6:	80 e9       	ldi	r24, 0x90	; 144
    19d8:	91 e0       	ldi	r25, 0x01	; 1
    19da:	91 83       	std	Z+1, r25	; 0x01
    19dc:	80 83       	st	Z, r24
    19de:	fe 01       	movw	r30, r28
    19e0:	ed 58       	subi	r30, 0x8D	; 141
    19e2:	ff 4f       	sbci	r31, 0xFF	; 255
    19e4:	80 81       	ld	r24, Z
    19e6:	91 81       	ldd	r25, Z+1	; 0x01
    19e8:	01 97       	sbiw	r24, 0x01	; 1
    19ea:	f1 f7       	brne	.-4      	; 0x19e8 <CLCD_voidID+0x76e>
    19ec:	fe 01       	movw	r30, r28
    19ee:	ed 58       	subi	r30, 0x8D	; 141
    19f0:	ff 4f       	sbci	r31, 0xFF	; 255
    19f2:	91 83       	std	Z+1, r25	; 0x01
    19f4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19f6:	de 01       	movw	r26, r28
    19f8:	ab 58       	subi	r26, 0x8B	; 139
    19fa:	bf 4f       	sbci	r27, 0xFF	; 255
    19fc:	fe 01       	movw	r30, r28
    19fe:	eb 58       	subi	r30, 0x8B	; 139
    1a00:	ff 4f       	sbci	r31, 0xFF	; 255
    1a02:	80 81       	ld	r24, Z
    1a04:	91 81       	ldd	r25, Z+1	; 0x01
    1a06:	01 97       	sbiw	r24, 0x01	; 1
    1a08:	11 96       	adiw	r26, 0x01	; 1
    1a0a:	9c 93       	st	X, r25
    1a0c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a0e:	fe 01       	movw	r30, r28
    1a10:	eb 58       	subi	r30, 0x8B	; 139
    1a12:	ff 4f       	sbci	r31, 0xFF	; 255
    1a14:	80 81       	ld	r24, Z
    1a16:	91 81       	ldd	r25, Z+1	; 0x01
    1a18:	00 97       	sbiw	r24, 0x00	; 0
    1a1a:	d1 f6       	brne	.-76     	; 0x19d0 <CLCD_voidID+0x756>
    1a1c:	27 c0       	rjmp	.+78     	; 0x1a6c <CLCD_voidID+0x7f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a1e:	8e 01       	movw	r16, r28
    1a20:	0b 58       	subi	r16, 0x8B	; 139
    1a22:	1f 4f       	sbci	r17, 0xFF	; 255
    1a24:	fe 01       	movw	r30, r28
    1a26:	e9 58       	subi	r30, 0x89	; 137
    1a28:	ff 4f       	sbci	r31, 0xFF	; 255
    1a2a:	60 81       	ld	r22, Z
    1a2c:	71 81       	ldd	r23, Z+1	; 0x01
    1a2e:	82 81       	ldd	r24, Z+2	; 0x02
    1a30:	93 81       	ldd	r25, Z+3	; 0x03
    1a32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a36:	dc 01       	movw	r26, r24
    1a38:	cb 01       	movw	r24, r22
    1a3a:	f8 01       	movw	r30, r16
    1a3c:	91 83       	std	Z+1, r25	; 0x01
    1a3e:	80 83       	st	Z, r24
    1a40:	de 01       	movw	r26, r28
    1a42:	af 58       	subi	r26, 0x8F	; 143
    1a44:	bf 4f       	sbci	r27, 0xFF	; 255
    1a46:	fe 01       	movw	r30, r28
    1a48:	eb 58       	subi	r30, 0x8B	; 139
    1a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4c:	80 81       	ld	r24, Z
    1a4e:	91 81       	ldd	r25, Z+1	; 0x01
    1a50:	8d 93       	st	X+, r24
    1a52:	9c 93       	st	X, r25
    1a54:	fe 01       	movw	r30, r28
    1a56:	ef 58       	subi	r30, 0x8F	; 143
    1a58:	ff 4f       	sbci	r31, 0xFF	; 255
    1a5a:	80 81       	ld	r24, Z
    1a5c:	91 81       	ldd	r25, Z+1	; 0x01
    1a5e:	01 97       	sbiw	r24, 0x01	; 1
    1a60:	f1 f7       	brne	.-4      	; 0x1a5e <CLCD_voidID+0x7e4>
    1a62:	fe 01       	movw	r30, r28
    1a64:	ef 58       	subi	r30, 0x8F	; 143
    1a66:	ff 4f       	sbci	r31, 0xFF	; 255
    1a68:	91 83       	std	Z+1, r25	; 0x01
    1a6a:	80 83       	st	Z, r24
			_delay_ms(250);
			CLCD_voidGoToXY(Local_u8XPos,1);
    1a6c:	fe 01       	movw	r30, r28
    1a6e:	e5 55       	subi	r30, 0x55	; 85
    1a70:	ff 4f       	sbci	r31, 0xFF	; 255
    1a72:	80 81       	ld	r24, Z
    1a74:	61 e0       	ldi	r22, 0x01	; 1
    1a76:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <CLCD_voidGoToXY>
			CLCD_voidSendData('*');
    1a7a:	8a e2       	ldi	r24, 0x2A	; 42
    1a7c:	0e 94 8f 1b 	call	0x371e	; 0x371e <CLCD_voidSendData>
			Local_u8ID[Local_u8Iterator] = '4' ;
    1a80:	fe 01       	movw	r30, r28
    1a82:	e4 55       	subi	r30, 0x54	; 84
    1a84:	ff 4f       	sbci	r31, 0xFF	; 255
    1a86:	80 81       	ld	r24, Z
    1a88:	28 2f       	mov	r18, r24
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	ce 01       	movw	r24, r28
    1a8e:	81 55       	subi	r24, 0x51	; 81
    1a90:	9f 4f       	sbci	r25, 0xFF	; 255
    1a92:	fc 01       	movw	r30, r24
    1a94:	e2 0f       	add	r30, r18
    1a96:	f3 1f       	adc	r31, r19
    1a98:	84 e3       	ldi	r24, 0x34	; 52
    1a9a:	80 83       	st	Z, r24
			Local_u8IDCounter ++ ;
    1a9c:	de 01       	movw	r26, r28
    1a9e:	a3 55       	subi	r26, 0x53	; 83
    1aa0:	bf 4f       	sbci	r27, 0xFF	; 255
    1aa2:	fe 01       	movw	r30, r28
    1aa4:	e3 55       	subi	r30, 0x53	; 83
    1aa6:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa8:	80 81       	ld	r24, Z
    1aaa:	8f 5f       	subi	r24, 0xFF	; 255
    1aac:	8c 93       	st	X, r24
			Local_u8Iterator  ++ ;
    1aae:	de 01       	movw	r26, r28
    1ab0:	a4 55       	subi	r26, 0x54	; 84
    1ab2:	bf 4f       	sbci	r27, 0xFF	; 255
    1ab4:	fe 01       	movw	r30, r28
    1ab6:	e4 55       	subi	r30, 0x54	; 84
    1ab8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aba:	80 81       	ld	r24, Z
    1abc:	8f 5f       	subi	r24, 0xFF	; 255
    1abe:	8c 93       	st	X, r24
			Local_u8XPos 	  ++ ;
    1ac0:	de 01       	movw	r26, r28
    1ac2:	a5 55       	subi	r26, 0x55	; 85
    1ac4:	bf 4f       	sbci	r27, 0xFF	; 255
    1ac6:	fe 01       	movw	r30, r28
    1ac8:	e5 55       	subi	r30, 0x55	; 85
    1aca:	ff 4f       	sbci	r31, 0xFF	; 255
    1acc:	80 81       	ld	r24, Z
    1ace:	8f 5f       	subi	r24, 0xFF	; 255
    1ad0:	8c 93       	st	X, r24
	DIO_PinVal_t Local_Pin4Reading ;
	DIO_PinVal_t Local_Pin5Reading ;
	CLCD_voidSendCommand(1);
	voidSendString("Please Enter ID:");
	CLCD_voidGoToXY(0u,1u);
	while (Local_u8IDCounter != 4)
    1ad2:	fe 01       	movw	r30, r28
    1ad4:	e3 55       	subi	r30, 0x53	; 83
    1ad6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad8:	80 81       	ld	r24, Z
    1ada:	84 30       	cpi	r24, 0x04	; 4
    1adc:	09 f0       	breq	.+2      	; 0x1ae0 <CLCD_voidID+0x866>
    1ade:	02 cc       	rjmp	.-2044   	; 0x12e4 <CLCD_voidID+0x6a>
    1ae0:	fe 01       	movw	r30, r28
    1ae2:	e3 59       	subi	r30, 0x93	; 147
    1ae4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae6:	80 e0       	ldi	r24, 0x00	; 0
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	aa ef       	ldi	r26, 0xFA	; 250
    1aec:	b3 e4       	ldi	r27, 0x43	; 67
    1aee:	80 83       	st	Z, r24
    1af0:	91 83       	std	Z+1, r25	; 0x01
    1af2:	a2 83       	std	Z+2, r26	; 0x02
    1af4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1af6:	8e 01       	movw	r16, r28
    1af8:	07 59       	subi	r16, 0x97	; 151
    1afa:	1f 4f       	sbci	r17, 0xFF	; 255
    1afc:	fe 01       	movw	r30, r28
    1afe:	e3 59       	subi	r30, 0x93	; 147
    1b00:	ff 4f       	sbci	r31, 0xFF	; 255
    1b02:	60 81       	ld	r22, Z
    1b04:	71 81       	ldd	r23, Z+1	; 0x01
    1b06:	82 81       	ldd	r24, Z+2	; 0x02
    1b08:	93 81       	ldd	r25, Z+3	; 0x03
    1b0a:	20 e0       	ldi	r18, 0x00	; 0
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	4a e7       	ldi	r20, 0x7A	; 122
    1b10:	55 e4       	ldi	r21, 0x45	; 69
    1b12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b16:	dc 01       	movw	r26, r24
    1b18:	cb 01       	movw	r24, r22
    1b1a:	f8 01       	movw	r30, r16
    1b1c:	80 83       	st	Z, r24
    1b1e:	91 83       	std	Z+1, r25	; 0x01
    1b20:	a2 83       	std	Z+2, r26	; 0x02
    1b22:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b24:	fe 01       	movw	r30, r28
    1b26:	e7 59       	subi	r30, 0x97	; 151
    1b28:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2a:	60 81       	ld	r22, Z
    1b2c:	71 81       	ldd	r23, Z+1	; 0x01
    1b2e:	82 81       	ldd	r24, Z+2	; 0x02
    1b30:	93 81       	ldd	r25, Z+3	; 0x03
    1b32:	20 e0       	ldi	r18, 0x00	; 0
    1b34:	30 e0       	ldi	r19, 0x00	; 0
    1b36:	40 e8       	ldi	r20, 0x80	; 128
    1b38:	5f e3       	ldi	r21, 0x3F	; 63
    1b3a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b3e:	88 23       	and	r24, r24
    1b40:	44 f4       	brge	.+16     	; 0x1b52 <CLCD_voidID+0x8d8>
		__ticks = 1;
    1b42:	fe 01       	movw	r30, r28
    1b44:	e9 59       	subi	r30, 0x99	; 153
    1b46:	ff 4f       	sbci	r31, 0xFF	; 255
    1b48:	81 e0       	ldi	r24, 0x01	; 1
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	91 83       	std	Z+1, r25	; 0x01
    1b4e:	80 83       	st	Z, r24
    1b50:	64 c0       	rjmp	.+200    	; 0x1c1a <CLCD_voidID+0x9a0>
	else if (__tmp > 65535)
    1b52:	fe 01       	movw	r30, r28
    1b54:	e7 59       	subi	r30, 0x97	; 151
    1b56:	ff 4f       	sbci	r31, 0xFF	; 255
    1b58:	60 81       	ld	r22, Z
    1b5a:	71 81       	ldd	r23, Z+1	; 0x01
    1b5c:	82 81       	ldd	r24, Z+2	; 0x02
    1b5e:	93 81       	ldd	r25, Z+3	; 0x03
    1b60:	20 e0       	ldi	r18, 0x00	; 0
    1b62:	3f ef       	ldi	r19, 0xFF	; 255
    1b64:	4f e7       	ldi	r20, 0x7F	; 127
    1b66:	57 e4       	ldi	r21, 0x47	; 71
    1b68:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b6c:	18 16       	cp	r1, r24
    1b6e:	0c f0       	brlt	.+2      	; 0x1b72 <CLCD_voidID+0x8f8>
    1b70:	43 c0       	rjmp	.+134    	; 0x1bf8 <CLCD_voidID+0x97e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b72:	fe 01       	movw	r30, r28
    1b74:	e3 59       	subi	r30, 0x93	; 147
    1b76:	ff 4f       	sbci	r31, 0xFF	; 255
    1b78:	60 81       	ld	r22, Z
    1b7a:	71 81       	ldd	r23, Z+1	; 0x01
    1b7c:	82 81       	ldd	r24, Z+2	; 0x02
    1b7e:	93 81       	ldd	r25, Z+3	; 0x03
    1b80:	20 e0       	ldi	r18, 0x00	; 0
    1b82:	30 e0       	ldi	r19, 0x00	; 0
    1b84:	40 e2       	ldi	r20, 0x20	; 32
    1b86:	51 e4       	ldi	r21, 0x41	; 65
    1b88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b8c:	dc 01       	movw	r26, r24
    1b8e:	cb 01       	movw	r24, r22
    1b90:	8e 01       	movw	r16, r28
    1b92:	09 59       	subi	r16, 0x99	; 153
    1b94:	1f 4f       	sbci	r17, 0xFF	; 255
    1b96:	bc 01       	movw	r22, r24
    1b98:	cd 01       	movw	r24, r26
    1b9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b9e:	dc 01       	movw	r26, r24
    1ba0:	cb 01       	movw	r24, r22
    1ba2:	f8 01       	movw	r30, r16
    1ba4:	91 83       	std	Z+1, r25	; 0x01
    1ba6:	80 83       	st	Z, r24
    1ba8:	1f c0       	rjmp	.+62     	; 0x1be8 <CLCD_voidID+0x96e>
    1baa:	fe 01       	movw	r30, r28
    1bac:	eb 59       	subi	r30, 0x9B	; 155
    1bae:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb0:	80 e9       	ldi	r24, 0x90	; 144
    1bb2:	91 e0       	ldi	r25, 0x01	; 1
    1bb4:	91 83       	std	Z+1, r25	; 0x01
    1bb6:	80 83       	st	Z, r24
    1bb8:	fe 01       	movw	r30, r28
    1bba:	eb 59       	subi	r30, 0x9B	; 155
    1bbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bbe:	80 81       	ld	r24, Z
    1bc0:	91 81       	ldd	r25, Z+1	; 0x01
    1bc2:	01 97       	sbiw	r24, 0x01	; 1
    1bc4:	f1 f7       	brne	.-4      	; 0x1bc2 <CLCD_voidID+0x948>
    1bc6:	fe 01       	movw	r30, r28
    1bc8:	eb 59       	subi	r30, 0x9B	; 155
    1bca:	ff 4f       	sbci	r31, 0xFF	; 255
    1bcc:	91 83       	std	Z+1, r25	; 0x01
    1bce:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bd0:	de 01       	movw	r26, r28
    1bd2:	a9 59       	subi	r26, 0x99	; 153
    1bd4:	bf 4f       	sbci	r27, 0xFF	; 255
    1bd6:	fe 01       	movw	r30, r28
    1bd8:	e9 59       	subi	r30, 0x99	; 153
    1bda:	ff 4f       	sbci	r31, 0xFF	; 255
    1bdc:	80 81       	ld	r24, Z
    1bde:	91 81       	ldd	r25, Z+1	; 0x01
    1be0:	01 97       	sbiw	r24, 0x01	; 1
    1be2:	11 96       	adiw	r26, 0x01	; 1
    1be4:	9c 93       	st	X, r25
    1be6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1be8:	fe 01       	movw	r30, r28
    1bea:	e9 59       	subi	r30, 0x99	; 153
    1bec:	ff 4f       	sbci	r31, 0xFF	; 255
    1bee:	80 81       	ld	r24, Z
    1bf0:	91 81       	ldd	r25, Z+1	; 0x01
    1bf2:	00 97       	sbiw	r24, 0x00	; 0
    1bf4:	d1 f6       	brne	.-76     	; 0x1baa <CLCD_voidID+0x930>
    1bf6:	28 c0       	rjmp	.+80     	; 0x1c48 <CLCD_voidID+0x9ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bf8:	8e 01       	movw	r16, r28
    1bfa:	09 59       	subi	r16, 0x99	; 153
    1bfc:	1f 4f       	sbci	r17, 0xFF	; 255
    1bfe:	fe 01       	movw	r30, r28
    1c00:	e7 59       	subi	r30, 0x97	; 151
    1c02:	ff 4f       	sbci	r31, 0xFF	; 255
    1c04:	60 81       	ld	r22, Z
    1c06:	71 81       	ldd	r23, Z+1	; 0x01
    1c08:	82 81       	ldd	r24, Z+2	; 0x02
    1c0a:	93 81       	ldd	r25, Z+3	; 0x03
    1c0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c10:	dc 01       	movw	r26, r24
    1c12:	cb 01       	movw	r24, r22
    1c14:	f8 01       	movw	r30, r16
    1c16:	91 83       	std	Z+1, r25	; 0x01
    1c18:	80 83       	st	Z, r24
    1c1a:	de 01       	movw	r26, r28
    1c1c:	ad 59       	subi	r26, 0x9D	; 157
    1c1e:	bf 4f       	sbci	r27, 0xFF	; 255
    1c20:	fe 01       	movw	r30, r28
    1c22:	e9 59       	subi	r30, 0x99	; 153
    1c24:	ff 4f       	sbci	r31, 0xFF	; 255
    1c26:	80 81       	ld	r24, Z
    1c28:	91 81       	ldd	r25, Z+1	; 0x01
    1c2a:	11 96       	adiw	r26, 0x01	; 1
    1c2c:	9c 93       	st	X, r25
    1c2e:	8e 93       	st	-X, r24
    1c30:	fe 01       	movw	r30, r28
    1c32:	ed 59       	subi	r30, 0x9D	; 157
    1c34:	ff 4f       	sbci	r31, 0xFF	; 255
    1c36:	80 81       	ld	r24, Z
    1c38:	91 81       	ldd	r25, Z+1	; 0x01
    1c3a:	01 97       	sbiw	r24, 0x01	; 1
    1c3c:	f1 f7       	brne	.-4      	; 0x1c3a <CLCD_voidID+0x9c0>
    1c3e:	fe 01       	movw	r30, r28
    1c40:	ed 59       	subi	r30, 0x9D	; 157
    1c42:	ff 4f       	sbci	r31, 0xFF	; 255
    1c44:	91 83       	std	Z+1, r25	; 0x01
    1c46:	80 83       	st	Z, r24
								// DO NOTHING
		}
	}

	_delay_ms(500);
	for (Local_u8Iterator = 0 ; Local_u8Iterator < 4 ; Local_u8Iterator ++ )
    1c48:	fe 01       	movw	r30, r28
    1c4a:	e4 55       	subi	r30, 0x54	; 84
    1c4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c4e:	10 82       	st	Z, r1
    1c50:	2f c0       	rjmp	.+94     	; 0x1cb0 <CLCD_voidID+0xa36>
	{
		Local_u8Password [ Local_u8Iterator ] = Local_u8ID [Local_u8IDCounter-1];
    1c52:	fe 01       	movw	r30, r28
    1c54:	e4 55       	subi	r30, 0x54	; 84
    1c56:	ff 4f       	sbci	r31, 0xFF	; 255
    1c58:	80 81       	ld	r24, Z
    1c5a:	48 2f       	mov	r20, r24
    1c5c:	50 e0       	ldi	r21, 0x00	; 0
    1c5e:	fe 01       	movw	r30, r28
    1c60:	e3 55       	subi	r30, 0x53	; 83
    1c62:	ff 4f       	sbci	r31, 0xFF	; 255
    1c64:	80 81       	ld	r24, Z
    1c66:	88 2f       	mov	r24, r24
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	9c 01       	movw	r18, r24
    1c6c:	21 50       	subi	r18, 0x01	; 1
    1c6e:	30 40       	sbci	r19, 0x00	; 0
    1c70:	ce 01       	movw	r24, r28
    1c72:	81 55       	subi	r24, 0x51	; 81
    1c74:	9f 4f       	sbci	r25, 0xFF	; 255
    1c76:	fc 01       	movw	r30, r24
    1c78:	e2 0f       	add	r30, r18
    1c7a:	f3 1f       	adc	r31, r19
    1c7c:	20 81       	ld	r18, Z
    1c7e:	ce 01       	movw	r24, r28
    1c80:	8d 54       	subi	r24, 0x4D	; 77
    1c82:	9f 4f       	sbci	r25, 0xFF	; 255
    1c84:	fc 01       	movw	r30, r24
    1c86:	e4 0f       	add	r30, r20
    1c88:	f5 1f       	adc	r31, r21
    1c8a:	20 83       	st	Z, r18
		Local_u8IDCounter -- ;
    1c8c:	de 01       	movw	r26, r28
    1c8e:	a3 55       	subi	r26, 0x53	; 83
    1c90:	bf 4f       	sbci	r27, 0xFF	; 255
    1c92:	fe 01       	movw	r30, r28
    1c94:	e3 55       	subi	r30, 0x53	; 83
    1c96:	ff 4f       	sbci	r31, 0xFF	; 255
    1c98:	80 81       	ld	r24, Z
    1c9a:	81 50       	subi	r24, 0x01	; 1
    1c9c:	8c 93       	st	X, r24
								// DO NOTHING
		}
	}

	_delay_ms(500);
	for (Local_u8Iterator = 0 ; Local_u8Iterator < 4 ; Local_u8Iterator ++ )
    1c9e:	de 01       	movw	r26, r28
    1ca0:	a4 55       	subi	r26, 0x54	; 84
    1ca2:	bf 4f       	sbci	r27, 0xFF	; 255
    1ca4:	fe 01       	movw	r30, r28
    1ca6:	e4 55       	subi	r30, 0x54	; 84
    1ca8:	ff 4f       	sbci	r31, 0xFF	; 255
    1caa:	80 81       	ld	r24, Z
    1cac:	8f 5f       	subi	r24, 0xFF	; 255
    1cae:	8c 93       	st	X, r24
    1cb0:	fe 01       	movw	r30, r28
    1cb2:	e4 55       	subi	r30, 0x54	; 84
    1cb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb6:	80 81       	ld	r24, Z
    1cb8:	84 30       	cpi	r24, 0x04	; 4
    1cba:	58 f2       	brcs	.-106    	; 0x1c52 <CLCD_voidID+0x9d8>
    1cbc:	cc c5       	rjmp	.+2968   	; 0x2856 <CLCD_voidID+0x15dc>
	}

	//////////////////////////////////////////////////////////////
	while ( Local_u8TrialCounter != 4 )
	{
		CLCD_voidSendCommand(1);
    1cbe:	81 e0       	ldi	r24, 0x01	; 1
    1cc0:	0e 94 74 1b 	call	0x36e8	; 0x36e8 <CLCD_voidSendCommand>
		voidSendString("Enter Password :");
    1cc4:	89 e7       	ldi	r24, 0x79	; 121
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	0e 94 44 1c 	call	0x3888	; 0x3888 <voidSendString>
		CLCD_voidGoToXY(8u,1u);
    1ccc:	88 e0       	ldi	r24, 0x08	; 8
    1cce:	61 e0       	ldi	r22, 0x01	; 1
    1cd0:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <CLCD_voidGoToXY>
		voidSendString("Trial ");
    1cd4:	8a e8       	ldi	r24, 0x8A	; 138
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	0e 94 44 1c 	call	0x3888	; 0x3888 <voidSendString>
		voidSendNumber(Local_u8TrialCounter);
    1cdc:	fe 01       	movw	r30, r28
    1cde:	e2 55       	subi	r30, 0x52	; 82
    1ce0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce2:	80 81       	ld	r24, Z
    1ce4:	88 2f       	mov	r24, r24
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	a0 e0       	ldi	r26, 0x00	; 0
    1cea:	b0 e0       	ldi	r27, 0x00	; 0
    1cec:	bc 01       	movw	r22, r24
    1cee:	cd 01       	movw	r24, r26
    1cf0:	0e 94 82 1c 	call	0x3904	; 0x3904 <voidSendNumber>
		CLCD_voidGoToXY(0u,1u);
    1cf4:	80 e0       	ldi	r24, 0x00	; 0
    1cf6:	61 e0       	ldi	r22, 0x01	; 1
    1cf8:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <CLCD_voidGoToXY>
		Local_u8Iterator = 0 ;
    1cfc:	fe 01       	movw	r30, r28
    1cfe:	e4 55       	subi	r30, 0x54	; 84
    1d00:	ff 4f       	sbci	r31, 0xFF	; 255
    1d02:	10 82       	st	Z, r1
		Local_u8XPos     = 0 ;
    1d04:	fe 01       	movw	r30, r28
    1d06:	e5 55       	subi	r30, 0x55	; 85
    1d08:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0a:	10 82       	st	Z, r1
		Local_u8IDCounter= 0 ;
    1d0c:	fe 01       	movw	r30, r28
    1d0e:	e3 55       	subi	r30, 0x53	; 83
    1d10:	ff 4f       	sbci	r31, 0xFF	; 255
    1d12:	10 82       	st	Z, r1
    1d14:	88 c3       	rjmp	.+1808   	; 0x2426 <CLCD_voidID+0x11ac>
		while (Local_u8IDCounter != 4)
		{
			DIO_u8GetPinValue(DIO_PORTD , DIO_PIN2 ,&Local_Pin2Reading);
    1d16:	9e 01       	movw	r18, r28
    1d18:	25 54       	subi	r18, 0x45	; 69
    1d1a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d1c:	83 e0       	ldi	r24, 0x03	; 3
    1d1e:	62 e0       	ldi	r22, 0x02	; 2
    1d20:	a9 01       	movw	r20, r18
    1d22:	0e 94 94 20 	call	0x4128	; 0x4128 <DIO_u8GetPinValue>
			DIO_u8GetPinValue(DIO_PORTD , DIO_PIN3 ,&Local_Pin3Reading);
    1d26:	9e 01       	movw	r18, r28
    1d28:	24 54       	subi	r18, 0x44	; 68
    1d2a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d2c:	83 e0       	ldi	r24, 0x03	; 3
    1d2e:	63 e0       	ldi	r22, 0x03	; 3
    1d30:	a9 01       	movw	r20, r18
    1d32:	0e 94 94 20 	call	0x4128	; 0x4128 <DIO_u8GetPinValue>
			DIO_u8GetPinValue(DIO_PORTD , DIO_PIN4 ,&Local_Pin4Reading);
    1d36:	9e 01       	movw	r18, r28
    1d38:	23 54       	subi	r18, 0x43	; 67
    1d3a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d3c:	83 e0       	ldi	r24, 0x03	; 3
    1d3e:	64 e0       	ldi	r22, 0x04	; 4
    1d40:	a9 01       	movw	r20, r18
    1d42:	0e 94 94 20 	call	0x4128	; 0x4128 <DIO_u8GetPinValue>
			DIO_u8GetPinValue(DIO_PORTD , DIO_PIN5 ,&Local_Pin5Reading);
    1d46:	9e 01       	movw	r18, r28
    1d48:	22 54       	subi	r18, 0x42	; 66
    1d4a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d4c:	83 e0       	ldi	r24, 0x03	; 3
    1d4e:	65 e0       	ldi	r22, 0x05	; 5
    1d50:	a9 01       	movw	r20, r18
    1d52:	0e 94 94 20 	call	0x4128	; 0x4128 <DIO_u8GetPinValue>
			if (Local_Pin2Reading == DIO_PIN_LOW)
    1d56:	fe 01       	movw	r30, r28
    1d58:	e5 54       	subi	r30, 0x45	; 69
    1d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5c:	80 81       	ld	r24, Z
    1d5e:	88 23       	and	r24, r24
    1d60:	09 f0       	breq	.+2      	; 0x1d64 <CLCD_voidID+0xaea>
    1d62:	ef c0       	rjmp	.+478    	; 0x1f42 <CLCD_voidID+0xcc8>
			{
				voidSendNumber(1);
    1d64:	61 e0       	ldi	r22, 0x01	; 1
    1d66:	70 e0       	ldi	r23, 0x00	; 0
    1d68:	80 e0       	ldi	r24, 0x00	; 0
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	0e 94 82 1c 	call	0x3904	; 0x3904 <voidSendNumber>
				OpenSound();
    1d70:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <OpenSound>
    1d74:	fe 01       	movw	r30, r28
    1d76:	e1 5a       	subi	r30, 0xA1	; 161
    1d78:	ff 4f       	sbci	r31, 0xFF	; 255
    1d7a:	80 e0       	ldi	r24, 0x00	; 0
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	aa e7       	ldi	r26, 0x7A	; 122
    1d80:	b3 e4       	ldi	r27, 0x43	; 67
    1d82:	80 83       	st	Z, r24
    1d84:	91 83       	std	Z+1, r25	; 0x01
    1d86:	a2 83       	std	Z+2, r26	; 0x02
    1d88:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d8a:	8e 01       	movw	r16, r28
    1d8c:	05 5a       	subi	r16, 0xA5	; 165
    1d8e:	1f 4f       	sbci	r17, 0xFF	; 255
    1d90:	fe 01       	movw	r30, r28
    1d92:	e1 5a       	subi	r30, 0xA1	; 161
    1d94:	ff 4f       	sbci	r31, 0xFF	; 255
    1d96:	60 81       	ld	r22, Z
    1d98:	71 81       	ldd	r23, Z+1	; 0x01
    1d9a:	82 81       	ldd	r24, Z+2	; 0x02
    1d9c:	93 81       	ldd	r25, Z+3	; 0x03
    1d9e:	20 e0       	ldi	r18, 0x00	; 0
    1da0:	30 e0       	ldi	r19, 0x00	; 0
    1da2:	4a e7       	ldi	r20, 0x7A	; 122
    1da4:	55 e4       	ldi	r21, 0x45	; 69
    1da6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1daa:	dc 01       	movw	r26, r24
    1dac:	cb 01       	movw	r24, r22
    1dae:	f8 01       	movw	r30, r16
    1db0:	80 83       	st	Z, r24
    1db2:	91 83       	std	Z+1, r25	; 0x01
    1db4:	a2 83       	std	Z+2, r26	; 0x02
    1db6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1db8:	fe 01       	movw	r30, r28
    1dba:	e5 5a       	subi	r30, 0xA5	; 165
    1dbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dbe:	60 81       	ld	r22, Z
    1dc0:	71 81       	ldd	r23, Z+1	; 0x01
    1dc2:	82 81       	ldd	r24, Z+2	; 0x02
    1dc4:	93 81       	ldd	r25, Z+3	; 0x03
    1dc6:	20 e0       	ldi	r18, 0x00	; 0
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	40 e8       	ldi	r20, 0x80	; 128
    1dcc:	5f e3       	ldi	r21, 0x3F	; 63
    1dce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dd2:	88 23       	and	r24, r24
    1dd4:	44 f4       	brge	.+16     	; 0x1de6 <CLCD_voidID+0xb6c>
		__ticks = 1;
    1dd6:	fe 01       	movw	r30, r28
    1dd8:	e7 5a       	subi	r30, 0xA7	; 167
    1dda:	ff 4f       	sbci	r31, 0xFF	; 255
    1ddc:	81 e0       	ldi	r24, 0x01	; 1
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	91 83       	std	Z+1, r25	; 0x01
    1de2:	80 83       	st	Z, r24
    1de4:	64 c0       	rjmp	.+200    	; 0x1eae <CLCD_voidID+0xc34>
	else if (__tmp > 65535)
    1de6:	fe 01       	movw	r30, r28
    1de8:	e5 5a       	subi	r30, 0xA5	; 165
    1dea:	ff 4f       	sbci	r31, 0xFF	; 255
    1dec:	60 81       	ld	r22, Z
    1dee:	71 81       	ldd	r23, Z+1	; 0x01
    1df0:	82 81       	ldd	r24, Z+2	; 0x02
    1df2:	93 81       	ldd	r25, Z+3	; 0x03
    1df4:	20 e0       	ldi	r18, 0x00	; 0
    1df6:	3f ef       	ldi	r19, 0xFF	; 255
    1df8:	4f e7       	ldi	r20, 0x7F	; 127
    1dfa:	57 e4       	ldi	r21, 0x47	; 71
    1dfc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e00:	18 16       	cp	r1, r24
    1e02:	0c f0       	brlt	.+2      	; 0x1e06 <CLCD_voidID+0xb8c>
    1e04:	43 c0       	rjmp	.+134    	; 0x1e8c <CLCD_voidID+0xc12>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e06:	fe 01       	movw	r30, r28
    1e08:	e1 5a       	subi	r30, 0xA1	; 161
    1e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0c:	60 81       	ld	r22, Z
    1e0e:	71 81       	ldd	r23, Z+1	; 0x01
    1e10:	82 81       	ldd	r24, Z+2	; 0x02
    1e12:	93 81       	ldd	r25, Z+3	; 0x03
    1e14:	20 e0       	ldi	r18, 0x00	; 0
    1e16:	30 e0       	ldi	r19, 0x00	; 0
    1e18:	40 e2       	ldi	r20, 0x20	; 32
    1e1a:	51 e4       	ldi	r21, 0x41	; 65
    1e1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e20:	dc 01       	movw	r26, r24
    1e22:	cb 01       	movw	r24, r22
    1e24:	8e 01       	movw	r16, r28
    1e26:	07 5a       	subi	r16, 0xA7	; 167
    1e28:	1f 4f       	sbci	r17, 0xFF	; 255
    1e2a:	bc 01       	movw	r22, r24
    1e2c:	cd 01       	movw	r24, r26
    1e2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e32:	dc 01       	movw	r26, r24
    1e34:	cb 01       	movw	r24, r22
    1e36:	f8 01       	movw	r30, r16
    1e38:	91 83       	std	Z+1, r25	; 0x01
    1e3a:	80 83       	st	Z, r24
    1e3c:	1f c0       	rjmp	.+62     	; 0x1e7c <CLCD_voidID+0xc02>
    1e3e:	fe 01       	movw	r30, r28
    1e40:	e9 5a       	subi	r30, 0xA9	; 169
    1e42:	ff 4f       	sbci	r31, 0xFF	; 255
    1e44:	80 e9       	ldi	r24, 0x90	; 144
    1e46:	91 e0       	ldi	r25, 0x01	; 1
    1e48:	91 83       	std	Z+1, r25	; 0x01
    1e4a:	80 83       	st	Z, r24
    1e4c:	fe 01       	movw	r30, r28
    1e4e:	e9 5a       	subi	r30, 0xA9	; 169
    1e50:	ff 4f       	sbci	r31, 0xFF	; 255
    1e52:	80 81       	ld	r24, Z
    1e54:	91 81       	ldd	r25, Z+1	; 0x01
    1e56:	01 97       	sbiw	r24, 0x01	; 1
    1e58:	f1 f7       	brne	.-4      	; 0x1e56 <CLCD_voidID+0xbdc>
    1e5a:	fe 01       	movw	r30, r28
    1e5c:	e9 5a       	subi	r30, 0xA9	; 169
    1e5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e60:	91 83       	std	Z+1, r25	; 0x01
    1e62:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e64:	de 01       	movw	r26, r28
    1e66:	a7 5a       	subi	r26, 0xA7	; 167
    1e68:	bf 4f       	sbci	r27, 0xFF	; 255
    1e6a:	fe 01       	movw	r30, r28
    1e6c:	e7 5a       	subi	r30, 0xA7	; 167
    1e6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e70:	80 81       	ld	r24, Z
    1e72:	91 81       	ldd	r25, Z+1	; 0x01
    1e74:	01 97       	sbiw	r24, 0x01	; 1
    1e76:	11 96       	adiw	r26, 0x01	; 1
    1e78:	9c 93       	st	X, r25
    1e7a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e7c:	fe 01       	movw	r30, r28
    1e7e:	e7 5a       	subi	r30, 0xA7	; 167
    1e80:	ff 4f       	sbci	r31, 0xFF	; 255
    1e82:	80 81       	ld	r24, Z
    1e84:	91 81       	ldd	r25, Z+1	; 0x01
    1e86:	00 97       	sbiw	r24, 0x00	; 0
    1e88:	d1 f6       	brne	.-76     	; 0x1e3e <CLCD_voidID+0xbc4>
    1e8a:	27 c0       	rjmp	.+78     	; 0x1eda <CLCD_voidID+0xc60>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e8c:	8e 01       	movw	r16, r28
    1e8e:	07 5a       	subi	r16, 0xA7	; 167
    1e90:	1f 4f       	sbci	r17, 0xFF	; 255
    1e92:	fe 01       	movw	r30, r28
    1e94:	e5 5a       	subi	r30, 0xA5	; 165
    1e96:	ff 4f       	sbci	r31, 0xFF	; 255
    1e98:	60 81       	ld	r22, Z
    1e9a:	71 81       	ldd	r23, Z+1	; 0x01
    1e9c:	82 81       	ldd	r24, Z+2	; 0x02
    1e9e:	93 81       	ldd	r25, Z+3	; 0x03
    1ea0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ea4:	dc 01       	movw	r26, r24
    1ea6:	cb 01       	movw	r24, r22
    1ea8:	f8 01       	movw	r30, r16
    1eaa:	91 83       	std	Z+1, r25	; 0x01
    1eac:	80 83       	st	Z, r24
    1eae:	de 01       	movw	r26, r28
    1eb0:	ab 5a       	subi	r26, 0xAB	; 171
    1eb2:	bf 4f       	sbci	r27, 0xFF	; 255
    1eb4:	fe 01       	movw	r30, r28
    1eb6:	e7 5a       	subi	r30, 0xA7	; 167
    1eb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eba:	80 81       	ld	r24, Z
    1ebc:	91 81       	ldd	r25, Z+1	; 0x01
    1ebe:	8d 93       	st	X+, r24
    1ec0:	9c 93       	st	X, r25
    1ec2:	fe 01       	movw	r30, r28
    1ec4:	eb 5a       	subi	r30, 0xAB	; 171
    1ec6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec8:	80 81       	ld	r24, Z
    1eca:	91 81       	ldd	r25, Z+1	; 0x01
    1ecc:	01 97       	sbiw	r24, 0x01	; 1
    1ece:	f1 f7       	brne	.-4      	; 0x1ecc <CLCD_voidID+0xc52>
    1ed0:	fe 01       	movw	r30, r28
    1ed2:	eb 5a       	subi	r30, 0xAB	; 171
    1ed4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed6:	91 83       	std	Z+1, r25	; 0x01
    1ed8:	80 83       	st	Z, r24
				_delay_ms(250);
				CLCD_voidGoToXY(Local_u8XPos,1);
    1eda:	fe 01       	movw	r30, r28
    1edc:	e5 55       	subi	r30, 0x55	; 85
    1ede:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee0:	80 81       	ld	r24, Z
    1ee2:	61 e0       	ldi	r22, 0x01	; 1
    1ee4:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <CLCD_voidGoToXY>
				CLCD_voidSendData('*');
    1ee8:	8a e2       	ldi	r24, 0x2A	; 42
    1eea:	0e 94 8f 1b 	call	0x371e	; 0x371e <CLCD_voidSendData>
				Local_u8PasswordEntry[Local_u8Iterator] = '1' ;
    1eee:	fe 01       	movw	r30, r28
    1ef0:	e4 55       	subi	r30, 0x54	; 84
    1ef2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef4:	80 81       	ld	r24, Z
    1ef6:	28 2f       	mov	r18, r24
    1ef8:	30 e0       	ldi	r19, 0x00	; 0
    1efa:	ce 01       	movw	r24, r28
    1efc:	89 54       	subi	r24, 0x49	; 73
    1efe:	9f 4f       	sbci	r25, 0xFF	; 255
    1f00:	fc 01       	movw	r30, r24
    1f02:	e2 0f       	add	r30, r18
    1f04:	f3 1f       	adc	r31, r19
    1f06:	81 e3       	ldi	r24, 0x31	; 49
    1f08:	80 83       	st	Z, r24
				Local_u8IDCounter ++ ;
    1f0a:	de 01       	movw	r26, r28
    1f0c:	a3 55       	subi	r26, 0x53	; 83
    1f0e:	bf 4f       	sbci	r27, 0xFF	; 255
    1f10:	fe 01       	movw	r30, r28
    1f12:	e3 55       	subi	r30, 0x53	; 83
    1f14:	ff 4f       	sbci	r31, 0xFF	; 255
    1f16:	80 81       	ld	r24, Z
    1f18:	8f 5f       	subi	r24, 0xFF	; 255
    1f1a:	8c 93       	st	X, r24
				Local_u8Iterator  ++ ;
    1f1c:	de 01       	movw	r26, r28
    1f1e:	a4 55       	subi	r26, 0x54	; 84
    1f20:	bf 4f       	sbci	r27, 0xFF	; 255
    1f22:	fe 01       	movw	r30, r28
    1f24:	e4 55       	subi	r30, 0x54	; 84
    1f26:	ff 4f       	sbci	r31, 0xFF	; 255
    1f28:	80 81       	ld	r24, Z
    1f2a:	8f 5f       	subi	r24, 0xFF	; 255
    1f2c:	8c 93       	st	X, r24
				Local_u8XPos 	  ++ ;
    1f2e:	de 01       	movw	r26, r28
    1f30:	a5 55       	subi	r26, 0x55	; 85
    1f32:	bf 4f       	sbci	r27, 0xFF	; 255
    1f34:	fe 01       	movw	r30, r28
    1f36:	e5 55       	subi	r30, 0x55	; 85
    1f38:	ff 4f       	sbci	r31, 0xFF	; 255
    1f3a:	80 81       	ld	r24, Z
    1f3c:	8f 5f       	subi	r24, 0xFF	; 255
    1f3e:	8c 93       	st	X, r24
    1f40:	72 c2       	rjmp	.+1252   	; 0x2426 <CLCD_voidID+0x11ac>
			}
			else if (Local_Pin3Reading == DIO_PIN_LOW)
    1f42:	fe 01       	movw	r30, r28
    1f44:	e4 54       	subi	r30, 0x44	; 68
    1f46:	ff 4f       	sbci	r31, 0xFF	; 255
    1f48:	80 81       	ld	r24, Z
    1f4a:	88 23       	and	r24, r24
    1f4c:	09 f0       	breq	.+2      	; 0x1f50 <CLCD_voidID+0xcd6>
    1f4e:	ef c0       	rjmp	.+478    	; 0x212e <CLCD_voidID+0xeb4>
			{
				voidSendNumber(2);
    1f50:	62 e0       	ldi	r22, 0x02	; 2
    1f52:	70 e0       	ldi	r23, 0x00	; 0
    1f54:	80 e0       	ldi	r24, 0x00	; 0
    1f56:	90 e0       	ldi	r25, 0x00	; 0
    1f58:	0e 94 82 1c 	call	0x3904	; 0x3904 <voidSendNumber>
				OpenSound();
    1f5c:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <OpenSound>
    1f60:	fe 01       	movw	r30, r28
    1f62:	ef 5a       	subi	r30, 0xAF	; 175
    1f64:	ff 4f       	sbci	r31, 0xFF	; 255
    1f66:	80 e0       	ldi	r24, 0x00	; 0
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	aa e7       	ldi	r26, 0x7A	; 122
    1f6c:	b3 e4       	ldi	r27, 0x43	; 67
    1f6e:	80 83       	st	Z, r24
    1f70:	91 83       	std	Z+1, r25	; 0x01
    1f72:	a2 83       	std	Z+2, r26	; 0x02
    1f74:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f76:	8e 01       	movw	r16, r28
    1f78:	03 5b       	subi	r16, 0xB3	; 179
    1f7a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f7c:	fe 01       	movw	r30, r28
    1f7e:	ef 5a       	subi	r30, 0xAF	; 175
    1f80:	ff 4f       	sbci	r31, 0xFF	; 255
    1f82:	60 81       	ld	r22, Z
    1f84:	71 81       	ldd	r23, Z+1	; 0x01
    1f86:	82 81       	ldd	r24, Z+2	; 0x02
    1f88:	93 81       	ldd	r25, Z+3	; 0x03
    1f8a:	20 e0       	ldi	r18, 0x00	; 0
    1f8c:	30 e0       	ldi	r19, 0x00	; 0
    1f8e:	4a e7       	ldi	r20, 0x7A	; 122
    1f90:	55 e4       	ldi	r21, 0x45	; 69
    1f92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f96:	dc 01       	movw	r26, r24
    1f98:	cb 01       	movw	r24, r22
    1f9a:	f8 01       	movw	r30, r16
    1f9c:	80 83       	st	Z, r24
    1f9e:	91 83       	std	Z+1, r25	; 0x01
    1fa0:	a2 83       	std	Z+2, r26	; 0x02
    1fa2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1fa4:	fe 01       	movw	r30, r28
    1fa6:	e3 5b       	subi	r30, 0xB3	; 179
    1fa8:	ff 4f       	sbci	r31, 0xFF	; 255
    1faa:	60 81       	ld	r22, Z
    1fac:	71 81       	ldd	r23, Z+1	; 0x01
    1fae:	82 81       	ldd	r24, Z+2	; 0x02
    1fb0:	93 81       	ldd	r25, Z+3	; 0x03
    1fb2:	20 e0       	ldi	r18, 0x00	; 0
    1fb4:	30 e0       	ldi	r19, 0x00	; 0
    1fb6:	40 e8       	ldi	r20, 0x80	; 128
    1fb8:	5f e3       	ldi	r21, 0x3F	; 63
    1fba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fbe:	88 23       	and	r24, r24
    1fc0:	44 f4       	brge	.+16     	; 0x1fd2 <CLCD_voidID+0xd58>
		__ticks = 1;
    1fc2:	fe 01       	movw	r30, r28
    1fc4:	e5 5b       	subi	r30, 0xB5	; 181
    1fc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc8:	81 e0       	ldi	r24, 0x01	; 1
    1fca:	90 e0       	ldi	r25, 0x00	; 0
    1fcc:	91 83       	std	Z+1, r25	; 0x01
    1fce:	80 83       	st	Z, r24
    1fd0:	64 c0       	rjmp	.+200    	; 0x209a <CLCD_voidID+0xe20>
	else if (__tmp > 65535)
    1fd2:	fe 01       	movw	r30, r28
    1fd4:	e3 5b       	subi	r30, 0xB3	; 179
    1fd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd8:	60 81       	ld	r22, Z
    1fda:	71 81       	ldd	r23, Z+1	; 0x01
    1fdc:	82 81       	ldd	r24, Z+2	; 0x02
    1fde:	93 81       	ldd	r25, Z+3	; 0x03
    1fe0:	20 e0       	ldi	r18, 0x00	; 0
    1fe2:	3f ef       	ldi	r19, 0xFF	; 255
    1fe4:	4f e7       	ldi	r20, 0x7F	; 127
    1fe6:	57 e4       	ldi	r21, 0x47	; 71
    1fe8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fec:	18 16       	cp	r1, r24
    1fee:	0c f0       	brlt	.+2      	; 0x1ff2 <CLCD_voidID+0xd78>
    1ff0:	43 c0       	rjmp	.+134    	; 0x2078 <CLCD_voidID+0xdfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ff2:	fe 01       	movw	r30, r28
    1ff4:	ef 5a       	subi	r30, 0xAF	; 175
    1ff6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff8:	60 81       	ld	r22, Z
    1ffa:	71 81       	ldd	r23, Z+1	; 0x01
    1ffc:	82 81       	ldd	r24, Z+2	; 0x02
    1ffe:	93 81       	ldd	r25, Z+3	; 0x03
    2000:	20 e0       	ldi	r18, 0x00	; 0
    2002:	30 e0       	ldi	r19, 0x00	; 0
    2004:	40 e2       	ldi	r20, 0x20	; 32
    2006:	51 e4       	ldi	r21, 0x41	; 65
    2008:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    200c:	dc 01       	movw	r26, r24
    200e:	cb 01       	movw	r24, r22
    2010:	8e 01       	movw	r16, r28
    2012:	05 5b       	subi	r16, 0xB5	; 181
    2014:	1f 4f       	sbci	r17, 0xFF	; 255
    2016:	bc 01       	movw	r22, r24
    2018:	cd 01       	movw	r24, r26
    201a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    201e:	dc 01       	movw	r26, r24
    2020:	cb 01       	movw	r24, r22
    2022:	f8 01       	movw	r30, r16
    2024:	91 83       	std	Z+1, r25	; 0x01
    2026:	80 83       	st	Z, r24
    2028:	1f c0       	rjmp	.+62     	; 0x2068 <CLCD_voidID+0xdee>
    202a:	fe 01       	movw	r30, r28
    202c:	e7 5b       	subi	r30, 0xB7	; 183
    202e:	ff 4f       	sbci	r31, 0xFF	; 255
    2030:	80 e9       	ldi	r24, 0x90	; 144
    2032:	91 e0       	ldi	r25, 0x01	; 1
    2034:	91 83       	std	Z+1, r25	; 0x01
    2036:	80 83       	st	Z, r24
    2038:	fe 01       	movw	r30, r28
    203a:	e7 5b       	subi	r30, 0xB7	; 183
    203c:	ff 4f       	sbci	r31, 0xFF	; 255
    203e:	80 81       	ld	r24, Z
    2040:	91 81       	ldd	r25, Z+1	; 0x01
    2042:	01 97       	sbiw	r24, 0x01	; 1
    2044:	f1 f7       	brne	.-4      	; 0x2042 <CLCD_voidID+0xdc8>
    2046:	fe 01       	movw	r30, r28
    2048:	e7 5b       	subi	r30, 0xB7	; 183
    204a:	ff 4f       	sbci	r31, 0xFF	; 255
    204c:	91 83       	std	Z+1, r25	; 0x01
    204e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2050:	de 01       	movw	r26, r28
    2052:	a5 5b       	subi	r26, 0xB5	; 181
    2054:	bf 4f       	sbci	r27, 0xFF	; 255
    2056:	fe 01       	movw	r30, r28
    2058:	e5 5b       	subi	r30, 0xB5	; 181
    205a:	ff 4f       	sbci	r31, 0xFF	; 255
    205c:	80 81       	ld	r24, Z
    205e:	91 81       	ldd	r25, Z+1	; 0x01
    2060:	01 97       	sbiw	r24, 0x01	; 1
    2062:	11 96       	adiw	r26, 0x01	; 1
    2064:	9c 93       	st	X, r25
    2066:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2068:	fe 01       	movw	r30, r28
    206a:	e5 5b       	subi	r30, 0xB5	; 181
    206c:	ff 4f       	sbci	r31, 0xFF	; 255
    206e:	80 81       	ld	r24, Z
    2070:	91 81       	ldd	r25, Z+1	; 0x01
    2072:	00 97       	sbiw	r24, 0x00	; 0
    2074:	d1 f6       	brne	.-76     	; 0x202a <CLCD_voidID+0xdb0>
    2076:	27 c0       	rjmp	.+78     	; 0x20c6 <CLCD_voidID+0xe4c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2078:	8e 01       	movw	r16, r28
    207a:	05 5b       	subi	r16, 0xB5	; 181
    207c:	1f 4f       	sbci	r17, 0xFF	; 255
    207e:	fe 01       	movw	r30, r28
    2080:	e3 5b       	subi	r30, 0xB3	; 179
    2082:	ff 4f       	sbci	r31, 0xFF	; 255
    2084:	60 81       	ld	r22, Z
    2086:	71 81       	ldd	r23, Z+1	; 0x01
    2088:	82 81       	ldd	r24, Z+2	; 0x02
    208a:	93 81       	ldd	r25, Z+3	; 0x03
    208c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2090:	dc 01       	movw	r26, r24
    2092:	cb 01       	movw	r24, r22
    2094:	f8 01       	movw	r30, r16
    2096:	91 83       	std	Z+1, r25	; 0x01
    2098:	80 83       	st	Z, r24
    209a:	de 01       	movw	r26, r28
    209c:	a9 5b       	subi	r26, 0xB9	; 185
    209e:	bf 4f       	sbci	r27, 0xFF	; 255
    20a0:	fe 01       	movw	r30, r28
    20a2:	e5 5b       	subi	r30, 0xB5	; 181
    20a4:	ff 4f       	sbci	r31, 0xFF	; 255
    20a6:	80 81       	ld	r24, Z
    20a8:	91 81       	ldd	r25, Z+1	; 0x01
    20aa:	8d 93       	st	X+, r24
    20ac:	9c 93       	st	X, r25
    20ae:	fe 01       	movw	r30, r28
    20b0:	e9 5b       	subi	r30, 0xB9	; 185
    20b2:	ff 4f       	sbci	r31, 0xFF	; 255
    20b4:	80 81       	ld	r24, Z
    20b6:	91 81       	ldd	r25, Z+1	; 0x01
    20b8:	01 97       	sbiw	r24, 0x01	; 1
    20ba:	f1 f7       	brne	.-4      	; 0x20b8 <CLCD_voidID+0xe3e>
    20bc:	fe 01       	movw	r30, r28
    20be:	e9 5b       	subi	r30, 0xB9	; 185
    20c0:	ff 4f       	sbci	r31, 0xFF	; 255
    20c2:	91 83       	std	Z+1, r25	; 0x01
    20c4:	80 83       	st	Z, r24
				_delay_ms(250);
				CLCD_voidGoToXY(Local_u8XPos,1);
    20c6:	fe 01       	movw	r30, r28
    20c8:	e5 55       	subi	r30, 0x55	; 85
    20ca:	ff 4f       	sbci	r31, 0xFF	; 255
    20cc:	80 81       	ld	r24, Z
    20ce:	61 e0       	ldi	r22, 0x01	; 1
    20d0:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <CLCD_voidGoToXY>
				CLCD_voidSendData('*');
    20d4:	8a e2       	ldi	r24, 0x2A	; 42
    20d6:	0e 94 8f 1b 	call	0x371e	; 0x371e <CLCD_voidSendData>
				Local_u8PasswordEntry[Local_u8Iterator] = '2' ;
    20da:	fe 01       	movw	r30, r28
    20dc:	e4 55       	subi	r30, 0x54	; 84
    20de:	ff 4f       	sbci	r31, 0xFF	; 255
    20e0:	80 81       	ld	r24, Z
    20e2:	28 2f       	mov	r18, r24
    20e4:	30 e0       	ldi	r19, 0x00	; 0
    20e6:	ce 01       	movw	r24, r28
    20e8:	89 54       	subi	r24, 0x49	; 73
    20ea:	9f 4f       	sbci	r25, 0xFF	; 255
    20ec:	fc 01       	movw	r30, r24
    20ee:	e2 0f       	add	r30, r18
    20f0:	f3 1f       	adc	r31, r19
    20f2:	82 e3       	ldi	r24, 0x32	; 50
    20f4:	80 83       	st	Z, r24
				Local_u8IDCounter ++ ;
    20f6:	de 01       	movw	r26, r28
    20f8:	a3 55       	subi	r26, 0x53	; 83
    20fa:	bf 4f       	sbci	r27, 0xFF	; 255
    20fc:	fe 01       	movw	r30, r28
    20fe:	e3 55       	subi	r30, 0x53	; 83
    2100:	ff 4f       	sbci	r31, 0xFF	; 255
    2102:	80 81       	ld	r24, Z
    2104:	8f 5f       	subi	r24, 0xFF	; 255
    2106:	8c 93       	st	X, r24
				Local_u8Iterator  ++ ;
    2108:	de 01       	movw	r26, r28
    210a:	a4 55       	subi	r26, 0x54	; 84
    210c:	bf 4f       	sbci	r27, 0xFF	; 255
    210e:	fe 01       	movw	r30, r28
    2110:	e4 55       	subi	r30, 0x54	; 84
    2112:	ff 4f       	sbci	r31, 0xFF	; 255
    2114:	80 81       	ld	r24, Z
    2116:	8f 5f       	subi	r24, 0xFF	; 255
    2118:	8c 93       	st	X, r24
				Local_u8XPos 	  ++ ;
    211a:	de 01       	movw	r26, r28
    211c:	a5 55       	subi	r26, 0x55	; 85
    211e:	bf 4f       	sbci	r27, 0xFF	; 255
    2120:	fe 01       	movw	r30, r28
    2122:	e5 55       	subi	r30, 0x55	; 85
    2124:	ff 4f       	sbci	r31, 0xFF	; 255
    2126:	80 81       	ld	r24, Z
    2128:	8f 5f       	subi	r24, 0xFF	; 255
    212a:	8c 93       	st	X, r24
    212c:	7c c1       	rjmp	.+760    	; 0x2426 <CLCD_voidID+0x11ac>
			}
			else if (Local_Pin4Reading == DIO_PIN_LOW)
    212e:	fe 01       	movw	r30, r28
    2130:	e3 54       	subi	r30, 0x43	; 67
    2132:	ff 4f       	sbci	r31, 0xFF	; 255
    2134:	80 81       	ld	r24, Z
    2136:	88 23       	and	r24, r24
    2138:	09 f0       	breq	.+2      	; 0x213c <CLCD_voidID+0xec2>
    213a:	c1 c0       	rjmp	.+386    	; 0x22be <CLCD_voidID+0x1044>
			{
				voidSendNumber(3);
    213c:	63 e0       	ldi	r22, 0x03	; 3
    213e:	70 e0       	ldi	r23, 0x00	; 0
    2140:	80 e0       	ldi	r24, 0x00	; 0
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	0e 94 82 1c 	call	0x3904	; 0x3904 <voidSendNumber>
				OpenSound();
    2148:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <OpenSound>
    214c:	fe 01       	movw	r30, r28
    214e:	ed 5b       	subi	r30, 0xBD	; 189
    2150:	ff 4f       	sbci	r31, 0xFF	; 255
    2152:	80 e0       	ldi	r24, 0x00	; 0
    2154:	90 e0       	ldi	r25, 0x00	; 0
    2156:	aa e7       	ldi	r26, 0x7A	; 122
    2158:	b3 e4       	ldi	r27, 0x43	; 67
    215a:	80 83       	st	Z, r24
    215c:	91 83       	std	Z+1, r25	; 0x01
    215e:	a2 83       	std	Z+2, r26	; 0x02
    2160:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2162:	8e 01       	movw	r16, r28
    2164:	01 5c       	subi	r16, 0xC1	; 193
    2166:	1f 4f       	sbci	r17, 0xFF	; 255
    2168:	fe 01       	movw	r30, r28
    216a:	ed 5b       	subi	r30, 0xBD	; 189
    216c:	ff 4f       	sbci	r31, 0xFF	; 255
    216e:	60 81       	ld	r22, Z
    2170:	71 81       	ldd	r23, Z+1	; 0x01
    2172:	82 81       	ldd	r24, Z+2	; 0x02
    2174:	93 81       	ldd	r25, Z+3	; 0x03
    2176:	20 e0       	ldi	r18, 0x00	; 0
    2178:	30 e0       	ldi	r19, 0x00	; 0
    217a:	4a e7       	ldi	r20, 0x7A	; 122
    217c:	55 e4       	ldi	r21, 0x45	; 69
    217e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2182:	dc 01       	movw	r26, r24
    2184:	cb 01       	movw	r24, r22
    2186:	f8 01       	movw	r30, r16
    2188:	80 83       	st	Z, r24
    218a:	91 83       	std	Z+1, r25	; 0x01
    218c:	a2 83       	std	Z+2, r26	; 0x02
    218e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2190:	fe 01       	movw	r30, r28
    2192:	ff 96       	adiw	r30, 0x3f	; 63
    2194:	60 81       	ld	r22, Z
    2196:	71 81       	ldd	r23, Z+1	; 0x01
    2198:	82 81       	ldd	r24, Z+2	; 0x02
    219a:	93 81       	ldd	r25, Z+3	; 0x03
    219c:	20 e0       	ldi	r18, 0x00	; 0
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	40 e8       	ldi	r20, 0x80	; 128
    21a2:	5f e3       	ldi	r21, 0x3F	; 63
    21a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21a8:	88 23       	and	r24, r24
    21aa:	2c f4       	brge	.+10     	; 0x21b6 <CLCD_voidID+0xf3c>
		__ticks = 1;
    21ac:	81 e0       	ldi	r24, 0x01	; 1
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	9e af       	std	Y+62, r25	; 0x3e
    21b2:	8d af       	std	Y+61, r24	; 0x3d
    21b4:	46 c0       	rjmp	.+140    	; 0x2242 <CLCD_voidID+0xfc8>
	else if (__tmp > 65535)
    21b6:	fe 01       	movw	r30, r28
    21b8:	ff 96       	adiw	r30, 0x3f	; 63
    21ba:	60 81       	ld	r22, Z
    21bc:	71 81       	ldd	r23, Z+1	; 0x01
    21be:	82 81       	ldd	r24, Z+2	; 0x02
    21c0:	93 81       	ldd	r25, Z+3	; 0x03
    21c2:	20 e0       	ldi	r18, 0x00	; 0
    21c4:	3f ef       	ldi	r19, 0xFF	; 255
    21c6:	4f e7       	ldi	r20, 0x7F	; 127
    21c8:	57 e4       	ldi	r21, 0x47	; 71
    21ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21ce:	18 16       	cp	r1, r24
    21d0:	64 f5       	brge	.+88     	; 0x222a <CLCD_voidID+0xfb0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21d2:	fe 01       	movw	r30, r28
    21d4:	ed 5b       	subi	r30, 0xBD	; 189
    21d6:	ff 4f       	sbci	r31, 0xFF	; 255
    21d8:	60 81       	ld	r22, Z
    21da:	71 81       	ldd	r23, Z+1	; 0x01
    21dc:	82 81       	ldd	r24, Z+2	; 0x02
    21de:	93 81       	ldd	r25, Z+3	; 0x03
    21e0:	20 e0       	ldi	r18, 0x00	; 0
    21e2:	30 e0       	ldi	r19, 0x00	; 0
    21e4:	40 e2       	ldi	r20, 0x20	; 32
    21e6:	51 e4       	ldi	r21, 0x41	; 65
    21e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ec:	dc 01       	movw	r26, r24
    21ee:	cb 01       	movw	r24, r22
    21f0:	bc 01       	movw	r22, r24
    21f2:	cd 01       	movw	r24, r26
    21f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21f8:	dc 01       	movw	r26, r24
    21fa:	cb 01       	movw	r24, r22
    21fc:	9e af       	std	Y+62, r25	; 0x3e
    21fe:	8d af       	std	Y+61, r24	; 0x3d
    2200:	0f c0       	rjmp	.+30     	; 0x2220 <CLCD_voidID+0xfa6>
    2202:	80 e9       	ldi	r24, 0x90	; 144
    2204:	91 e0       	ldi	r25, 0x01	; 1
    2206:	9c af       	std	Y+60, r25	; 0x3c
    2208:	8b af       	std	Y+59, r24	; 0x3b
    220a:	8b ad       	ldd	r24, Y+59	; 0x3b
    220c:	9c ad       	ldd	r25, Y+60	; 0x3c
    220e:	01 97       	sbiw	r24, 0x01	; 1
    2210:	f1 f7       	brne	.-4      	; 0x220e <CLCD_voidID+0xf94>
    2212:	9c af       	std	Y+60, r25	; 0x3c
    2214:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2216:	8d ad       	ldd	r24, Y+61	; 0x3d
    2218:	9e ad       	ldd	r25, Y+62	; 0x3e
    221a:	01 97       	sbiw	r24, 0x01	; 1
    221c:	9e af       	std	Y+62, r25	; 0x3e
    221e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2220:	8d ad       	ldd	r24, Y+61	; 0x3d
    2222:	9e ad       	ldd	r25, Y+62	; 0x3e
    2224:	00 97       	sbiw	r24, 0x00	; 0
    2226:	69 f7       	brne	.-38     	; 0x2202 <CLCD_voidID+0xf88>
    2228:	16 c0       	rjmp	.+44     	; 0x2256 <CLCD_voidID+0xfdc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    222a:	fe 01       	movw	r30, r28
    222c:	ff 96       	adiw	r30, 0x3f	; 63
    222e:	60 81       	ld	r22, Z
    2230:	71 81       	ldd	r23, Z+1	; 0x01
    2232:	82 81       	ldd	r24, Z+2	; 0x02
    2234:	93 81       	ldd	r25, Z+3	; 0x03
    2236:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    223a:	dc 01       	movw	r26, r24
    223c:	cb 01       	movw	r24, r22
    223e:	9e af       	std	Y+62, r25	; 0x3e
    2240:	8d af       	std	Y+61, r24	; 0x3d
    2242:	8d ad       	ldd	r24, Y+61	; 0x3d
    2244:	9e ad       	ldd	r25, Y+62	; 0x3e
    2246:	9a af       	std	Y+58, r25	; 0x3a
    2248:	89 af       	std	Y+57, r24	; 0x39
    224a:	89 ad       	ldd	r24, Y+57	; 0x39
    224c:	9a ad       	ldd	r25, Y+58	; 0x3a
    224e:	01 97       	sbiw	r24, 0x01	; 1
    2250:	f1 f7       	brne	.-4      	; 0x224e <CLCD_voidID+0xfd4>
    2252:	9a af       	std	Y+58, r25	; 0x3a
    2254:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(250);
				CLCD_voidGoToXY(Local_u8XPos,1);
    2256:	fe 01       	movw	r30, r28
    2258:	e5 55       	subi	r30, 0x55	; 85
    225a:	ff 4f       	sbci	r31, 0xFF	; 255
    225c:	80 81       	ld	r24, Z
    225e:	61 e0       	ldi	r22, 0x01	; 1
    2260:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <CLCD_voidGoToXY>
				CLCD_voidSendData('*');
    2264:	8a e2       	ldi	r24, 0x2A	; 42
    2266:	0e 94 8f 1b 	call	0x371e	; 0x371e <CLCD_voidSendData>
				Local_u8PasswordEntry[Local_u8Iterator] = '3' ;
    226a:	fe 01       	movw	r30, r28
    226c:	e4 55       	subi	r30, 0x54	; 84
    226e:	ff 4f       	sbci	r31, 0xFF	; 255
    2270:	80 81       	ld	r24, Z
    2272:	28 2f       	mov	r18, r24
    2274:	30 e0       	ldi	r19, 0x00	; 0
    2276:	ce 01       	movw	r24, r28
    2278:	89 54       	subi	r24, 0x49	; 73
    227a:	9f 4f       	sbci	r25, 0xFF	; 255
    227c:	fc 01       	movw	r30, r24
    227e:	e2 0f       	add	r30, r18
    2280:	f3 1f       	adc	r31, r19
    2282:	83 e3       	ldi	r24, 0x33	; 51
    2284:	80 83       	st	Z, r24
				Local_u8IDCounter ++ ;
    2286:	de 01       	movw	r26, r28
    2288:	a3 55       	subi	r26, 0x53	; 83
    228a:	bf 4f       	sbci	r27, 0xFF	; 255
    228c:	fe 01       	movw	r30, r28
    228e:	e3 55       	subi	r30, 0x53	; 83
    2290:	ff 4f       	sbci	r31, 0xFF	; 255
    2292:	80 81       	ld	r24, Z
    2294:	8f 5f       	subi	r24, 0xFF	; 255
    2296:	8c 93       	st	X, r24
				Local_u8Iterator  ++ ;
    2298:	de 01       	movw	r26, r28
    229a:	a4 55       	subi	r26, 0x54	; 84
    229c:	bf 4f       	sbci	r27, 0xFF	; 255
    229e:	fe 01       	movw	r30, r28
    22a0:	e4 55       	subi	r30, 0x54	; 84
    22a2:	ff 4f       	sbci	r31, 0xFF	; 255
    22a4:	80 81       	ld	r24, Z
    22a6:	8f 5f       	subi	r24, 0xFF	; 255
    22a8:	8c 93       	st	X, r24
				Local_u8XPos 	  ++ ;
    22aa:	de 01       	movw	r26, r28
    22ac:	a5 55       	subi	r26, 0x55	; 85
    22ae:	bf 4f       	sbci	r27, 0xFF	; 255
    22b0:	fe 01       	movw	r30, r28
    22b2:	e5 55       	subi	r30, 0x55	; 85
    22b4:	ff 4f       	sbci	r31, 0xFF	; 255
    22b6:	80 81       	ld	r24, Z
    22b8:	8f 5f       	subi	r24, 0xFF	; 255
    22ba:	8c 93       	st	X, r24
    22bc:	b4 c0       	rjmp	.+360    	; 0x2426 <CLCD_voidID+0x11ac>
			}
			else if (Local_Pin5Reading == DIO_PIN_LOW)
    22be:	fe 01       	movw	r30, r28
    22c0:	e2 54       	subi	r30, 0x42	; 66
    22c2:	ff 4f       	sbci	r31, 0xFF	; 255
    22c4:	80 81       	ld	r24, Z
    22c6:	88 23       	and	r24, r24
    22c8:	09 f0       	breq	.+2      	; 0x22cc <CLCD_voidID+0x1052>
    22ca:	ad c0       	rjmp	.+346    	; 0x2426 <CLCD_voidID+0x11ac>
			{
				voidSendNumber(4);
    22cc:	64 e0       	ldi	r22, 0x04	; 4
    22ce:	70 e0       	ldi	r23, 0x00	; 0
    22d0:	80 e0       	ldi	r24, 0x00	; 0
    22d2:	90 e0       	ldi	r25, 0x00	; 0
    22d4:	0e 94 82 1c 	call	0x3904	; 0x3904 <voidSendNumber>
				OpenSound();
    22d8:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <OpenSound>
    22dc:	80 e0       	ldi	r24, 0x00	; 0
    22de:	90 e0       	ldi	r25, 0x00	; 0
    22e0:	aa e7       	ldi	r26, 0x7A	; 122
    22e2:	b3 e4       	ldi	r27, 0x43	; 67
    22e4:	8d ab       	std	Y+53, r24	; 0x35
    22e6:	9e ab       	std	Y+54, r25	; 0x36
    22e8:	af ab       	std	Y+55, r26	; 0x37
    22ea:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22ec:	6d a9       	ldd	r22, Y+53	; 0x35
    22ee:	7e a9       	ldd	r23, Y+54	; 0x36
    22f0:	8f a9       	ldd	r24, Y+55	; 0x37
    22f2:	98 ad       	ldd	r25, Y+56	; 0x38
    22f4:	20 e0       	ldi	r18, 0x00	; 0
    22f6:	30 e0       	ldi	r19, 0x00	; 0
    22f8:	4a e7       	ldi	r20, 0x7A	; 122
    22fa:	55 e4       	ldi	r21, 0x45	; 69
    22fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2300:	dc 01       	movw	r26, r24
    2302:	cb 01       	movw	r24, r22
    2304:	89 ab       	std	Y+49, r24	; 0x31
    2306:	9a ab       	std	Y+50, r25	; 0x32
    2308:	ab ab       	std	Y+51, r26	; 0x33
    230a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    230c:	69 a9       	ldd	r22, Y+49	; 0x31
    230e:	7a a9       	ldd	r23, Y+50	; 0x32
    2310:	8b a9       	ldd	r24, Y+51	; 0x33
    2312:	9c a9       	ldd	r25, Y+52	; 0x34
    2314:	20 e0       	ldi	r18, 0x00	; 0
    2316:	30 e0       	ldi	r19, 0x00	; 0
    2318:	40 e8       	ldi	r20, 0x80	; 128
    231a:	5f e3       	ldi	r21, 0x3F	; 63
    231c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2320:	88 23       	and	r24, r24
    2322:	2c f4       	brge	.+10     	; 0x232e <CLCD_voidID+0x10b4>
		__ticks = 1;
    2324:	81 e0       	ldi	r24, 0x01	; 1
    2326:	90 e0       	ldi	r25, 0x00	; 0
    2328:	98 ab       	std	Y+48, r25	; 0x30
    232a:	8f a7       	std	Y+47, r24	; 0x2f
    232c:	3f c0       	rjmp	.+126    	; 0x23ac <CLCD_voidID+0x1132>
	else if (__tmp > 65535)
    232e:	69 a9       	ldd	r22, Y+49	; 0x31
    2330:	7a a9       	ldd	r23, Y+50	; 0x32
    2332:	8b a9       	ldd	r24, Y+51	; 0x33
    2334:	9c a9       	ldd	r25, Y+52	; 0x34
    2336:	20 e0       	ldi	r18, 0x00	; 0
    2338:	3f ef       	ldi	r19, 0xFF	; 255
    233a:	4f e7       	ldi	r20, 0x7F	; 127
    233c:	57 e4       	ldi	r21, 0x47	; 71
    233e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2342:	18 16       	cp	r1, r24
    2344:	4c f5       	brge	.+82     	; 0x2398 <CLCD_voidID+0x111e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2346:	6d a9       	ldd	r22, Y+53	; 0x35
    2348:	7e a9       	ldd	r23, Y+54	; 0x36
    234a:	8f a9       	ldd	r24, Y+55	; 0x37
    234c:	98 ad       	ldd	r25, Y+56	; 0x38
    234e:	20 e0       	ldi	r18, 0x00	; 0
    2350:	30 e0       	ldi	r19, 0x00	; 0
    2352:	40 e2       	ldi	r20, 0x20	; 32
    2354:	51 e4       	ldi	r21, 0x41	; 65
    2356:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    235a:	dc 01       	movw	r26, r24
    235c:	cb 01       	movw	r24, r22
    235e:	bc 01       	movw	r22, r24
    2360:	cd 01       	movw	r24, r26
    2362:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2366:	dc 01       	movw	r26, r24
    2368:	cb 01       	movw	r24, r22
    236a:	98 ab       	std	Y+48, r25	; 0x30
    236c:	8f a7       	std	Y+47, r24	; 0x2f
    236e:	0f c0       	rjmp	.+30     	; 0x238e <CLCD_voidID+0x1114>
    2370:	80 e9       	ldi	r24, 0x90	; 144
    2372:	91 e0       	ldi	r25, 0x01	; 1
    2374:	9e a7       	std	Y+46, r25	; 0x2e
    2376:	8d a7       	std	Y+45, r24	; 0x2d
    2378:	8d a5       	ldd	r24, Y+45	; 0x2d
    237a:	9e a5       	ldd	r25, Y+46	; 0x2e
    237c:	01 97       	sbiw	r24, 0x01	; 1
    237e:	f1 f7       	brne	.-4      	; 0x237c <CLCD_voidID+0x1102>
    2380:	9e a7       	std	Y+46, r25	; 0x2e
    2382:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2384:	8f a5       	ldd	r24, Y+47	; 0x2f
    2386:	98 a9       	ldd	r25, Y+48	; 0x30
    2388:	01 97       	sbiw	r24, 0x01	; 1
    238a:	98 ab       	std	Y+48, r25	; 0x30
    238c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    238e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2390:	98 a9       	ldd	r25, Y+48	; 0x30
    2392:	00 97       	sbiw	r24, 0x00	; 0
    2394:	69 f7       	brne	.-38     	; 0x2370 <CLCD_voidID+0x10f6>
    2396:	14 c0       	rjmp	.+40     	; 0x23c0 <CLCD_voidID+0x1146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2398:	69 a9       	ldd	r22, Y+49	; 0x31
    239a:	7a a9       	ldd	r23, Y+50	; 0x32
    239c:	8b a9       	ldd	r24, Y+51	; 0x33
    239e:	9c a9       	ldd	r25, Y+52	; 0x34
    23a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23a4:	dc 01       	movw	r26, r24
    23a6:	cb 01       	movw	r24, r22
    23a8:	98 ab       	std	Y+48, r25	; 0x30
    23aa:	8f a7       	std	Y+47, r24	; 0x2f
    23ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    23ae:	98 a9       	ldd	r25, Y+48	; 0x30
    23b0:	9c a7       	std	Y+44, r25	; 0x2c
    23b2:	8b a7       	std	Y+43, r24	; 0x2b
    23b4:	8b a5       	ldd	r24, Y+43	; 0x2b
    23b6:	9c a5       	ldd	r25, Y+44	; 0x2c
    23b8:	01 97       	sbiw	r24, 0x01	; 1
    23ba:	f1 f7       	brne	.-4      	; 0x23b8 <CLCD_voidID+0x113e>
    23bc:	9c a7       	std	Y+44, r25	; 0x2c
    23be:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(250);
				CLCD_voidGoToXY(Local_u8XPos,1);
    23c0:	fe 01       	movw	r30, r28
    23c2:	e5 55       	subi	r30, 0x55	; 85
    23c4:	ff 4f       	sbci	r31, 0xFF	; 255
    23c6:	80 81       	ld	r24, Z
    23c8:	61 e0       	ldi	r22, 0x01	; 1
    23ca:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <CLCD_voidGoToXY>
				CLCD_voidSendData('*');
    23ce:	8a e2       	ldi	r24, 0x2A	; 42
    23d0:	0e 94 8f 1b 	call	0x371e	; 0x371e <CLCD_voidSendData>
				Local_u8PasswordEntry[Local_u8Iterator] = '4' ;
    23d4:	fe 01       	movw	r30, r28
    23d6:	e4 55       	subi	r30, 0x54	; 84
    23d8:	ff 4f       	sbci	r31, 0xFF	; 255
    23da:	80 81       	ld	r24, Z
    23dc:	28 2f       	mov	r18, r24
    23de:	30 e0       	ldi	r19, 0x00	; 0
    23e0:	ce 01       	movw	r24, r28
    23e2:	89 54       	subi	r24, 0x49	; 73
    23e4:	9f 4f       	sbci	r25, 0xFF	; 255
    23e6:	fc 01       	movw	r30, r24
    23e8:	e2 0f       	add	r30, r18
    23ea:	f3 1f       	adc	r31, r19
    23ec:	84 e3       	ldi	r24, 0x34	; 52
    23ee:	80 83       	st	Z, r24
				Local_u8IDCounter ++ ;
    23f0:	de 01       	movw	r26, r28
    23f2:	a3 55       	subi	r26, 0x53	; 83
    23f4:	bf 4f       	sbci	r27, 0xFF	; 255
    23f6:	fe 01       	movw	r30, r28
    23f8:	e3 55       	subi	r30, 0x53	; 83
    23fa:	ff 4f       	sbci	r31, 0xFF	; 255
    23fc:	80 81       	ld	r24, Z
    23fe:	8f 5f       	subi	r24, 0xFF	; 255
    2400:	8c 93       	st	X, r24
				Local_u8Iterator  ++ ;
    2402:	de 01       	movw	r26, r28
    2404:	a4 55       	subi	r26, 0x54	; 84
    2406:	bf 4f       	sbci	r27, 0xFF	; 255
    2408:	fe 01       	movw	r30, r28
    240a:	e4 55       	subi	r30, 0x54	; 84
    240c:	ff 4f       	sbci	r31, 0xFF	; 255
    240e:	80 81       	ld	r24, Z
    2410:	8f 5f       	subi	r24, 0xFF	; 255
    2412:	8c 93       	st	X, r24
				Local_u8XPos 	  ++ ;
    2414:	de 01       	movw	r26, r28
    2416:	a5 55       	subi	r26, 0x55	; 85
    2418:	bf 4f       	sbci	r27, 0xFF	; 255
    241a:	fe 01       	movw	r30, r28
    241c:	e5 55       	subi	r30, 0x55	; 85
    241e:	ff 4f       	sbci	r31, 0xFF	; 255
    2420:	80 81       	ld	r24, Z
    2422:	8f 5f       	subi	r24, 0xFF	; 255
    2424:	8c 93       	st	X, r24
		voidSendNumber(Local_u8TrialCounter);
		CLCD_voidGoToXY(0u,1u);
		Local_u8Iterator = 0 ;
		Local_u8XPos     = 0 ;
		Local_u8IDCounter= 0 ;
		while (Local_u8IDCounter != 4)
    2426:	fe 01       	movw	r30, r28
    2428:	e3 55       	subi	r30, 0x53	; 83
    242a:	ff 4f       	sbci	r31, 0xFF	; 255
    242c:	80 81       	ld	r24, Z
    242e:	84 30       	cpi	r24, 0x04	; 4
    2430:	09 f0       	breq	.+2      	; 0x2434 <CLCD_voidID+0x11ba>
    2432:	71 cc       	rjmp	.-1822   	; 0x1d16 <CLCD_voidID+0xa9c>
									// DO NOTHING
			}

		}
				///////////////////////////////////////////////////////////
		if (Local_u8IDCounter == 4)
    2434:	fe 01       	movw	r30, r28
    2436:	e3 55       	subi	r30, 0x53	; 83
    2438:	ff 4f       	sbci	r31, 0xFF	; 255
    243a:	80 81       	ld	r24, Z
    243c:	84 30       	cpi	r24, 0x04	; 4
    243e:	09 f0       	breq	.+2      	; 0x2442 <CLCD_voidID+0x11c8>
    2440:	0a c2       	rjmp	.+1044   	; 0x2856 <CLCD_voidID+0x15dc>
		{
			Local_u8Flag = 0 ;
    2442:	fe 01       	movw	r30, r28
    2444:	e6 55       	subi	r30, 0x56	; 86
    2446:	ff 4f       	sbci	r31, 0xFF	; 255
    2448:	10 82       	st	Z, r1
			for (Local_u8PasswordCheckingIterator = 0 ; Local_u8PasswordCheckingIterator<4 ; Local_u8PasswordCheckingIterator ++)
    244a:	fe 01       	movw	r30, r28
    244c:	e7 55       	subi	r30, 0x57	; 87
    244e:	ff 4f       	sbci	r31, 0xFF	; 255
    2450:	10 82       	st	Z, r1
    2452:	2e c0       	rjmp	.+92     	; 0x24b0 <CLCD_voidID+0x1236>
			{
				if (Local_u8PasswordEntry[Local_u8PasswordCheckingIterator] == Local_u8Password[Local_u8PasswordCheckingIterator])
    2454:	fe 01       	movw	r30, r28
    2456:	e7 55       	subi	r30, 0x57	; 87
    2458:	ff 4f       	sbci	r31, 0xFF	; 255
    245a:	80 81       	ld	r24, Z
    245c:	28 2f       	mov	r18, r24
    245e:	30 e0       	ldi	r19, 0x00	; 0
    2460:	ce 01       	movw	r24, r28
    2462:	89 54       	subi	r24, 0x49	; 73
    2464:	9f 4f       	sbci	r25, 0xFF	; 255
    2466:	fc 01       	movw	r30, r24
    2468:	e2 0f       	add	r30, r18
    246a:	f3 1f       	adc	r31, r19
    246c:	40 81       	ld	r20, Z
    246e:	fe 01       	movw	r30, r28
    2470:	e7 55       	subi	r30, 0x57	; 87
    2472:	ff 4f       	sbci	r31, 0xFF	; 255
    2474:	80 81       	ld	r24, Z
    2476:	28 2f       	mov	r18, r24
    2478:	30 e0       	ldi	r19, 0x00	; 0
    247a:	ce 01       	movw	r24, r28
    247c:	8d 54       	subi	r24, 0x4D	; 77
    247e:	9f 4f       	sbci	r25, 0xFF	; 255
    2480:	fc 01       	movw	r30, r24
    2482:	e2 0f       	add	r30, r18
    2484:	f3 1f       	adc	r31, r19
    2486:	80 81       	ld	r24, Z
    2488:	48 17       	cp	r20, r24
    248a:	49 f4       	brne	.+18     	; 0x249e <CLCD_voidID+0x1224>
				{
					Local_u8Flag ++ ;
    248c:	de 01       	movw	r26, r28
    248e:	a6 55       	subi	r26, 0x56	; 86
    2490:	bf 4f       	sbci	r27, 0xFF	; 255
    2492:	fe 01       	movw	r30, r28
    2494:	e6 55       	subi	r30, 0x56	; 86
    2496:	ff 4f       	sbci	r31, 0xFF	; 255
    2498:	80 81       	ld	r24, Z
    249a:	8f 5f       	subi	r24, 0xFF	; 255
    249c:	8c 93       	st	X, r24
		}
				///////////////////////////////////////////////////////////
		if (Local_u8IDCounter == 4)
		{
			Local_u8Flag = 0 ;
			for (Local_u8PasswordCheckingIterator = 0 ; Local_u8PasswordCheckingIterator<4 ; Local_u8PasswordCheckingIterator ++)
    249e:	de 01       	movw	r26, r28
    24a0:	a7 55       	subi	r26, 0x57	; 87
    24a2:	bf 4f       	sbci	r27, 0xFF	; 255
    24a4:	fe 01       	movw	r30, r28
    24a6:	e7 55       	subi	r30, 0x57	; 87
    24a8:	ff 4f       	sbci	r31, 0xFF	; 255
    24aa:	80 81       	ld	r24, Z
    24ac:	8f 5f       	subi	r24, 0xFF	; 255
    24ae:	8c 93       	st	X, r24
    24b0:	fe 01       	movw	r30, r28
    24b2:	e7 55       	subi	r30, 0x57	; 87
    24b4:	ff 4f       	sbci	r31, 0xFF	; 255
    24b6:	80 81       	ld	r24, Z
    24b8:	84 30       	cpi	r24, 0x04	; 4
    24ba:	60 f2       	brcs	.-104    	; 0x2454 <CLCD_voidID+0x11da>
				if (Local_u8PasswordEntry[Local_u8PasswordCheckingIterator] == Local_u8Password[Local_u8PasswordCheckingIterator])
				{
					Local_u8Flag ++ ;
				}
			}
			if ( Local_u8Flag == 4 )
    24bc:	fe 01       	movw	r30, r28
    24be:	e6 55       	subi	r30, 0x56	; 86
    24c0:	ff 4f       	sbci	r31, 0xFF	; 255
    24c2:	80 81       	ld	r24, Z
    24c4:	84 30       	cpi	r24, 0x04	; 4
    24c6:	09 f0       	breq	.+2      	; 0x24ca <CLCD_voidID+0x1250>
    24c8:	41 c1       	rjmp	.+642    	; 0x274c <CLCD_voidID+0x14d2>
			{
				CLCD_voidSendCommand(1);
    24ca:	81 e0       	ldi	r24, 0x01	; 1
    24cc:	0e 94 74 1b 	call	0x36e8	; 0x36e8 <CLCD_voidSendCommand>
				voidSendString("   Welcome");
    24d0:	81 e9       	ldi	r24, 0x91	; 145
    24d2:	90 e0       	ldi	r25, 0x00	; 0
    24d4:	0e 94 44 1c 	call	0x3888	; 0x3888 <voidSendString>
				CLCD_voidGoToXY(2U,1U);
    24d8:	82 e0       	ldi	r24, 0x02	; 2
    24da:	61 e0       	ldi	r22, 0x01	; 1
    24dc:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <CLCD_voidGoToXY>
				voidSendString("ID : ");
    24e0:	8c e9       	ldi	r24, 0x9C	; 156
    24e2:	90 e0       	ldi	r25, 0x00	; 0
    24e4:	0e 94 44 1c 	call	0x3888	; 0x3888 <voidSendString>
				for (Local_u8Iterator = 0 ; Local_u8Iterator < 4 ; Local_u8Iterator ++)
    24e8:	fe 01       	movw	r30, r28
    24ea:	e4 55       	subi	r30, 0x54	; 84
    24ec:	ff 4f       	sbci	r31, 0xFF	; 255
    24ee:	10 82       	st	Z, r1
    24f0:	18 c0       	rjmp	.+48     	; 0x2522 <CLCD_voidID+0x12a8>
				{
					CLCD_voidSendData(Local_u8ID[Local_u8Iterator]);
    24f2:	fe 01       	movw	r30, r28
    24f4:	e4 55       	subi	r30, 0x54	; 84
    24f6:	ff 4f       	sbci	r31, 0xFF	; 255
    24f8:	80 81       	ld	r24, Z
    24fa:	28 2f       	mov	r18, r24
    24fc:	30 e0       	ldi	r19, 0x00	; 0
    24fe:	ce 01       	movw	r24, r28
    2500:	81 55       	subi	r24, 0x51	; 81
    2502:	9f 4f       	sbci	r25, 0xFF	; 255
    2504:	fc 01       	movw	r30, r24
    2506:	e2 0f       	add	r30, r18
    2508:	f3 1f       	adc	r31, r19
    250a:	80 81       	ld	r24, Z
    250c:	0e 94 8f 1b 	call	0x371e	; 0x371e <CLCD_voidSendData>
			{
				CLCD_voidSendCommand(1);
				voidSendString("   Welcome");
				CLCD_voidGoToXY(2U,1U);
				voidSendString("ID : ");
				for (Local_u8Iterator = 0 ; Local_u8Iterator < 4 ; Local_u8Iterator ++)
    2510:	de 01       	movw	r26, r28
    2512:	a4 55       	subi	r26, 0x54	; 84
    2514:	bf 4f       	sbci	r27, 0xFF	; 255
    2516:	fe 01       	movw	r30, r28
    2518:	e4 55       	subi	r30, 0x54	; 84
    251a:	ff 4f       	sbci	r31, 0xFF	; 255
    251c:	80 81       	ld	r24, Z
    251e:	8f 5f       	subi	r24, 0xFF	; 255
    2520:	8c 93       	st	X, r24
    2522:	fe 01       	movw	r30, r28
    2524:	e4 55       	subi	r30, 0x54	; 84
    2526:	ff 4f       	sbci	r31, 0xFF	; 255
    2528:	80 81       	ld	r24, Z
    252a:	84 30       	cpi	r24, 0x04	; 4
    252c:	10 f3       	brcs	.-60     	; 0x24f2 <CLCD_voidID+0x1278>
    252e:	80 e0       	ldi	r24, 0x00	; 0
    2530:	90 e0       	ldi	r25, 0x00	; 0
    2532:	aa e7       	ldi	r26, 0x7A	; 122
    2534:	b4 e4       	ldi	r27, 0x44	; 68
    2536:	8f a3       	std	Y+39, r24	; 0x27
    2538:	98 a7       	std	Y+40, r25	; 0x28
    253a:	a9 a7       	std	Y+41, r26	; 0x29
    253c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    253e:	6f a1       	ldd	r22, Y+39	; 0x27
    2540:	78 a5       	ldd	r23, Y+40	; 0x28
    2542:	89 a5       	ldd	r24, Y+41	; 0x29
    2544:	9a a5       	ldd	r25, Y+42	; 0x2a
    2546:	20 e0       	ldi	r18, 0x00	; 0
    2548:	30 e0       	ldi	r19, 0x00	; 0
    254a:	4a e7       	ldi	r20, 0x7A	; 122
    254c:	55 e4       	ldi	r21, 0x45	; 69
    254e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2552:	dc 01       	movw	r26, r24
    2554:	cb 01       	movw	r24, r22
    2556:	8b a3       	std	Y+35, r24	; 0x23
    2558:	9c a3       	std	Y+36, r25	; 0x24
    255a:	ad a3       	std	Y+37, r26	; 0x25
    255c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    255e:	6b a1       	ldd	r22, Y+35	; 0x23
    2560:	7c a1       	ldd	r23, Y+36	; 0x24
    2562:	8d a1       	ldd	r24, Y+37	; 0x25
    2564:	9e a1       	ldd	r25, Y+38	; 0x26
    2566:	20 e0       	ldi	r18, 0x00	; 0
    2568:	30 e0       	ldi	r19, 0x00	; 0
    256a:	40 e8       	ldi	r20, 0x80	; 128
    256c:	5f e3       	ldi	r21, 0x3F	; 63
    256e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2572:	88 23       	and	r24, r24
    2574:	2c f4       	brge	.+10     	; 0x2580 <CLCD_voidID+0x1306>
		__ticks = 1;
    2576:	81 e0       	ldi	r24, 0x01	; 1
    2578:	90 e0       	ldi	r25, 0x00	; 0
    257a:	9a a3       	std	Y+34, r25	; 0x22
    257c:	89 a3       	std	Y+33, r24	; 0x21
    257e:	3f c0       	rjmp	.+126    	; 0x25fe <CLCD_voidID+0x1384>
	else if (__tmp > 65535)
    2580:	6b a1       	ldd	r22, Y+35	; 0x23
    2582:	7c a1       	ldd	r23, Y+36	; 0x24
    2584:	8d a1       	ldd	r24, Y+37	; 0x25
    2586:	9e a1       	ldd	r25, Y+38	; 0x26
    2588:	20 e0       	ldi	r18, 0x00	; 0
    258a:	3f ef       	ldi	r19, 0xFF	; 255
    258c:	4f e7       	ldi	r20, 0x7F	; 127
    258e:	57 e4       	ldi	r21, 0x47	; 71
    2590:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2594:	18 16       	cp	r1, r24
    2596:	4c f5       	brge	.+82     	; 0x25ea <CLCD_voidID+0x1370>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2598:	6f a1       	ldd	r22, Y+39	; 0x27
    259a:	78 a5       	ldd	r23, Y+40	; 0x28
    259c:	89 a5       	ldd	r24, Y+41	; 0x29
    259e:	9a a5       	ldd	r25, Y+42	; 0x2a
    25a0:	20 e0       	ldi	r18, 0x00	; 0
    25a2:	30 e0       	ldi	r19, 0x00	; 0
    25a4:	40 e2       	ldi	r20, 0x20	; 32
    25a6:	51 e4       	ldi	r21, 0x41	; 65
    25a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ac:	dc 01       	movw	r26, r24
    25ae:	cb 01       	movw	r24, r22
    25b0:	bc 01       	movw	r22, r24
    25b2:	cd 01       	movw	r24, r26
    25b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25b8:	dc 01       	movw	r26, r24
    25ba:	cb 01       	movw	r24, r22
    25bc:	9a a3       	std	Y+34, r25	; 0x22
    25be:	89 a3       	std	Y+33, r24	; 0x21
    25c0:	0f c0       	rjmp	.+30     	; 0x25e0 <CLCD_voidID+0x1366>
    25c2:	80 e9       	ldi	r24, 0x90	; 144
    25c4:	91 e0       	ldi	r25, 0x01	; 1
    25c6:	98 a3       	std	Y+32, r25	; 0x20
    25c8:	8f 8f       	std	Y+31, r24	; 0x1f
    25ca:	8f 8d       	ldd	r24, Y+31	; 0x1f
    25cc:	98 a1       	ldd	r25, Y+32	; 0x20
    25ce:	01 97       	sbiw	r24, 0x01	; 1
    25d0:	f1 f7       	brne	.-4      	; 0x25ce <CLCD_voidID+0x1354>
    25d2:	98 a3       	std	Y+32, r25	; 0x20
    25d4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25d6:	89 a1       	ldd	r24, Y+33	; 0x21
    25d8:	9a a1       	ldd	r25, Y+34	; 0x22
    25da:	01 97       	sbiw	r24, 0x01	; 1
    25dc:	9a a3       	std	Y+34, r25	; 0x22
    25de:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25e0:	89 a1       	ldd	r24, Y+33	; 0x21
    25e2:	9a a1       	ldd	r25, Y+34	; 0x22
    25e4:	00 97       	sbiw	r24, 0x00	; 0
    25e6:	69 f7       	brne	.-38     	; 0x25c2 <CLCD_voidID+0x1348>
    25e8:	14 c0       	rjmp	.+40     	; 0x2612 <CLCD_voidID+0x1398>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25ea:	6b a1       	ldd	r22, Y+35	; 0x23
    25ec:	7c a1       	ldd	r23, Y+36	; 0x24
    25ee:	8d a1       	ldd	r24, Y+37	; 0x25
    25f0:	9e a1       	ldd	r25, Y+38	; 0x26
    25f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25f6:	dc 01       	movw	r26, r24
    25f8:	cb 01       	movw	r24, r22
    25fa:	9a a3       	std	Y+34, r25	; 0x22
    25fc:	89 a3       	std	Y+33, r24	; 0x21
    25fe:	89 a1       	ldd	r24, Y+33	; 0x21
    2600:	9a a1       	ldd	r25, Y+34	; 0x22
    2602:	9e 8f       	std	Y+30, r25	; 0x1e
    2604:	8d 8f       	std	Y+29, r24	; 0x1d
    2606:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2608:	9e 8d       	ldd	r25, Y+30	; 0x1e
    260a:	01 97       	sbiw	r24, 0x01	; 1
    260c:	f1 f7       	brne	.-4      	; 0x260a <CLCD_voidID+0x1390>
    260e:	9e 8f       	std	Y+30, r25	; 0x1e
    2610:	8d 8f       	std	Y+29, r24	; 0x1d
				{
					CLCD_voidSendData(Local_u8ID[Local_u8Iterator]);
				}
				_delay_ms(1000);
				CLCD_voidSendCommand(1);
    2612:	81 e0       	ldi	r24, 0x01	; 1
    2614:	0e 94 74 1b 	call	0x36e8	; 0x36e8 <CLCD_voidSendCommand>
				voidSendString("System Activated");
    2618:	82 ea       	ldi	r24, 0xA2	; 162
    261a:	90 e0       	ldi	r25, 0x00	; 0
    261c:	0e 94 44 1c 	call	0x3888	; 0x3888 <voidSendString>
				CLCD_voidGoToXY(0U,1U);
    2620:	80 e0       	ldi	r24, 0x00	; 0
    2622:	61 e0       	ldi	r22, 0x01	; 1
    2624:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <CLCD_voidGoToXY>
				voidSendString("TEMP=   C  ");
    2628:	83 eb       	ldi	r24, 0xB3	; 179
    262a:	90 e0       	ldi	r25, 0x00	; 0
    262c:	0e 94 44 1c 	call	0x3888	; 0x3888 <voidSendString>
				voidSendString("LED=" ) ;
    2630:	8f eb       	ldi	r24, 0xBF	; 191
    2632:	90 e0       	ldi	r25, 0x00	; 0
    2634:	0e 94 44 1c 	call	0x3888	; 0x3888 <voidSendString>
    2638:	80 e0       	ldi	r24, 0x00	; 0
    263a:	90 e0       	ldi	r25, 0x00	; 0
    263c:	aa e7       	ldi	r26, 0x7A	; 122
    263e:	b4 e4       	ldi	r27, 0x44	; 68
    2640:	89 8f       	std	Y+25, r24	; 0x19
    2642:	9a 8f       	std	Y+26, r25	; 0x1a
    2644:	ab 8f       	std	Y+27, r26	; 0x1b
    2646:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2648:	69 8d       	ldd	r22, Y+25	; 0x19
    264a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    264c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    264e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2650:	20 e0       	ldi	r18, 0x00	; 0
    2652:	30 e0       	ldi	r19, 0x00	; 0
    2654:	4a e7       	ldi	r20, 0x7A	; 122
    2656:	55 e4       	ldi	r21, 0x45	; 69
    2658:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    265c:	dc 01       	movw	r26, r24
    265e:	cb 01       	movw	r24, r22
    2660:	8d 8b       	std	Y+21, r24	; 0x15
    2662:	9e 8b       	std	Y+22, r25	; 0x16
    2664:	af 8b       	std	Y+23, r26	; 0x17
    2666:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2668:	6d 89       	ldd	r22, Y+21	; 0x15
    266a:	7e 89       	ldd	r23, Y+22	; 0x16
    266c:	8f 89       	ldd	r24, Y+23	; 0x17
    266e:	98 8d       	ldd	r25, Y+24	; 0x18
    2670:	20 e0       	ldi	r18, 0x00	; 0
    2672:	30 e0       	ldi	r19, 0x00	; 0
    2674:	40 e8       	ldi	r20, 0x80	; 128
    2676:	5f e3       	ldi	r21, 0x3F	; 63
    2678:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    267c:	88 23       	and	r24, r24
    267e:	2c f4       	brge	.+10     	; 0x268a <CLCD_voidID+0x1410>
		__ticks = 1;
    2680:	81 e0       	ldi	r24, 0x01	; 1
    2682:	90 e0       	ldi	r25, 0x00	; 0
    2684:	9c 8b       	std	Y+20, r25	; 0x14
    2686:	8b 8b       	std	Y+19, r24	; 0x13
    2688:	3f c0       	rjmp	.+126    	; 0x2708 <CLCD_voidID+0x148e>
	else if (__tmp > 65535)
    268a:	6d 89       	ldd	r22, Y+21	; 0x15
    268c:	7e 89       	ldd	r23, Y+22	; 0x16
    268e:	8f 89       	ldd	r24, Y+23	; 0x17
    2690:	98 8d       	ldd	r25, Y+24	; 0x18
    2692:	20 e0       	ldi	r18, 0x00	; 0
    2694:	3f ef       	ldi	r19, 0xFF	; 255
    2696:	4f e7       	ldi	r20, 0x7F	; 127
    2698:	57 e4       	ldi	r21, 0x47	; 71
    269a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    269e:	18 16       	cp	r1, r24
    26a0:	4c f5       	brge	.+82     	; 0x26f4 <CLCD_voidID+0x147a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26a2:	69 8d       	ldd	r22, Y+25	; 0x19
    26a4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26a8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26aa:	20 e0       	ldi	r18, 0x00	; 0
    26ac:	30 e0       	ldi	r19, 0x00	; 0
    26ae:	40 e2       	ldi	r20, 0x20	; 32
    26b0:	51 e4       	ldi	r21, 0x41	; 65
    26b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26b6:	dc 01       	movw	r26, r24
    26b8:	cb 01       	movw	r24, r22
    26ba:	bc 01       	movw	r22, r24
    26bc:	cd 01       	movw	r24, r26
    26be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26c2:	dc 01       	movw	r26, r24
    26c4:	cb 01       	movw	r24, r22
    26c6:	9c 8b       	std	Y+20, r25	; 0x14
    26c8:	8b 8b       	std	Y+19, r24	; 0x13
    26ca:	0f c0       	rjmp	.+30     	; 0x26ea <CLCD_voidID+0x1470>
    26cc:	80 e9       	ldi	r24, 0x90	; 144
    26ce:	91 e0       	ldi	r25, 0x01	; 1
    26d0:	9a 8b       	std	Y+18, r25	; 0x12
    26d2:	89 8b       	std	Y+17, r24	; 0x11
    26d4:	89 89       	ldd	r24, Y+17	; 0x11
    26d6:	9a 89       	ldd	r25, Y+18	; 0x12
    26d8:	01 97       	sbiw	r24, 0x01	; 1
    26da:	f1 f7       	brne	.-4      	; 0x26d8 <CLCD_voidID+0x145e>
    26dc:	9a 8b       	std	Y+18, r25	; 0x12
    26de:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26e0:	8b 89       	ldd	r24, Y+19	; 0x13
    26e2:	9c 89       	ldd	r25, Y+20	; 0x14
    26e4:	01 97       	sbiw	r24, 0x01	; 1
    26e6:	9c 8b       	std	Y+20, r25	; 0x14
    26e8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26ea:	8b 89       	ldd	r24, Y+19	; 0x13
    26ec:	9c 89       	ldd	r25, Y+20	; 0x14
    26ee:	00 97       	sbiw	r24, 0x00	; 0
    26f0:	69 f7       	brne	.-38     	; 0x26cc <CLCD_voidID+0x1452>
    26f2:	14 c0       	rjmp	.+40     	; 0x271c <CLCD_voidID+0x14a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26f4:	6d 89       	ldd	r22, Y+21	; 0x15
    26f6:	7e 89       	ldd	r23, Y+22	; 0x16
    26f8:	8f 89       	ldd	r24, Y+23	; 0x17
    26fa:	98 8d       	ldd	r25, Y+24	; 0x18
    26fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2700:	dc 01       	movw	r26, r24
    2702:	cb 01       	movw	r24, r22
    2704:	9c 8b       	std	Y+20, r25	; 0x14
    2706:	8b 8b       	std	Y+19, r24	; 0x13
    2708:	8b 89       	ldd	r24, Y+19	; 0x13
    270a:	9c 89       	ldd	r25, Y+20	; 0x14
    270c:	98 8b       	std	Y+16, r25	; 0x10
    270e:	8f 87       	std	Y+15, r24	; 0x0f
    2710:	8f 85       	ldd	r24, Y+15	; 0x0f
    2712:	98 89       	ldd	r25, Y+16	; 0x10
    2714:	01 97       	sbiw	r24, 0x01	; 1
    2716:	f1 f7       	brne	.-4      	; 0x2714 <CLCD_voidID+0x149a>
    2718:	98 8b       	std	Y+16, r25	; 0x10
    271a:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(1000);
												/* ClEAR THE FLAG */
				EXTI_u8IntClearFlag ( INT0 ) ;
    271c:	80 e0       	ldi	r24, 0x00	; 0
    271e:	0e 94 a3 23 	call	0x4746	; 0x4746 <EXTI_u8IntClearFlag>
												/* INTERRUPT ENABLED */
				EXTI_u8SetSenseCtrl(INT0,FALLING_EDGE);
    2722:	80 e0       	ldi	r24, 0x00	; 0
    2724:	63 e0       	ldi	r22, 0x03	; 3
    2726:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <EXTI_u8SetSenseCtrl>
				EXTI_u8IntEnable(INT0);
    272a:	80 e0       	ldi	r24, 0x00	; 0
    272c:	0e 94 fe 22 	call	0x45fc	; 0x45fc <EXTI_u8IntEnable>
				GIE_voidEnableGlobal();
    2730:	0e 94 79 24 	call	0x48f2	; 0x48f2 <GIE_voidEnableGlobal>
    2734:	04 c0       	rjmp	.+8      	; 0x273e <CLCD_voidID+0x14c4>

				while (  u8_Flag == 1  )
				{
					LDRCONTROL();
    2736:	0e 94 24 17 	call	0x2e48	; 0x2e48 <LDRCONTROL>
					LM35CONTROL();
    273a:	0e 94 c9 19 	call	0x3392	; 0x3392 <LM35CONTROL>
												/* INTERRUPT ENABLED */
				EXTI_u8SetSenseCtrl(INT0,FALLING_EDGE);
				EXTI_u8IntEnable(INT0);
				GIE_voidEnableGlobal();

				while (  u8_Flag == 1  )
    273e:	80 91 3c 01 	lds	r24, 0x013C
    2742:	81 30       	cpi	r24, 0x01	; 1
    2744:	c1 f3       	breq	.-16     	; 0x2736 <CLCD_voidID+0x14bc>
				{
					LDRCONTROL();
					LM35CONTROL();
				}
				SystemShutDown () ;
    2746:	0e 94 7e 1a 	call	0x34fc	; 0x34fc <SystemShutDown>
    274a:	a8 c0       	rjmp	.+336    	; 0x289c <CLCD_voidID+0x1622>
				return ;
			}
			else
			{
				CLCD_voidSendCommand(1);
    274c:	81 e0       	ldi	r24, 0x01	; 1
    274e:	0e 94 74 1b 	call	0x36e8	; 0x36e8 <CLCD_voidSendCommand>
				voidSendString("Wrong Password!");
    2752:	84 ec       	ldi	r24, 0xC4	; 196
    2754:	90 e0       	ldi	r25, 0x00	; 0
    2756:	0e 94 44 1c 	call	0x3888	; 0x3888 <voidSendString>
    275a:	80 e0       	ldi	r24, 0x00	; 0
    275c:	90 e0       	ldi	r25, 0x00	; 0
    275e:	aa e7       	ldi	r26, 0x7A	; 122
    2760:	b4 e4       	ldi	r27, 0x44	; 68
    2762:	8b 87       	std	Y+11, r24	; 0x0b
    2764:	9c 87       	std	Y+12, r25	; 0x0c
    2766:	ad 87       	std	Y+13, r26	; 0x0d
    2768:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    276a:	6b 85       	ldd	r22, Y+11	; 0x0b
    276c:	7c 85       	ldd	r23, Y+12	; 0x0c
    276e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2770:	9e 85       	ldd	r25, Y+14	; 0x0e
    2772:	20 e0       	ldi	r18, 0x00	; 0
    2774:	30 e0       	ldi	r19, 0x00	; 0
    2776:	4a e7       	ldi	r20, 0x7A	; 122
    2778:	55 e4       	ldi	r21, 0x45	; 69
    277a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    277e:	dc 01       	movw	r26, r24
    2780:	cb 01       	movw	r24, r22
    2782:	8f 83       	std	Y+7, r24	; 0x07
    2784:	98 87       	std	Y+8, r25	; 0x08
    2786:	a9 87       	std	Y+9, r26	; 0x09
    2788:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    278a:	6f 81       	ldd	r22, Y+7	; 0x07
    278c:	78 85       	ldd	r23, Y+8	; 0x08
    278e:	89 85       	ldd	r24, Y+9	; 0x09
    2790:	9a 85       	ldd	r25, Y+10	; 0x0a
    2792:	20 e0       	ldi	r18, 0x00	; 0
    2794:	30 e0       	ldi	r19, 0x00	; 0
    2796:	40 e8       	ldi	r20, 0x80	; 128
    2798:	5f e3       	ldi	r21, 0x3F	; 63
    279a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    279e:	88 23       	and	r24, r24
    27a0:	2c f4       	brge	.+10     	; 0x27ac <CLCD_voidID+0x1532>
		__ticks = 1;
    27a2:	81 e0       	ldi	r24, 0x01	; 1
    27a4:	90 e0       	ldi	r25, 0x00	; 0
    27a6:	9e 83       	std	Y+6, r25	; 0x06
    27a8:	8d 83       	std	Y+5, r24	; 0x05
    27aa:	3f c0       	rjmp	.+126    	; 0x282a <CLCD_voidID+0x15b0>
	else if (__tmp > 65535)
    27ac:	6f 81       	ldd	r22, Y+7	; 0x07
    27ae:	78 85       	ldd	r23, Y+8	; 0x08
    27b0:	89 85       	ldd	r24, Y+9	; 0x09
    27b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    27b4:	20 e0       	ldi	r18, 0x00	; 0
    27b6:	3f ef       	ldi	r19, 0xFF	; 255
    27b8:	4f e7       	ldi	r20, 0x7F	; 127
    27ba:	57 e4       	ldi	r21, 0x47	; 71
    27bc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27c0:	18 16       	cp	r1, r24
    27c2:	4c f5       	brge	.+82     	; 0x2816 <CLCD_voidID+0x159c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    27c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    27c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    27ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    27cc:	20 e0       	ldi	r18, 0x00	; 0
    27ce:	30 e0       	ldi	r19, 0x00	; 0
    27d0:	40 e2       	ldi	r20, 0x20	; 32
    27d2:	51 e4       	ldi	r21, 0x41	; 65
    27d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27d8:	dc 01       	movw	r26, r24
    27da:	cb 01       	movw	r24, r22
    27dc:	bc 01       	movw	r22, r24
    27de:	cd 01       	movw	r24, r26
    27e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27e4:	dc 01       	movw	r26, r24
    27e6:	cb 01       	movw	r24, r22
    27e8:	9e 83       	std	Y+6, r25	; 0x06
    27ea:	8d 83       	std	Y+5, r24	; 0x05
    27ec:	0f c0       	rjmp	.+30     	; 0x280c <CLCD_voidID+0x1592>
    27ee:	80 e9       	ldi	r24, 0x90	; 144
    27f0:	91 e0       	ldi	r25, 0x01	; 1
    27f2:	9c 83       	std	Y+4, r25	; 0x04
    27f4:	8b 83       	std	Y+3, r24	; 0x03
    27f6:	8b 81       	ldd	r24, Y+3	; 0x03
    27f8:	9c 81       	ldd	r25, Y+4	; 0x04
    27fa:	01 97       	sbiw	r24, 0x01	; 1
    27fc:	f1 f7       	brne	.-4      	; 0x27fa <CLCD_voidID+0x1580>
    27fe:	9c 83       	std	Y+4, r25	; 0x04
    2800:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2802:	8d 81       	ldd	r24, Y+5	; 0x05
    2804:	9e 81       	ldd	r25, Y+6	; 0x06
    2806:	01 97       	sbiw	r24, 0x01	; 1
    2808:	9e 83       	std	Y+6, r25	; 0x06
    280a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    280c:	8d 81       	ldd	r24, Y+5	; 0x05
    280e:	9e 81       	ldd	r25, Y+6	; 0x06
    2810:	00 97       	sbiw	r24, 0x00	; 0
    2812:	69 f7       	brne	.-38     	; 0x27ee <CLCD_voidID+0x1574>
    2814:	14 c0       	rjmp	.+40     	; 0x283e <CLCD_voidID+0x15c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2816:	6f 81       	ldd	r22, Y+7	; 0x07
    2818:	78 85       	ldd	r23, Y+8	; 0x08
    281a:	89 85       	ldd	r24, Y+9	; 0x09
    281c:	9a 85       	ldd	r25, Y+10	; 0x0a
    281e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2822:	dc 01       	movw	r26, r24
    2824:	cb 01       	movw	r24, r22
    2826:	9e 83       	std	Y+6, r25	; 0x06
    2828:	8d 83       	std	Y+5, r24	; 0x05
    282a:	8d 81       	ldd	r24, Y+5	; 0x05
    282c:	9e 81       	ldd	r25, Y+6	; 0x06
    282e:	9a 83       	std	Y+2, r25	; 0x02
    2830:	89 83       	std	Y+1, r24	; 0x01
    2832:	89 81       	ldd	r24, Y+1	; 0x01
    2834:	9a 81       	ldd	r25, Y+2	; 0x02
    2836:	01 97       	sbiw	r24, 0x01	; 1
    2838:	f1 f7       	brne	.-4      	; 0x2836 <CLCD_voidID+0x15bc>
    283a:	9a 83       	std	Y+2, r25	; 0x02
    283c:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms (1000) ;
				Local_u8TrialCounter ++ ;
    283e:	de 01       	movw	r26, r28
    2840:	a2 55       	subi	r26, 0x52	; 82
    2842:	bf 4f       	sbci	r27, 0xFF	; 255
    2844:	fe 01       	movw	r30, r28
    2846:	e2 55       	subi	r30, 0x52	; 82
    2848:	ff 4f       	sbci	r31, 0xFF	; 255
    284a:	80 81       	ld	r24, Z
    284c:	8f 5f       	subi	r24, 0xFF	; 255
    284e:	8c 93       	st	X, r24
				CLCD_voidSendCommand(1);
    2850:	81 e0       	ldi	r24, 0x01	; 1
    2852:	0e 94 74 1b 	call	0x36e8	; 0x36e8 <CLCD_voidSendCommand>
		Local_u8Password [ Local_u8Iterator ] = Local_u8ID [Local_u8IDCounter-1];
		Local_u8IDCounter -- ;
	}

	//////////////////////////////////////////////////////////////
	while ( Local_u8TrialCounter != 4 )
    2856:	fe 01       	movw	r30, r28
    2858:	e2 55       	subi	r30, 0x52	; 82
    285a:	ff 4f       	sbci	r31, 0xFF	; 255
    285c:	80 81       	ld	r24, Z
    285e:	84 30       	cpi	r24, 0x04	; 4
    2860:	09 f0       	breq	.+2      	; 0x2864 <CLCD_voidID+0x15ea>
    2862:	2d ca       	rjmp	.-2982   	; 0x1cbe <CLCD_voidID+0xa44>
				CLCD_voidSendCommand(1);
			}
		}
	}

	if ( Local_u8TrialCounter == 4 )
    2864:	fe 01       	movw	r30, r28
    2866:	e2 55       	subi	r30, 0x52	; 82
    2868:	ff 4f       	sbci	r31, 0xFF	; 255
    286a:	80 81       	ld	r24, Z
    286c:	84 30       	cpi	r24, 0x04	; 4
    286e:	b1 f4       	brne	.+44     	; 0x289c <CLCD_voidID+0x1622>
	{
		CLCD_voidSendCommand(1);
    2870:	81 e0       	ldi	r24, 0x01	; 1
    2872:	0e 94 74 1b 	call	0x36e8	; 0x36e8 <CLCD_voidSendCommand>
		voidSendString(" No more Trials");
    2876:	84 ed       	ldi	r24, 0xD4	; 212
    2878:	90 e0       	ldi	r25, 0x00	; 0
    287a:	0e 94 44 1c 	call	0x3888	; 0x3888 <voidSendString>
										/* ClEAR THE FLAG */
		EXTI_u8IntClearFlag ( INT0 ) ;
    287e:	80 e0       	ldi	r24, 0x00	; 0
    2880:	0e 94 a3 23 	call	0x4746	; 0x4746 <EXTI_u8IntClearFlag>
										/* INTERRUPT ENABLED */
		EXTI_u8IntEnable(INT0);
    2884:	80 e0       	ldi	r24, 0x00	; 0
    2886:	0e 94 fe 22 	call	0x45fc	; 0x45fc <EXTI_u8IntEnable>
		GIE_voidEnableGlobal();
    288a:	0e 94 79 24 	call	0x48f2	; 0x48f2 <GIE_voidEnableGlobal>
    288e:	02 c0       	rjmp	.+4      	; 0x2894 <CLCD_voidID+0x161a>
		while (  u8_Flag == 1  )
		{
			RedLED();
    2890:	0e 94 f5 14 	call	0x29ea	; 0x29ea <RedLED>
										/* ClEAR THE FLAG */
		EXTI_u8IntClearFlag ( INT0 ) ;
										/* INTERRUPT ENABLED */
		EXTI_u8IntEnable(INT0);
		GIE_voidEnableGlobal();
		while (  u8_Flag == 1  )
    2894:	80 91 3c 01 	lds	r24, 0x013C
    2898:	81 30       	cpi	r24, 0x01	; 1
    289a:	d1 f3       	breq	.-12     	; 0x2890 <CLCD_voidID+0x1616>
			RedLED();
		}
		return ;
	}

}
    289c:	c2 54       	subi	r28, 0x42	; 66
    289e:	df 4f       	sbci	r29, 0xFF	; 255
    28a0:	0f b6       	in	r0, 0x3f	; 63
    28a2:	f8 94       	cli
    28a4:	de bf       	out	0x3e, r29	; 62
    28a6:	0f be       	out	0x3f, r0	; 63
    28a8:	cd bf       	out	0x3d, r28	; 61
    28aa:	cf 91       	pop	r28
    28ac:	df 91       	pop	r29
    28ae:	1f 91       	pop	r17
    28b0:	0f 91       	pop	r16
    28b2:	08 95       	ret

000028b4 <OpenSound>:
void OpenSound (void)
{
    28b4:	df 93       	push	r29
    28b6:	cf 93       	push	r28
    28b8:	cd b7       	in	r28, 0x3d	; 61
    28ba:	de b7       	in	r29, 0x3e	; 62
    28bc:	2e 97       	sbiw	r28, 0x0e	; 14
    28be:	0f b6       	in	r0, 0x3f	; 63
    28c0:	f8 94       	cli
    28c2:	de bf       	out	0x3e, r29	; 62
    28c4:	0f be       	out	0x3f, r0	; 63
    28c6:	cd bf       	out	0x3d, r28	; 61
	DIO_U8SetPinValue(DIO_PORTC,DIO_PIN5,DIO_PIN_HIGH);
    28c8:	82 e0       	ldi	r24, 0x02	; 2
    28ca:	65 e0       	ldi	r22, 0x05	; 5
    28cc:	41 e0       	ldi	r20, 0x01	; 1
    28ce:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
    28d2:	80 e0       	ldi	r24, 0x00	; 0
    28d4:	90 e0       	ldi	r25, 0x00	; 0
    28d6:	aa e7       	ldi	r26, 0x7A	; 122
    28d8:	b3 e4       	ldi	r27, 0x43	; 67
    28da:	8b 87       	std	Y+11, r24	; 0x0b
    28dc:	9c 87       	std	Y+12, r25	; 0x0c
    28de:	ad 87       	std	Y+13, r26	; 0x0d
    28e0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    28e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    28e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    28e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    28ea:	20 e0       	ldi	r18, 0x00	; 0
    28ec:	30 e0       	ldi	r19, 0x00	; 0
    28ee:	4a e7       	ldi	r20, 0x7A	; 122
    28f0:	55 e4       	ldi	r21, 0x45	; 69
    28f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28f6:	dc 01       	movw	r26, r24
    28f8:	cb 01       	movw	r24, r22
    28fa:	8f 83       	std	Y+7, r24	; 0x07
    28fc:	98 87       	std	Y+8, r25	; 0x08
    28fe:	a9 87       	std	Y+9, r26	; 0x09
    2900:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2902:	6f 81       	ldd	r22, Y+7	; 0x07
    2904:	78 85       	ldd	r23, Y+8	; 0x08
    2906:	89 85       	ldd	r24, Y+9	; 0x09
    2908:	9a 85       	ldd	r25, Y+10	; 0x0a
    290a:	20 e0       	ldi	r18, 0x00	; 0
    290c:	30 e0       	ldi	r19, 0x00	; 0
    290e:	40 e8       	ldi	r20, 0x80	; 128
    2910:	5f e3       	ldi	r21, 0x3F	; 63
    2912:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2916:	88 23       	and	r24, r24
    2918:	2c f4       	brge	.+10     	; 0x2924 <OpenSound+0x70>
		__ticks = 1;
    291a:	81 e0       	ldi	r24, 0x01	; 1
    291c:	90 e0       	ldi	r25, 0x00	; 0
    291e:	9e 83       	std	Y+6, r25	; 0x06
    2920:	8d 83       	std	Y+5, r24	; 0x05
    2922:	3f c0       	rjmp	.+126    	; 0x29a2 <OpenSound+0xee>
	else if (__tmp > 65535)
    2924:	6f 81       	ldd	r22, Y+7	; 0x07
    2926:	78 85       	ldd	r23, Y+8	; 0x08
    2928:	89 85       	ldd	r24, Y+9	; 0x09
    292a:	9a 85       	ldd	r25, Y+10	; 0x0a
    292c:	20 e0       	ldi	r18, 0x00	; 0
    292e:	3f ef       	ldi	r19, 0xFF	; 255
    2930:	4f e7       	ldi	r20, 0x7F	; 127
    2932:	57 e4       	ldi	r21, 0x47	; 71
    2934:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2938:	18 16       	cp	r1, r24
    293a:	4c f5       	brge	.+82     	; 0x298e <OpenSound+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    293c:	6b 85       	ldd	r22, Y+11	; 0x0b
    293e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2940:	8d 85       	ldd	r24, Y+13	; 0x0d
    2942:	9e 85       	ldd	r25, Y+14	; 0x0e
    2944:	20 e0       	ldi	r18, 0x00	; 0
    2946:	30 e0       	ldi	r19, 0x00	; 0
    2948:	40 e2       	ldi	r20, 0x20	; 32
    294a:	51 e4       	ldi	r21, 0x41	; 65
    294c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2950:	dc 01       	movw	r26, r24
    2952:	cb 01       	movw	r24, r22
    2954:	bc 01       	movw	r22, r24
    2956:	cd 01       	movw	r24, r26
    2958:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    295c:	dc 01       	movw	r26, r24
    295e:	cb 01       	movw	r24, r22
    2960:	9e 83       	std	Y+6, r25	; 0x06
    2962:	8d 83       	std	Y+5, r24	; 0x05
    2964:	0f c0       	rjmp	.+30     	; 0x2984 <OpenSound+0xd0>
    2966:	80 e9       	ldi	r24, 0x90	; 144
    2968:	91 e0       	ldi	r25, 0x01	; 1
    296a:	9c 83       	std	Y+4, r25	; 0x04
    296c:	8b 83       	std	Y+3, r24	; 0x03
    296e:	8b 81       	ldd	r24, Y+3	; 0x03
    2970:	9c 81       	ldd	r25, Y+4	; 0x04
    2972:	01 97       	sbiw	r24, 0x01	; 1
    2974:	f1 f7       	brne	.-4      	; 0x2972 <OpenSound+0xbe>
    2976:	9c 83       	std	Y+4, r25	; 0x04
    2978:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    297a:	8d 81       	ldd	r24, Y+5	; 0x05
    297c:	9e 81       	ldd	r25, Y+6	; 0x06
    297e:	01 97       	sbiw	r24, 0x01	; 1
    2980:	9e 83       	std	Y+6, r25	; 0x06
    2982:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2984:	8d 81       	ldd	r24, Y+5	; 0x05
    2986:	9e 81       	ldd	r25, Y+6	; 0x06
    2988:	00 97       	sbiw	r24, 0x00	; 0
    298a:	69 f7       	brne	.-38     	; 0x2966 <OpenSound+0xb2>
    298c:	14 c0       	rjmp	.+40     	; 0x29b6 <OpenSound+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    298e:	6f 81       	ldd	r22, Y+7	; 0x07
    2990:	78 85       	ldd	r23, Y+8	; 0x08
    2992:	89 85       	ldd	r24, Y+9	; 0x09
    2994:	9a 85       	ldd	r25, Y+10	; 0x0a
    2996:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    299a:	dc 01       	movw	r26, r24
    299c:	cb 01       	movw	r24, r22
    299e:	9e 83       	std	Y+6, r25	; 0x06
    29a0:	8d 83       	std	Y+5, r24	; 0x05
    29a2:	8d 81       	ldd	r24, Y+5	; 0x05
    29a4:	9e 81       	ldd	r25, Y+6	; 0x06
    29a6:	9a 83       	std	Y+2, r25	; 0x02
    29a8:	89 83       	std	Y+1, r24	; 0x01
    29aa:	89 81       	ldd	r24, Y+1	; 0x01
    29ac:	9a 81       	ldd	r25, Y+2	; 0x02
    29ae:	01 97       	sbiw	r24, 0x01	; 1
    29b0:	f1 f7       	brne	.-4      	; 0x29ae <OpenSound+0xfa>
    29b2:	9a 83       	std	Y+2, r25	; 0x02
    29b4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(250);
	DIO_U8SetPinValue(DIO_PORTC,DIO_PIN5,DIO_PIN_LOW);
    29b6:	82 e0       	ldi	r24, 0x02	; 2
    29b8:	65 e0       	ldi	r22, 0x05	; 5
    29ba:	40 e0       	ldi	r20, 0x00	; 0
    29bc:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
}
    29c0:	2e 96       	adiw	r28, 0x0e	; 14
    29c2:	0f b6       	in	r0, 0x3f	; 63
    29c4:	f8 94       	cli
    29c6:	de bf       	out	0x3e, r29	; 62
    29c8:	0f be       	out	0x3f, r0	; 63
    29ca:	cd bf       	out	0x3d, r28	; 61
    29cc:	cf 91       	pop	r28
    29ce:	df 91       	pop	r29
    29d0:	08 95       	ret

000029d2 <GreenLED>:
void GreenLED ( void )
{
    29d2:	df 93       	push	r29
    29d4:	cf 93       	push	r28
    29d6:	cd b7       	in	r28, 0x3d	; 61
    29d8:	de b7       	in	r29, 0x3e	; 62
	DIO_U8SetPinValue(DIO_PORTC , DIO_PIN1 , DIO_PIN_HIGH);
    29da:	82 e0       	ldi	r24, 0x02	; 2
    29dc:	61 e0       	ldi	r22, 0x01	; 1
    29de:	41 e0       	ldi	r20, 0x01	; 1
    29e0:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
}
    29e4:	cf 91       	pop	r28
    29e6:	df 91       	pop	r29
    29e8:	08 95       	ret

000029ea <RedLED>:
void RedLED (void)

{
    29ea:	df 93       	push	r29
    29ec:	cf 93       	push	r28
    29ee:	cd b7       	in	r28, 0x3d	; 61
    29f0:	de b7       	in	r29, 0x3e	; 62
	DIO_U8SetPinValue(DIO_PORTC , DIO_PIN0 , DIO_PIN_HIGH);
    29f2:	82 e0       	ldi	r24, 0x02	; 2
    29f4:	60 e0       	ldi	r22, 0x00	; 0
    29f6:	41 e0       	ldi	r20, 0x01	; 1
    29f8:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
}
    29fc:	cf 91       	pop	r28
    29fe:	df 91       	pop	r29
    2a00:	08 95       	ret

00002a02 <DC_Motor>:
void DC_Motor (void)
{
    2a02:	df 93       	push	r29
    2a04:	cf 93       	push	r28
    2a06:	cd b7       	in	r28, 0x3d	; 61
    2a08:	de b7       	in	r29, 0x3e	; 62
    2a0a:	6c 97       	sbiw	r28, 0x1c	; 28
    2a0c:	0f b6       	in	r0, 0x3f	; 63
    2a0e:	f8 94       	cli
    2a10:	de bf       	out	0x3e, r29	; 62
    2a12:	0f be       	out	0x3f, r0	; 63
    2a14:	cd bf       	out	0x3d, r28	; 61
	DIO_U8SetPinValue(DIO_PORTC,DIO_PIN2,DIO_PIN_HIGH);
    2a16:	82 e0       	ldi	r24, 0x02	; 2
    2a18:	62 e0       	ldi	r22, 0x02	; 2
    2a1a:	41 e0       	ldi	r20, 0x01	; 1
    2a1c:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
    2a20:	80 e0       	ldi	r24, 0x00	; 0
    2a22:	90 e0       	ldi	r25, 0x00	; 0
    2a24:	aa e7       	ldi	r26, 0x7A	; 122
    2a26:	b4 e4       	ldi	r27, 0x44	; 68
    2a28:	89 8f       	std	Y+25, r24	; 0x19
    2a2a:	9a 8f       	std	Y+26, r25	; 0x1a
    2a2c:	ab 8f       	std	Y+27, r26	; 0x1b
    2a2e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a30:	69 8d       	ldd	r22, Y+25	; 0x19
    2a32:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a34:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a36:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a38:	20 e0       	ldi	r18, 0x00	; 0
    2a3a:	30 e0       	ldi	r19, 0x00	; 0
    2a3c:	4a e7       	ldi	r20, 0x7A	; 122
    2a3e:	55 e4       	ldi	r21, 0x45	; 69
    2a40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a44:	dc 01       	movw	r26, r24
    2a46:	cb 01       	movw	r24, r22
    2a48:	8d 8b       	std	Y+21, r24	; 0x15
    2a4a:	9e 8b       	std	Y+22, r25	; 0x16
    2a4c:	af 8b       	std	Y+23, r26	; 0x17
    2a4e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a50:	6d 89       	ldd	r22, Y+21	; 0x15
    2a52:	7e 89       	ldd	r23, Y+22	; 0x16
    2a54:	8f 89       	ldd	r24, Y+23	; 0x17
    2a56:	98 8d       	ldd	r25, Y+24	; 0x18
    2a58:	20 e0       	ldi	r18, 0x00	; 0
    2a5a:	30 e0       	ldi	r19, 0x00	; 0
    2a5c:	40 e8       	ldi	r20, 0x80	; 128
    2a5e:	5f e3       	ldi	r21, 0x3F	; 63
    2a60:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a64:	88 23       	and	r24, r24
    2a66:	2c f4       	brge	.+10     	; 0x2a72 <DC_Motor+0x70>
		__ticks = 1;
    2a68:	81 e0       	ldi	r24, 0x01	; 1
    2a6a:	90 e0       	ldi	r25, 0x00	; 0
    2a6c:	9c 8b       	std	Y+20, r25	; 0x14
    2a6e:	8b 8b       	std	Y+19, r24	; 0x13
    2a70:	3f c0       	rjmp	.+126    	; 0x2af0 <DC_Motor+0xee>
	else if (__tmp > 65535)
    2a72:	6d 89       	ldd	r22, Y+21	; 0x15
    2a74:	7e 89       	ldd	r23, Y+22	; 0x16
    2a76:	8f 89       	ldd	r24, Y+23	; 0x17
    2a78:	98 8d       	ldd	r25, Y+24	; 0x18
    2a7a:	20 e0       	ldi	r18, 0x00	; 0
    2a7c:	3f ef       	ldi	r19, 0xFF	; 255
    2a7e:	4f e7       	ldi	r20, 0x7F	; 127
    2a80:	57 e4       	ldi	r21, 0x47	; 71
    2a82:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a86:	18 16       	cp	r1, r24
    2a88:	4c f5       	brge	.+82     	; 0x2adc <DC_Motor+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a8a:	69 8d       	ldd	r22, Y+25	; 0x19
    2a8c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a8e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a90:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a92:	20 e0       	ldi	r18, 0x00	; 0
    2a94:	30 e0       	ldi	r19, 0x00	; 0
    2a96:	40 e2       	ldi	r20, 0x20	; 32
    2a98:	51 e4       	ldi	r21, 0x41	; 65
    2a9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a9e:	dc 01       	movw	r26, r24
    2aa0:	cb 01       	movw	r24, r22
    2aa2:	bc 01       	movw	r22, r24
    2aa4:	cd 01       	movw	r24, r26
    2aa6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aaa:	dc 01       	movw	r26, r24
    2aac:	cb 01       	movw	r24, r22
    2aae:	9c 8b       	std	Y+20, r25	; 0x14
    2ab0:	8b 8b       	std	Y+19, r24	; 0x13
    2ab2:	0f c0       	rjmp	.+30     	; 0x2ad2 <DC_Motor+0xd0>
    2ab4:	80 e9       	ldi	r24, 0x90	; 144
    2ab6:	91 e0       	ldi	r25, 0x01	; 1
    2ab8:	9a 8b       	std	Y+18, r25	; 0x12
    2aba:	89 8b       	std	Y+17, r24	; 0x11
    2abc:	89 89       	ldd	r24, Y+17	; 0x11
    2abe:	9a 89       	ldd	r25, Y+18	; 0x12
    2ac0:	01 97       	sbiw	r24, 0x01	; 1
    2ac2:	f1 f7       	brne	.-4      	; 0x2ac0 <DC_Motor+0xbe>
    2ac4:	9a 8b       	std	Y+18, r25	; 0x12
    2ac6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ac8:	8b 89       	ldd	r24, Y+19	; 0x13
    2aca:	9c 89       	ldd	r25, Y+20	; 0x14
    2acc:	01 97       	sbiw	r24, 0x01	; 1
    2ace:	9c 8b       	std	Y+20, r25	; 0x14
    2ad0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ad2:	8b 89       	ldd	r24, Y+19	; 0x13
    2ad4:	9c 89       	ldd	r25, Y+20	; 0x14
    2ad6:	00 97       	sbiw	r24, 0x00	; 0
    2ad8:	69 f7       	brne	.-38     	; 0x2ab4 <DC_Motor+0xb2>
    2ada:	14 c0       	rjmp	.+40     	; 0x2b04 <DC_Motor+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2adc:	6d 89       	ldd	r22, Y+21	; 0x15
    2ade:	7e 89       	ldd	r23, Y+22	; 0x16
    2ae0:	8f 89       	ldd	r24, Y+23	; 0x17
    2ae2:	98 8d       	ldd	r25, Y+24	; 0x18
    2ae4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ae8:	dc 01       	movw	r26, r24
    2aea:	cb 01       	movw	r24, r22
    2aec:	9c 8b       	std	Y+20, r25	; 0x14
    2aee:	8b 8b       	std	Y+19, r24	; 0x13
    2af0:	8b 89       	ldd	r24, Y+19	; 0x13
    2af2:	9c 89       	ldd	r25, Y+20	; 0x14
    2af4:	98 8b       	std	Y+16, r25	; 0x10
    2af6:	8f 87       	std	Y+15, r24	; 0x0f
    2af8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2afa:	98 89       	ldd	r25, Y+16	; 0x10
    2afc:	01 97       	sbiw	r24, 0x01	; 1
    2afe:	f1 f7       	brne	.-4      	; 0x2afc <DC_Motor+0xfa>
    2b00:	98 8b       	std	Y+16, r25	; 0x10
    2b02:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	DIO_U8SetPinValue(DIO_PORTC,DIO_PIN2,DIO_PIN_LOW);
    2b04:	82 e0       	ldi	r24, 0x02	; 2
    2b06:	62 e0       	ldi	r22, 0x02	; 2
    2b08:	40 e0       	ldi	r20, 0x00	; 0
    2b0a:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
    2b0e:	80 e0       	ldi	r24, 0x00	; 0
    2b10:	90 e0       	ldi	r25, 0x00	; 0
    2b12:	aa e7       	ldi	r26, 0x7A	; 122
    2b14:	b4 e4       	ldi	r27, 0x44	; 68
    2b16:	8b 87       	std	Y+11, r24	; 0x0b
    2b18:	9c 87       	std	Y+12, r25	; 0x0c
    2b1a:	ad 87       	std	Y+13, r26	; 0x0d
    2b1c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b20:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b22:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b24:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b26:	20 e0       	ldi	r18, 0x00	; 0
    2b28:	30 e0       	ldi	r19, 0x00	; 0
    2b2a:	4a e7       	ldi	r20, 0x7A	; 122
    2b2c:	55 e4       	ldi	r21, 0x45	; 69
    2b2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b32:	dc 01       	movw	r26, r24
    2b34:	cb 01       	movw	r24, r22
    2b36:	8f 83       	std	Y+7, r24	; 0x07
    2b38:	98 87       	std	Y+8, r25	; 0x08
    2b3a:	a9 87       	std	Y+9, r26	; 0x09
    2b3c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b3e:	6f 81       	ldd	r22, Y+7	; 0x07
    2b40:	78 85       	ldd	r23, Y+8	; 0x08
    2b42:	89 85       	ldd	r24, Y+9	; 0x09
    2b44:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b46:	20 e0       	ldi	r18, 0x00	; 0
    2b48:	30 e0       	ldi	r19, 0x00	; 0
    2b4a:	40 e8       	ldi	r20, 0x80	; 128
    2b4c:	5f e3       	ldi	r21, 0x3F	; 63
    2b4e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b52:	88 23       	and	r24, r24
    2b54:	2c f4       	brge	.+10     	; 0x2b60 <DC_Motor+0x15e>
		__ticks = 1;
    2b56:	81 e0       	ldi	r24, 0x01	; 1
    2b58:	90 e0       	ldi	r25, 0x00	; 0
    2b5a:	9e 83       	std	Y+6, r25	; 0x06
    2b5c:	8d 83       	std	Y+5, r24	; 0x05
    2b5e:	3f c0       	rjmp	.+126    	; 0x2bde <DC_Motor+0x1dc>
	else if (__tmp > 65535)
    2b60:	6f 81       	ldd	r22, Y+7	; 0x07
    2b62:	78 85       	ldd	r23, Y+8	; 0x08
    2b64:	89 85       	ldd	r24, Y+9	; 0x09
    2b66:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b68:	20 e0       	ldi	r18, 0x00	; 0
    2b6a:	3f ef       	ldi	r19, 0xFF	; 255
    2b6c:	4f e7       	ldi	r20, 0x7F	; 127
    2b6e:	57 e4       	ldi	r21, 0x47	; 71
    2b70:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b74:	18 16       	cp	r1, r24
    2b76:	4c f5       	brge	.+82     	; 0x2bca <DC_Motor+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b78:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b80:	20 e0       	ldi	r18, 0x00	; 0
    2b82:	30 e0       	ldi	r19, 0x00	; 0
    2b84:	40 e2       	ldi	r20, 0x20	; 32
    2b86:	51 e4       	ldi	r21, 0x41	; 65
    2b88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b8c:	dc 01       	movw	r26, r24
    2b8e:	cb 01       	movw	r24, r22
    2b90:	bc 01       	movw	r22, r24
    2b92:	cd 01       	movw	r24, r26
    2b94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b98:	dc 01       	movw	r26, r24
    2b9a:	cb 01       	movw	r24, r22
    2b9c:	9e 83       	std	Y+6, r25	; 0x06
    2b9e:	8d 83       	std	Y+5, r24	; 0x05
    2ba0:	0f c0       	rjmp	.+30     	; 0x2bc0 <DC_Motor+0x1be>
    2ba2:	80 e9       	ldi	r24, 0x90	; 144
    2ba4:	91 e0       	ldi	r25, 0x01	; 1
    2ba6:	9c 83       	std	Y+4, r25	; 0x04
    2ba8:	8b 83       	std	Y+3, r24	; 0x03
    2baa:	8b 81       	ldd	r24, Y+3	; 0x03
    2bac:	9c 81       	ldd	r25, Y+4	; 0x04
    2bae:	01 97       	sbiw	r24, 0x01	; 1
    2bb0:	f1 f7       	brne	.-4      	; 0x2bae <DC_Motor+0x1ac>
    2bb2:	9c 83       	std	Y+4, r25	; 0x04
    2bb4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bb6:	8d 81       	ldd	r24, Y+5	; 0x05
    2bb8:	9e 81       	ldd	r25, Y+6	; 0x06
    2bba:	01 97       	sbiw	r24, 0x01	; 1
    2bbc:	9e 83       	std	Y+6, r25	; 0x06
    2bbe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bc0:	8d 81       	ldd	r24, Y+5	; 0x05
    2bc2:	9e 81       	ldd	r25, Y+6	; 0x06
    2bc4:	00 97       	sbiw	r24, 0x00	; 0
    2bc6:	69 f7       	brne	.-38     	; 0x2ba2 <DC_Motor+0x1a0>
    2bc8:	14 c0       	rjmp	.+40     	; 0x2bf2 <DC_Motor+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bca:	6f 81       	ldd	r22, Y+7	; 0x07
    2bcc:	78 85       	ldd	r23, Y+8	; 0x08
    2bce:	89 85       	ldd	r24, Y+9	; 0x09
    2bd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bd6:	dc 01       	movw	r26, r24
    2bd8:	cb 01       	movw	r24, r22
    2bda:	9e 83       	std	Y+6, r25	; 0x06
    2bdc:	8d 83       	std	Y+5, r24	; 0x05
    2bde:	8d 81       	ldd	r24, Y+5	; 0x05
    2be0:	9e 81       	ldd	r25, Y+6	; 0x06
    2be2:	9a 83       	std	Y+2, r25	; 0x02
    2be4:	89 83       	std	Y+1, r24	; 0x01
    2be6:	89 81       	ldd	r24, Y+1	; 0x01
    2be8:	9a 81       	ldd	r25, Y+2	; 0x02
    2bea:	01 97       	sbiw	r24, 0x01	; 1
    2bec:	f1 f7       	brne	.-4      	; 0x2bea <DC_Motor+0x1e8>
    2bee:	9a 83       	std	Y+2, r25	; 0x02
    2bf0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
}
    2bf2:	6c 96       	adiw	r28, 0x1c	; 28
    2bf4:	0f b6       	in	r0, 0x3f	; 63
    2bf6:	f8 94       	cli
    2bf8:	de bf       	out	0x3e, r29	; 62
    2bfa:	0f be       	out	0x3f, r0	; 63
    2bfc:	cd bf       	out	0x3d, r28	; 61
    2bfe:	cf 91       	pop	r28
    2c00:	df 91       	pop	r29
    2c02:	08 95       	ret

00002c04 <OpenSound2>:
void OpenSound2 (void)
{
    2c04:	df 93       	push	r29
    2c06:	cf 93       	push	r28
    2c08:	cd b7       	in	r28, 0x3d	; 61
    2c0a:	de b7       	in	r29, 0x3e	; 62
    2c0c:	2e 97       	sbiw	r28, 0x0e	; 14
    2c0e:	0f b6       	in	r0, 0x3f	; 63
    2c10:	f8 94       	cli
    2c12:	de bf       	out	0x3e, r29	; 62
    2c14:	0f be       	out	0x3f, r0	; 63
    2c16:	cd bf       	out	0x3d, r28	; 61
	DIO_U8SetPinValue(DIO_PORTC,DIO_PIN5,DIO_PIN_HIGH);
    2c18:	82 e0       	ldi	r24, 0x02	; 2
    2c1a:	65 e0       	ldi	r22, 0x05	; 5
    2c1c:	41 e0       	ldi	r20, 0x01	; 1
    2c1e:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
    2c22:	80 e0       	ldi	r24, 0x00	; 0
    2c24:	90 e0       	ldi	r25, 0x00	; 0
    2c26:	aa e7       	ldi	r26, 0x7A	; 122
    2c28:	b4 e4       	ldi	r27, 0x44	; 68
    2c2a:	8b 87       	std	Y+11, r24	; 0x0b
    2c2c:	9c 87       	std	Y+12, r25	; 0x0c
    2c2e:	ad 87       	std	Y+13, r26	; 0x0d
    2c30:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c32:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c34:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c36:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c38:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c3a:	20 e0       	ldi	r18, 0x00	; 0
    2c3c:	30 e0       	ldi	r19, 0x00	; 0
    2c3e:	4a e7       	ldi	r20, 0x7A	; 122
    2c40:	55 e4       	ldi	r21, 0x45	; 69
    2c42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c46:	dc 01       	movw	r26, r24
    2c48:	cb 01       	movw	r24, r22
    2c4a:	8f 83       	std	Y+7, r24	; 0x07
    2c4c:	98 87       	std	Y+8, r25	; 0x08
    2c4e:	a9 87       	std	Y+9, r26	; 0x09
    2c50:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c52:	6f 81       	ldd	r22, Y+7	; 0x07
    2c54:	78 85       	ldd	r23, Y+8	; 0x08
    2c56:	89 85       	ldd	r24, Y+9	; 0x09
    2c58:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c5a:	20 e0       	ldi	r18, 0x00	; 0
    2c5c:	30 e0       	ldi	r19, 0x00	; 0
    2c5e:	40 e8       	ldi	r20, 0x80	; 128
    2c60:	5f e3       	ldi	r21, 0x3F	; 63
    2c62:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c66:	88 23       	and	r24, r24
    2c68:	2c f4       	brge	.+10     	; 0x2c74 <OpenSound2+0x70>
		__ticks = 1;
    2c6a:	81 e0       	ldi	r24, 0x01	; 1
    2c6c:	90 e0       	ldi	r25, 0x00	; 0
    2c6e:	9e 83       	std	Y+6, r25	; 0x06
    2c70:	8d 83       	std	Y+5, r24	; 0x05
    2c72:	3f c0       	rjmp	.+126    	; 0x2cf2 <OpenSound2+0xee>
	else if (__tmp > 65535)
    2c74:	6f 81       	ldd	r22, Y+7	; 0x07
    2c76:	78 85       	ldd	r23, Y+8	; 0x08
    2c78:	89 85       	ldd	r24, Y+9	; 0x09
    2c7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c7c:	20 e0       	ldi	r18, 0x00	; 0
    2c7e:	3f ef       	ldi	r19, 0xFF	; 255
    2c80:	4f e7       	ldi	r20, 0x7F	; 127
    2c82:	57 e4       	ldi	r21, 0x47	; 71
    2c84:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c88:	18 16       	cp	r1, r24
    2c8a:	4c f5       	brge	.+82     	; 0x2cde <OpenSound2+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c8c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c8e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c90:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c92:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c94:	20 e0       	ldi	r18, 0x00	; 0
    2c96:	30 e0       	ldi	r19, 0x00	; 0
    2c98:	40 e2       	ldi	r20, 0x20	; 32
    2c9a:	51 e4       	ldi	r21, 0x41	; 65
    2c9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ca0:	dc 01       	movw	r26, r24
    2ca2:	cb 01       	movw	r24, r22
    2ca4:	bc 01       	movw	r22, r24
    2ca6:	cd 01       	movw	r24, r26
    2ca8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cac:	dc 01       	movw	r26, r24
    2cae:	cb 01       	movw	r24, r22
    2cb0:	9e 83       	std	Y+6, r25	; 0x06
    2cb2:	8d 83       	std	Y+5, r24	; 0x05
    2cb4:	0f c0       	rjmp	.+30     	; 0x2cd4 <OpenSound2+0xd0>
    2cb6:	80 e9       	ldi	r24, 0x90	; 144
    2cb8:	91 e0       	ldi	r25, 0x01	; 1
    2cba:	9c 83       	std	Y+4, r25	; 0x04
    2cbc:	8b 83       	std	Y+3, r24	; 0x03
    2cbe:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc0:	9c 81       	ldd	r25, Y+4	; 0x04
    2cc2:	01 97       	sbiw	r24, 0x01	; 1
    2cc4:	f1 f7       	brne	.-4      	; 0x2cc2 <OpenSound2+0xbe>
    2cc6:	9c 83       	std	Y+4, r25	; 0x04
    2cc8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cca:	8d 81       	ldd	r24, Y+5	; 0x05
    2ccc:	9e 81       	ldd	r25, Y+6	; 0x06
    2cce:	01 97       	sbiw	r24, 0x01	; 1
    2cd0:	9e 83       	std	Y+6, r25	; 0x06
    2cd2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cd4:	8d 81       	ldd	r24, Y+5	; 0x05
    2cd6:	9e 81       	ldd	r25, Y+6	; 0x06
    2cd8:	00 97       	sbiw	r24, 0x00	; 0
    2cda:	69 f7       	brne	.-38     	; 0x2cb6 <OpenSound2+0xb2>
    2cdc:	14 c0       	rjmp	.+40     	; 0x2d06 <OpenSound2+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cde:	6f 81       	ldd	r22, Y+7	; 0x07
    2ce0:	78 85       	ldd	r23, Y+8	; 0x08
    2ce2:	89 85       	ldd	r24, Y+9	; 0x09
    2ce4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ce6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cea:	dc 01       	movw	r26, r24
    2cec:	cb 01       	movw	r24, r22
    2cee:	9e 83       	std	Y+6, r25	; 0x06
    2cf0:	8d 83       	std	Y+5, r24	; 0x05
    2cf2:	8d 81       	ldd	r24, Y+5	; 0x05
    2cf4:	9e 81       	ldd	r25, Y+6	; 0x06
    2cf6:	9a 83       	std	Y+2, r25	; 0x02
    2cf8:	89 83       	std	Y+1, r24	; 0x01
    2cfa:	89 81       	ldd	r24, Y+1	; 0x01
    2cfc:	9a 81       	ldd	r25, Y+2	; 0x02
    2cfe:	01 97       	sbiw	r24, 0x01	; 1
    2d00:	f1 f7       	brne	.-4      	; 0x2cfe <OpenSound2+0xfa>
    2d02:	9a 83       	std	Y+2, r25	; 0x02
    2d04:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	DIO_U8SetPinValue(DIO_PORTC,DIO_PIN5,DIO_PIN_LOW);
    2d06:	82 e0       	ldi	r24, 0x02	; 2
    2d08:	65 e0       	ldi	r22, 0x05	; 5
    2d0a:	40 e0       	ldi	r20, 0x00	; 0
    2d0c:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
}
    2d10:	2e 96       	adiw	r28, 0x0e	; 14
    2d12:	0f b6       	in	r0, 0x3f	; 63
    2d14:	f8 94       	cli
    2d16:	de bf       	out	0x3e, r29	; 62
    2d18:	0f be       	out	0x3f, r0	; 63
    2d1a:	cd bf       	out	0x3d, r28	; 61
    2d1c:	cf 91       	pop	r28
    2d1e:	df 91       	pop	r29
    2d20:	08 95       	ret

00002d22 <SystemOFF>:
void SystemOFF ( void )
{
    2d22:	df 93       	push	r29
    2d24:	cf 93       	push	r28
    2d26:	cd b7       	in	r28, 0x3d	; 61
    2d28:	de b7       	in	r29, 0x3e	; 62
    2d2a:	2e 97       	sbiw	r28, 0x0e	; 14
    2d2c:	0f b6       	in	r0, 0x3f	; 63
    2d2e:	f8 94       	cli
    2d30:	de bf       	out	0x3e, r29	; 62
    2d32:	0f be       	out	0x3f, r0	; 63
    2d34:	cd bf       	out	0x3d, r28	; 61
	CLCD_voidSendCommand(1);
    2d36:	81 e0       	ldi	r24, 0x01	; 1
    2d38:	0e 94 74 1b 	call	0x36e8	; 0x36e8 <CLCD_voidSendCommand>
	voidSendString(" System Closed");
    2d3c:	84 ee       	ldi	r24, 0xE4	; 228
    2d3e:	90 e0       	ldi	r25, 0x00	; 0
    2d40:	0e 94 44 1c 	call	0x3888	; 0x3888 <voidSendString>
	OpenSound2();
    2d44:	0e 94 02 16 	call	0x2c04	; 0x2c04 <OpenSound2>
    2d48:	80 e0       	ldi	r24, 0x00	; 0
    2d4a:	90 e0       	ldi	r25, 0x00	; 0
    2d4c:	aa ef       	ldi	r26, 0xFA	; 250
    2d4e:	b4 e4       	ldi	r27, 0x44	; 68
    2d50:	8b 87       	std	Y+11, r24	; 0x0b
    2d52:	9c 87       	std	Y+12, r25	; 0x0c
    2d54:	ad 87       	std	Y+13, r26	; 0x0d
    2d56:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d58:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d60:	20 e0       	ldi	r18, 0x00	; 0
    2d62:	30 e0       	ldi	r19, 0x00	; 0
    2d64:	4a e7       	ldi	r20, 0x7A	; 122
    2d66:	55 e4       	ldi	r21, 0x45	; 69
    2d68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d6c:	dc 01       	movw	r26, r24
    2d6e:	cb 01       	movw	r24, r22
    2d70:	8f 83       	std	Y+7, r24	; 0x07
    2d72:	98 87       	std	Y+8, r25	; 0x08
    2d74:	a9 87       	std	Y+9, r26	; 0x09
    2d76:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d78:	6f 81       	ldd	r22, Y+7	; 0x07
    2d7a:	78 85       	ldd	r23, Y+8	; 0x08
    2d7c:	89 85       	ldd	r24, Y+9	; 0x09
    2d7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d80:	20 e0       	ldi	r18, 0x00	; 0
    2d82:	30 e0       	ldi	r19, 0x00	; 0
    2d84:	40 e8       	ldi	r20, 0x80	; 128
    2d86:	5f e3       	ldi	r21, 0x3F	; 63
    2d88:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d8c:	88 23       	and	r24, r24
    2d8e:	2c f4       	brge	.+10     	; 0x2d9a <SystemOFF+0x78>
		__ticks = 1;
    2d90:	81 e0       	ldi	r24, 0x01	; 1
    2d92:	90 e0       	ldi	r25, 0x00	; 0
    2d94:	9e 83       	std	Y+6, r25	; 0x06
    2d96:	8d 83       	std	Y+5, r24	; 0x05
    2d98:	3f c0       	rjmp	.+126    	; 0x2e18 <SystemOFF+0xf6>
	else if (__tmp > 65535)
    2d9a:	6f 81       	ldd	r22, Y+7	; 0x07
    2d9c:	78 85       	ldd	r23, Y+8	; 0x08
    2d9e:	89 85       	ldd	r24, Y+9	; 0x09
    2da0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2da2:	20 e0       	ldi	r18, 0x00	; 0
    2da4:	3f ef       	ldi	r19, 0xFF	; 255
    2da6:	4f e7       	ldi	r20, 0x7F	; 127
    2da8:	57 e4       	ldi	r21, 0x47	; 71
    2daa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2dae:	18 16       	cp	r1, r24
    2db0:	4c f5       	brge	.+82     	; 0x2e04 <SystemOFF+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2db2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2db4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2db6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2db8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dba:	20 e0       	ldi	r18, 0x00	; 0
    2dbc:	30 e0       	ldi	r19, 0x00	; 0
    2dbe:	40 e2       	ldi	r20, 0x20	; 32
    2dc0:	51 e4       	ldi	r21, 0x41	; 65
    2dc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dc6:	dc 01       	movw	r26, r24
    2dc8:	cb 01       	movw	r24, r22
    2dca:	bc 01       	movw	r22, r24
    2dcc:	cd 01       	movw	r24, r26
    2dce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dd2:	dc 01       	movw	r26, r24
    2dd4:	cb 01       	movw	r24, r22
    2dd6:	9e 83       	std	Y+6, r25	; 0x06
    2dd8:	8d 83       	std	Y+5, r24	; 0x05
    2dda:	0f c0       	rjmp	.+30     	; 0x2dfa <SystemOFF+0xd8>
    2ddc:	80 e9       	ldi	r24, 0x90	; 144
    2dde:	91 e0       	ldi	r25, 0x01	; 1
    2de0:	9c 83       	std	Y+4, r25	; 0x04
    2de2:	8b 83       	std	Y+3, r24	; 0x03
    2de4:	8b 81       	ldd	r24, Y+3	; 0x03
    2de6:	9c 81       	ldd	r25, Y+4	; 0x04
    2de8:	01 97       	sbiw	r24, 0x01	; 1
    2dea:	f1 f7       	brne	.-4      	; 0x2de8 <SystemOFF+0xc6>
    2dec:	9c 83       	std	Y+4, r25	; 0x04
    2dee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2df0:	8d 81       	ldd	r24, Y+5	; 0x05
    2df2:	9e 81       	ldd	r25, Y+6	; 0x06
    2df4:	01 97       	sbiw	r24, 0x01	; 1
    2df6:	9e 83       	std	Y+6, r25	; 0x06
    2df8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dfa:	8d 81       	ldd	r24, Y+5	; 0x05
    2dfc:	9e 81       	ldd	r25, Y+6	; 0x06
    2dfe:	00 97       	sbiw	r24, 0x00	; 0
    2e00:	69 f7       	brne	.-38     	; 0x2ddc <SystemOFF+0xba>
    2e02:	14 c0       	rjmp	.+40     	; 0x2e2c <SystemOFF+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e04:	6f 81       	ldd	r22, Y+7	; 0x07
    2e06:	78 85       	ldd	r23, Y+8	; 0x08
    2e08:	89 85       	ldd	r24, Y+9	; 0x09
    2e0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e10:	dc 01       	movw	r26, r24
    2e12:	cb 01       	movw	r24, r22
    2e14:	9e 83       	std	Y+6, r25	; 0x06
    2e16:	8d 83       	std	Y+5, r24	; 0x05
    2e18:	8d 81       	ldd	r24, Y+5	; 0x05
    2e1a:	9e 81       	ldd	r25, Y+6	; 0x06
    2e1c:	9a 83       	std	Y+2, r25	; 0x02
    2e1e:	89 83       	std	Y+1, r24	; 0x01
    2e20:	89 81       	ldd	r24, Y+1	; 0x01
    2e22:	9a 81       	ldd	r25, Y+2	; 0x02
    2e24:	01 97       	sbiw	r24, 0x01	; 1
    2e26:	f1 f7       	brne	.-4      	; 0x2e24 <SystemOFF+0x102>
    2e28:	9a 83       	std	Y+2, r25	; 0x02
    2e2a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2000);
	u8_Flag ++ ;
    2e2c:	80 91 3c 01 	lds	r24, 0x013C
    2e30:	8f 5f       	subi	r24, 0xFF	; 255
    2e32:	80 93 3c 01 	sts	0x013C, r24

}
    2e36:	2e 96       	adiw	r28, 0x0e	; 14
    2e38:	0f b6       	in	r0, 0x3f	; 63
    2e3a:	f8 94       	cli
    2e3c:	de bf       	out	0x3e, r29	; 62
    2e3e:	0f be       	out	0x3f, r0	; 63
    2e40:	cd bf       	out	0x3d, r28	; 61
    2e42:	cf 91       	pop	r28
    2e44:	df 91       	pop	r29
    2e46:	08 95       	ret

00002e48 <LDRCONTROL>:
void LDRCONTROL ( void )
{
    2e48:	df 93       	push	r29
    2e4a:	cf 93       	push	r28
    2e4c:	cd b7       	in	r28, 0x3d	; 61
    2e4e:	de b7       	in	r29, 0x3e	; 62
    2e50:	60 97       	sbiw	r28, 0x10	; 16
    2e52:	0f b6       	in	r0, 0x3f	; 63
    2e54:	f8 94       	cli
    2e56:	de bf       	out	0x3e, r29	; 62
    2e58:	0f be       	out	0x3f, r0	; 63
    2e5a:	cd bf       	out	0x3d, r28	; 61
	uint16 local_u16LDRReading = 0 ;
    2e5c:	18 8a       	std	Y+16, r1	; 0x10
    2e5e:	1f 86       	std	Y+15, r1	; 0x0f
	local_u16LDRReading = LDR_u16PreconfigGetLightLevel();
    2e60:	0e 94 01 25 	call	0x4a02	; 0x4a02 <LDR_u16PreconfigGetLightLevel>
    2e64:	98 8b       	std	Y+16, r25	; 0x10
    2e66:	8f 87       	std	Y+15, r24	; 0x0f
    2e68:	80 e0       	ldi	r24, 0x00	; 0
    2e6a:	90 e0       	ldi	r25, 0x00	; 0
    2e6c:	a8 ec       	ldi	r26, 0xC8	; 200
    2e6e:	b2 e4       	ldi	r27, 0x42	; 66
    2e70:	8b 87       	std	Y+11, r24	; 0x0b
    2e72:	9c 87       	std	Y+12, r25	; 0x0c
    2e74:	ad 87       	std	Y+13, r26	; 0x0d
    2e76:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e78:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e80:	20 e0       	ldi	r18, 0x00	; 0
    2e82:	30 e0       	ldi	r19, 0x00	; 0
    2e84:	4a e7       	ldi	r20, 0x7A	; 122
    2e86:	55 e4       	ldi	r21, 0x45	; 69
    2e88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e8c:	dc 01       	movw	r26, r24
    2e8e:	cb 01       	movw	r24, r22
    2e90:	8f 83       	std	Y+7, r24	; 0x07
    2e92:	98 87       	std	Y+8, r25	; 0x08
    2e94:	a9 87       	std	Y+9, r26	; 0x09
    2e96:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e98:	6f 81       	ldd	r22, Y+7	; 0x07
    2e9a:	78 85       	ldd	r23, Y+8	; 0x08
    2e9c:	89 85       	ldd	r24, Y+9	; 0x09
    2e9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ea0:	20 e0       	ldi	r18, 0x00	; 0
    2ea2:	30 e0       	ldi	r19, 0x00	; 0
    2ea4:	40 e8       	ldi	r20, 0x80	; 128
    2ea6:	5f e3       	ldi	r21, 0x3F	; 63
    2ea8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2eac:	88 23       	and	r24, r24
    2eae:	2c f4       	brge	.+10     	; 0x2eba <LDRCONTROL+0x72>
		__ticks = 1;
    2eb0:	81 e0       	ldi	r24, 0x01	; 1
    2eb2:	90 e0       	ldi	r25, 0x00	; 0
    2eb4:	9e 83       	std	Y+6, r25	; 0x06
    2eb6:	8d 83       	std	Y+5, r24	; 0x05
    2eb8:	3f c0       	rjmp	.+126    	; 0x2f38 <LDRCONTROL+0xf0>
	else if (__tmp > 65535)
    2eba:	6f 81       	ldd	r22, Y+7	; 0x07
    2ebc:	78 85       	ldd	r23, Y+8	; 0x08
    2ebe:	89 85       	ldd	r24, Y+9	; 0x09
    2ec0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ec2:	20 e0       	ldi	r18, 0x00	; 0
    2ec4:	3f ef       	ldi	r19, 0xFF	; 255
    2ec6:	4f e7       	ldi	r20, 0x7F	; 127
    2ec8:	57 e4       	ldi	r21, 0x47	; 71
    2eca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ece:	18 16       	cp	r1, r24
    2ed0:	4c f5       	brge	.+82     	; 0x2f24 <LDRCONTROL+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ed2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ed4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ed6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ed8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2eda:	20 e0       	ldi	r18, 0x00	; 0
    2edc:	30 e0       	ldi	r19, 0x00	; 0
    2ede:	40 e2       	ldi	r20, 0x20	; 32
    2ee0:	51 e4       	ldi	r21, 0x41	; 65
    2ee2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ee6:	dc 01       	movw	r26, r24
    2ee8:	cb 01       	movw	r24, r22
    2eea:	bc 01       	movw	r22, r24
    2eec:	cd 01       	movw	r24, r26
    2eee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ef2:	dc 01       	movw	r26, r24
    2ef4:	cb 01       	movw	r24, r22
    2ef6:	9e 83       	std	Y+6, r25	; 0x06
    2ef8:	8d 83       	std	Y+5, r24	; 0x05
    2efa:	0f c0       	rjmp	.+30     	; 0x2f1a <LDRCONTROL+0xd2>
    2efc:	80 e9       	ldi	r24, 0x90	; 144
    2efe:	91 e0       	ldi	r25, 0x01	; 1
    2f00:	9c 83       	std	Y+4, r25	; 0x04
    2f02:	8b 83       	std	Y+3, r24	; 0x03
    2f04:	8b 81       	ldd	r24, Y+3	; 0x03
    2f06:	9c 81       	ldd	r25, Y+4	; 0x04
    2f08:	01 97       	sbiw	r24, 0x01	; 1
    2f0a:	f1 f7       	brne	.-4      	; 0x2f08 <LDRCONTROL+0xc0>
    2f0c:	9c 83       	std	Y+4, r25	; 0x04
    2f0e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f10:	8d 81       	ldd	r24, Y+5	; 0x05
    2f12:	9e 81       	ldd	r25, Y+6	; 0x06
    2f14:	01 97       	sbiw	r24, 0x01	; 1
    2f16:	9e 83       	std	Y+6, r25	; 0x06
    2f18:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f1a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f1c:	9e 81       	ldd	r25, Y+6	; 0x06
    2f1e:	00 97       	sbiw	r24, 0x00	; 0
    2f20:	69 f7       	brne	.-38     	; 0x2efc <LDRCONTROL+0xb4>
    2f22:	14 c0       	rjmp	.+40     	; 0x2f4c <LDRCONTROL+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f24:	6f 81       	ldd	r22, Y+7	; 0x07
    2f26:	78 85       	ldd	r23, Y+8	; 0x08
    2f28:	89 85       	ldd	r24, Y+9	; 0x09
    2f2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f30:	dc 01       	movw	r26, r24
    2f32:	cb 01       	movw	r24, r22
    2f34:	9e 83       	std	Y+6, r25	; 0x06
    2f36:	8d 83       	std	Y+5, r24	; 0x05
    2f38:	8d 81       	ldd	r24, Y+5	; 0x05
    2f3a:	9e 81       	ldd	r25, Y+6	; 0x06
    2f3c:	9a 83       	std	Y+2, r25	; 0x02
    2f3e:	89 83       	std	Y+1, r24	; 0x01
    2f40:	89 81       	ldd	r24, Y+1	; 0x01
    2f42:	9a 81       	ldd	r25, Y+2	; 0x02
    2f44:	01 97       	sbiw	r24, 0x01	; 1
    2f46:	f1 f7       	brne	.-4      	; 0x2f44 <LDRCONTROL+0xfc>
    2f48:	9a 83       	std	Y+2, r25	; 0x02
    2f4a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
	if (local_u16LDRReading < 5)
    2f4c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f4e:	98 89       	ldd	r25, Y+16	; 0x10
    2f50:	85 30       	cpi	r24, 0x05	; 5
    2f52:	91 05       	cpc	r25, r1
    2f54:	98 f5       	brcc	.+102    	; 0x2fbc <LDRCONTROL+0x174>
	{
		DIO_U8SetPinValue(DIO_PORTC,DIO_PIN0,DIO_PIN_HIGH);
    2f56:	82 e0       	ldi	r24, 0x02	; 2
    2f58:	60 e0       	ldi	r22, 0x00	; 0
    2f5a:	41 e0       	ldi	r20, 0x01	; 1
    2f5c:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
		DIO_U8SetPinValue(DIO_PORTC,DIO_PIN1,DIO_PIN_HIGH);
    2f60:	82 e0       	ldi	r24, 0x02	; 2
    2f62:	61 e0       	ldi	r22, 0x01	; 1
    2f64:	41 e0       	ldi	r20, 0x01	; 1
    2f66:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
		DIO_U8SetPinValue(DIO_PORTC,DIO_PIN2,DIO_PIN_HIGH);
    2f6a:	82 e0       	ldi	r24, 0x02	; 2
    2f6c:	62 e0       	ldi	r22, 0x02	; 2
    2f6e:	41 e0       	ldi	r20, 0x01	; 1
    2f70:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
		DIO_U8SetPinValue(DIO_PORTC,DIO_PIN3,DIO_PIN_HIGH);
    2f74:	82 e0       	ldi	r24, 0x02	; 2
    2f76:	63 e0       	ldi	r22, 0x03	; 3
    2f78:	41 e0       	ldi	r20, 0x01	; 1
    2f7a:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
		DIO_U8SetPinValue(DIO_PORTC,DIO_PIN4,DIO_PIN_HIGH);
    2f7e:	82 e0       	ldi	r24, 0x02	; 2
    2f80:	64 e0       	ldi	r22, 0x04	; 4
    2f82:	41 e0       	ldi	r20, 0x01	; 1
    2f84:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
		DIO_U8SetPinValue(DIO_PORTC,DIO_PIN5,DIO_PIN_HIGH);
    2f88:	82 e0       	ldi	r24, 0x02	; 2
    2f8a:	65 e0       	ldi	r22, 0x05	; 5
    2f8c:	41 e0       	ldi	r20, 0x01	; 1
    2f8e:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
		DIO_U8SetPinValue(DIO_PORTC,DIO_PIN6,DIO_PIN_HIGH);
    2f92:	82 e0       	ldi	r24, 0x02	; 2
    2f94:	66 e0       	ldi	r22, 0x06	; 6
    2f96:	41 e0       	ldi	r20, 0x01	; 1
    2f98:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
		DIO_U8SetPinValue(DIO_PORTC,DIO_PIN7,DIO_PIN_HIGH);
    2f9c:	82 e0       	ldi	r24, 0x02	; 2
    2f9e:	67 e0       	ldi	r22, 0x07	; 7
    2fa0:	41 e0       	ldi	r20, 0x01	; 1
    2fa2:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
		CLCD_voidGoToXY(15u , 1u);
    2fa6:	8f e0       	ldi	r24, 0x0F	; 15
    2fa8:	61 e0       	ldi	r22, 0x01	; 1
    2faa:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <CLCD_voidGoToXY>
		voidSendNumber(8);
    2fae:	68 e0       	ldi	r22, 0x08	; 8
    2fb0:	70 e0       	ldi	r23, 0x00	; 0
    2fb2:	80 e0       	ldi	r24, 0x00	; 0
    2fb4:	90 e0       	ldi	r25, 0x00	; 0
    2fb6:	0e 94 82 1c 	call	0x3904	; 0x3904 <voidSendNumber>
    2fba:	e2 c1       	rjmp	.+964    	; 0x3380 <LDRCONTROL+0x538>
	}
	else if ((local_u16LDRReading < 15) && (local_u16LDRReading >5 ) )
    2fbc:	8f 85       	ldd	r24, Y+15	; 0x0f
    2fbe:	98 89       	ldd	r25, Y+16	; 0x10
    2fc0:	8f 30       	cpi	r24, 0x0F	; 15
    2fc2:	91 05       	cpc	r25, r1
    2fc4:	c0 f5       	brcc	.+112    	; 0x3036 <LDRCONTROL+0x1ee>
    2fc6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2fc8:	98 89       	ldd	r25, Y+16	; 0x10
    2fca:	86 30       	cpi	r24, 0x06	; 6
    2fcc:	91 05       	cpc	r25, r1
    2fce:	98 f1       	brcs	.+102    	; 0x3036 <LDRCONTROL+0x1ee>
	{
		DIO_U8SetPinValue(DIO_PORTC,DIO_PIN0,DIO_PIN_HIGH);
    2fd0:	82 e0       	ldi	r24, 0x02	; 2
    2fd2:	60 e0       	ldi	r22, 0x00	; 0
    2fd4:	41 e0       	ldi	r20, 0x01	; 1
    2fd6:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
		DIO_U8SetPinValue(DIO_PORTC,DIO_PIN1,DIO_PIN_HIGH);
    2fda:	82 e0       	ldi	r24, 0x02	; 2
    2fdc:	61 e0       	ldi	r22, 0x01	; 1
    2fde:	41 e0       	ldi	r20, 0x01	; 1
    2fe0:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
		DIO_U8SetPinValue(DIO_PORTC,DIO_PIN2,DIO_PIN_HIGH);
    2fe4:	82 e0       	ldi	r24, 0x02	; 2
    2fe6:	62 e0       	ldi	r22, 0x02	; 2
    2fe8:	41 e0       	ldi	r20, 0x01	; 1
    2fea:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
		DIO_U8SetPinValue(DIO_PORTC,DIO_PIN3,DIO_PIN_HIGH);
    2fee:	82 e0       	ldi	r24, 0x02	; 2
    2ff0:	63 e0       	ldi	r22, 0x03	; 3
    2ff2:	41 e0       	ldi	r20, 0x01	; 1
    2ff4:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
		DIO_U8SetPinValue(DIO_PORTC,DIO_PIN4,DIO_PIN_HIGH);
    2ff8:	82 e0       	ldi	r24, 0x02	; 2
    2ffa:	64 e0       	ldi	r22, 0x04	; 4
    2ffc:	41 e0       	ldi	r20, 0x01	; 1
    2ffe:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
		DIO_U8SetPinValue(DIO_PORTC,DIO_PIN5,DIO_PIN_HIGH);
    3002:	82 e0       	ldi	r24, 0x02	; 2
    3004:	65 e0       	ldi	r22, 0x05	; 5
    3006:	41 e0       	ldi	r20, 0x01	; 1
    3008:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
		DIO_U8SetPinValue(DIO_PORTC,DIO_PIN6,DIO_PIN_HIGH);
    300c:	82 e0       	ldi	r24, 0x02	; 2
    300e:	66 e0       	ldi	r22, 0x06	; 6
    3010:	41 e0       	ldi	r20, 0x01	; 1
    3012:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
		DIO_U8SetPinValue(DIO_PORTC,DIO_PIN7,DIO_PIN_LOW);
    3016:	82 e0       	ldi	r24, 0x02	; 2
    3018:	67 e0       	ldi	r22, 0x07	; 7
    301a:	40 e0       	ldi	r20, 0x00	; 0
    301c:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
		CLCD_voidGoToXY(15u , 1u);
    3020:	8f e0       	ldi	r24, 0x0F	; 15
    3022:	61 e0       	ldi	r22, 0x01	; 1
    3024:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <CLCD_voidGoToXY>
		voidSendNumber(7);
    3028:	67 e0       	ldi	r22, 0x07	; 7
    302a:	70 e0       	ldi	r23, 0x00	; 0
    302c:	80 e0       	ldi	r24, 0x00	; 0
    302e:	90 e0       	ldi	r25, 0x00	; 0
    3030:	0e 94 82 1c 	call	0x3904	; 0x3904 <voidSendNumber>
    3034:	a5 c1       	rjmp	.+842    	; 0x3380 <LDRCONTROL+0x538>
	}
	else if ((local_u16LDRReading < 25) && (local_u16LDRReading >15 ) )
    3036:	8f 85       	ldd	r24, Y+15	; 0x0f
    3038:	98 89       	ldd	r25, Y+16	; 0x10
    303a:	89 31       	cpi	r24, 0x19	; 25
    303c:	91 05       	cpc	r25, r1
    303e:	c0 f5       	brcc	.+112    	; 0x30b0 <LDRCONTROL+0x268>
    3040:	8f 85       	ldd	r24, Y+15	; 0x0f
    3042:	98 89       	ldd	r25, Y+16	; 0x10
    3044:	80 31       	cpi	r24, 0x10	; 16
    3046:	91 05       	cpc	r25, r1
    3048:	98 f1       	brcs	.+102    	; 0x30b0 <LDRCONTROL+0x268>
	{
		DIO_U8SetPinValue(DIO_PORTC,DIO_PIN0,DIO_PIN_HIGH);
    304a:	82 e0       	ldi	r24, 0x02	; 2
    304c:	60 e0       	ldi	r22, 0x00	; 0
    304e:	41 e0       	ldi	r20, 0x01	; 1
    3050:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
		DIO_U8SetPinValue(DIO_PORTC,DIO_PIN1,DIO_PIN_HIGH);
    3054:	82 e0       	ldi	r24, 0x02	; 2
    3056:	61 e0       	ldi	r22, 0x01	; 1
    3058:	41 e0       	ldi	r20, 0x01	; 1
    305a:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
		DIO_U8SetPinValue(DIO_PORTC,DIO_PIN2,DIO_PIN_HIGH);
    305e:	82 e0       	ldi	r24, 0x02	; 2
    3060:	62 e0       	ldi	r22, 0x02	; 2
    3062:	41 e0       	ldi	r20, 0x01	; 1
    3064:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
		DIO_U8SetPinValue(DIO_PORTC,DIO_PIN3,DIO_PIN_HIGH);
    3068:	82 e0       	ldi	r24, 0x02	; 2
    306a:	63 e0       	ldi	r22, 0x03	; 3
    306c:	41 e0       	ldi	r20, 0x01	; 1
    306e:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
		DIO_U8SetPinValue(DIO_PORTC,DIO_PIN4,DIO_PIN_HIGH);
    3072:	82 e0       	ldi	r24, 0x02	; 2
    3074:	64 e0       	ldi	r22, 0x04	; 4
    3076:	41 e0       	ldi	r20, 0x01	; 1
    3078:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
		DIO_U8SetPinValue(DIO_PORTC,DIO_PIN5,DIO_PIN_HIGH);
    307c:	82 e0       	ldi	r24, 0x02	; 2
    307e:	65 e0       	ldi	r22, 0x05	; 5
    3080:	41 e0       	ldi	r20, 0x01	; 1
    3082:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
		DIO_U8SetPinValue(DIO_PORTC,DIO_PIN6,DIO_PIN_LOW);
    3086:	82 e0       	ldi	r24, 0x02	; 2
    3088:	66 e0       	ldi	r22, 0x06	; 6
    308a:	40 e0       	ldi	r20, 0x00	; 0
    308c:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
		DIO_U8SetPinValue(DIO_PORTC,DIO_PIN7,DIO_PIN_LOW);
    3090:	82 e0       	ldi	r24, 0x02	; 2
    3092:	67 e0       	ldi	r22, 0x07	; 7
    3094:	40 e0       	ldi	r20, 0x00	; 0
    3096:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
		CLCD_voidGoToXY(15u , 1u);
    309a:	8f e0       	ldi	r24, 0x0F	; 15
    309c:	61 e0       	ldi	r22, 0x01	; 1
    309e:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <CLCD_voidGoToXY>
		voidSendNumber(6);
    30a2:	66 e0       	ldi	r22, 0x06	; 6
    30a4:	70 e0       	ldi	r23, 0x00	; 0
    30a6:	80 e0       	ldi	r24, 0x00	; 0
    30a8:	90 e0       	ldi	r25, 0x00	; 0
    30aa:	0e 94 82 1c 	call	0x3904	; 0x3904 <voidSendNumber>
    30ae:	68 c1       	rjmp	.+720    	; 0x3380 <LDRCONTROL+0x538>
	}
	else if ((local_u16LDRReading < 45) && (local_u16LDRReading >25 ) )
    30b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    30b2:	98 89       	ldd	r25, Y+16	; 0x10
    30b4:	8d 32       	cpi	r24, 0x2D	; 45
    30b6:	91 05       	cpc	r25, r1
    30b8:	c0 f5       	brcc	.+112    	; 0x312a <LDRCONTROL+0x2e2>
    30ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    30bc:	98 89       	ldd	r25, Y+16	; 0x10
    30be:	8a 31       	cpi	r24, 0x1A	; 26
    30c0:	91 05       	cpc	r25, r1
    30c2:	98 f1       	brcs	.+102    	; 0x312a <LDRCONTROL+0x2e2>
	{
		DIO_U8SetPinValue(DIO_PORTC,DIO_PIN0,DIO_PIN_HIGH);
    30c4:	82 e0       	ldi	r24, 0x02	; 2
    30c6:	60 e0       	ldi	r22, 0x00	; 0
    30c8:	41 e0       	ldi	r20, 0x01	; 1
    30ca:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
		DIO_U8SetPinValue(DIO_PORTC,DIO_PIN1,DIO_PIN_HIGH);
    30ce:	82 e0       	ldi	r24, 0x02	; 2
    30d0:	61 e0       	ldi	r22, 0x01	; 1
    30d2:	41 e0       	ldi	r20, 0x01	; 1
    30d4:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
		DIO_U8SetPinValue(DIO_PORTC,DIO_PIN2,DIO_PIN_HIGH);
    30d8:	82 e0       	ldi	r24, 0x02	; 2
    30da:	62 e0       	ldi	r22, 0x02	; 2
    30dc:	41 e0       	ldi	r20, 0x01	; 1
    30de:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
		DIO_U8SetPinValue(DIO_PORTC,DIO_PIN3,DIO_PIN_HIGH);
    30e2:	82 e0       	ldi	r24, 0x02	; 2
    30e4:	63 e0       	ldi	r22, 0x03	; 3
    30e6:	41 e0       	ldi	r20, 0x01	; 1
    30e8:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
		DIO_U8SetPinValue(DIO_PORTC,DIO_PIN4,DIO_PIN_HIGH);
    30ec:	82 e0       	ldi	r24, 0x02	; 2
    30ee:	64 e0       	ldi	r22, 0x04	; 4
    30f0:	41 e0       	ldi	r20, 0x01	; 1
    30f2:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
		DIO_U8SetPinValue(DIO_PORTC,DIO_PIN5,DIO_PIN_LOW);
    30f6:	82 e0       	ldi	r24, 0x02	; 2
    30f8:	65 e0       	ldi	r22, 0x05	; 5
    30fa:	40 e0       	ldi	r20, 0x00	; 0
    30fc:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
		DIO_U8SetPinValue(DIO_PORTC,DIO_PIN6,DIO_PIN_LOW);
    3100:	82 e0       	ldi	r24, 0x02	; 2
    3102:	66 e0       	ldi	r22, 0x06	; 6
    3104:	40 e0       	ldi	r20, 0x00	; 0
    3106:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
		DIO_U8SetPinValue(DIO_PORTC,DIO_PIN7,DIO_PIN_LOW);
    310a:	82 e0       	ldi	r24, 0x02	; 2
    310c:	67 e0       	ldi	r22, 0x07	; 7
    310e:	40 e0       	ldi	r20, 0x00	; 0
    3110:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
		CLCD_voidGoToXY(15u , 1u);
    3114:	8f e0       	ldi	r24, 0x0F	; 15
    3116:	61 e0       	ldi	r22, 0x01	; 1
    3118:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <CLCD_voidGoToXY>
		voidSendNumber(5);
    311c:	65 e0       	ldi	r22, 0x05	; 5
    311e:	70 e0       	ldi	r23, 0x00	; 0
    3120:	80 e0       	ldi	r24, 0x00	; 0
    3122:	90 e0       	ldi	r25, 0x00	; 0
    3124:	0e 94 82 1c 	call	0x3904	; 0x3904 <voidSendNumber>
    3128:	2b c1       	rjmp	.+598    	; 0x3380 <LDRCONTROL+0x538>
	}
	else if ((local_u16LDRReading < 90) && (local_u16LDRReading >45 ) )
    312a:	8f 85       	ldd	r24, Y+15	; 0x0f
    312c:	98 89       	ldd	r25, Y+16	; 0x10
    312e:	8a 35       	cpi	r24, 0x5A	; 90
    3130:	91 05       	cpc	r25, r1
    3132:	c0 f5       	brcc	.+112    	; 0x31a4 <LDRCONTROL+0x35c>
    3134:	8f 85       	ldd	r24, Y+15	; 0x0f
    3136:	98 89       	ldd	r25, Y+16	; 0x10
    3138:	8e 32       	cpi	r24, 0x2E	; 46
    313a:	91 05       	cpc	r25, r1
    313c:	98 f1       	brcs	.+102    	; 0x31a4 <LDRCONTROL+0x35c>
	{
		DIO_U8SetPinValue(DIO_PORTC,DIO_PIN0,DIO_PIN_HIGH);
    313e:	82 e0       	ldi	r24, 0x02	; 2
    3140:	60 e0       	ldi	r22, 0x00	; 0
    3142:	41 e0       	ldi	r20, 0x01	; 1
    3144:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
		DIO_U8SetPinValue(DIO_PORTC,DIO_PIN1,DIO_PIN_HIGH);
    3148:	82 e0       	ldi	r24, 0x02	; 2
    314a:	61 e0       	ldi	r22, 0x01	; 1
    314c:	41 e0       	ldi	r20, 0x01	; 1
    314e:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
		DIO_U8SetPinValue(DIO_PORTC,DIO_PIN2,DIO_PIN_HIGH);
    3152:	82 e0       	ldi	r24, 0x02	; 2
    3154:	62 e0       	ldi	r22, 0x02	; 2
    3156:	41 e0       	ldi	r20, 0x01	; 1
    3158:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
		DIO_U8SetPinValue(DIO_PORTC,DIO_PIN3,DIO_PIN_HIGH);
    315c:	82 e0       	ldi	r24, 0x02	; 2
    315e:	63 e0       	ldi	r22, 0x03	; 3
    3160:	41 e0       	ldi	r20, 0x01	; 1
    3162:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
		DIO_U8SetPinValue(DIO_PORTC,DIO_PIN4,DIO_PIN_LOW);
    3166:	82 e0       	ldi	r24, 0x02	; 2
    3168:	64 e0       	ldi	r22, 0x04	; 4
    316a:	40 e0       	ldi	r20, 0x00	; 0
    316c:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
		DIO_U8SetPinValue(DIO_PORTC,DIO_PIN5,DIO_PIN_LOW);
    3170:	82 e0       	ldi	r24, 0x02	; 2
    3172:	65 e0       	ldi	r22, 0x05	; 5
    3174:	40 e0       	ldi	r20, 0x00	; 0
    3176:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
		DIO_U8SetPinValue(DIO_PORTC,DIO_PIN6,DIO_PIN_LOW);
    317a:	82 e0       	ldi	r24, 0x02	; 2
    317c:	66 e0       	ldi	r22, 0x06	; 6
    317e:	40 e0       	ldi	r20, 0x00	; 0
    3180:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
		DIO_U8SetPinValue(DIO_PORTC,DIO_PIN7,DIO_PIN_LOW);
    3184:	82 e0       	ldi	r24, 0x02	; 2
    3186:	67 e0       	ldi	r22, 0x07	; 7
    3188:	40 e0       	ldi	r20, 0x00	; 0
    318a:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
		CLCD_voidGoToXY(15u , 1u);
    318e:	8f e0       	ldi	r24, 0x0F	; 15
    3190:	61 e0       	ldi	r22, 0x01	; 1
    3192:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <CLCD_voidGoToXY>
		voidSendNumber(4);
    3196:	64 e0       	ldi	r22, 0x04	; 4
    3198:	70 e0       	ldi	r23, 0x00	; 0
    319a:	80 e0       	ldi	r24, 0x00	; 0
    319c:	90 e0       	ldi	r25, 0x00	; 0
    319e:	0e 94 82 1c 	call	0x3904	; 0x3904 <voidSendNumber>
    31a2:	ee c0       	rjmp	.+476    	; 0x3380 <LDRCONTROL+0x538>
	}
	else if ((local_u16LDRReading < 130) && (local_u16LDRReading >90 ) )
    31a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    31a6:	98 89       	ldd	r25, Y+16	; 0x10
    31a8:	82 38       	cpi	r24, 0x82	; 130
    31aa:	91 05       	cpc	r25, r1
    31ac:	c0 f5       	brcc	.+112    	; 0x321e <LDRCONTROL+0x3d6>
    31ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    31b0:	98 89       	ldd	r25, Y+16	; 0x10
    31b2:	8b 35       	cpi	r24, 0x5B	; 91
    31b4:	91 05       	cpc	r25, r1
    31b6:	98 f1       	brcs	.+102    	; 0x321e <LDRCONTROL+0x3d6>
	{
		DIO_U8SetPinValue(DIO_PORTC,DIO_PIN0,DIO_PIN_HIGH);
    31b8:	82 e0       	ldi	r24, 0x02	; 2
    31ba:	60 e0       	ldi	r22, 0x00	; 0
    31bc:	41 e0       	ldi	r20, 0x01	; 1
    31be:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
		DIO_U8SetPinValue(DIO_PORTC,DIO_PIN1,DIO_PIN_HIGH);
    31c2:	82 e0       	ldi	r24, 0x02	; 2
    31c4:	61 e0       	ldi	r22, 0x01	; 1
    31c6:	41 e0       	ldi	r20, 0x01	; 1
    31c8:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
		DIO_U8SetPinValue(DIO_PORTC,DIO_PIN2,DIO_PIN_HIGH);
    31cc:	82 e0       	ldi	r24, 0x02	; 2
    31ce:	62 e0       	ldi	r22, 0x02	; 2
    31d0:	41 e0       	ldi	r20, 0x01	; 1
    31d2:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
		DIO_U8SetPinValue(DIO_PORTC,DIO_PIN3,DIO_PIN_LOW);
    31d6:	82 e0       	ldi	r24, 0x02	; 2
    31d8:	63 e0       	ldi	r22, 0x03	; 3
    31da:	40 e0       	ldi	r20, 0x00	; 0
    31dc:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
		DIO_U8SetPinValue(DIO_PORTC,DIO_PIN4,DIO_PIN_LOW);
    31e0:	82 e0       	ldi	r24, 0x02	; 2
    31e2:	64 e0       	ldi	r22, 0x04	; 4
    31e4:	40 e0       	ldi	r20, 0x00	; 0
    31e6:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
		DIO_U8SetPinValue(DIO_PORTC,DIO_PIN5,DIO_PIN_LOW);
    31ea:	82 e0       	ldi	r24, 0x02	; 2
    31ec:	65 e0       	ldi	r22, 0x05	; 5
    31ee:	40 e0       	ldi	r20, 0x00	; 0
    31f0:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
		DIO_U8SetPinValue(DIO_PORTC,DIO_PIN6,DIO_PIN_LOW);
    31f4:	82 e0       	ldi	r24, 0x02	; 2
    31f6:	66 e0       	ldi	r22, 0x06	; 6
    31f8:	40 e0       	ldi	r20, 0x00	; 0
    31fa:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
		DIO_U8SetPinValue(DIO_PORTC,DIO_PIN7,DIO_PIN_LOW);
    31fe:	82 e0       	ldi	r24, 0x02	; 2
    3200:	67 e0       	ldi	r22, 0x07	; 7
    3202:	40 e0       	ldi	r20, 0x00	; 0
    3204:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
		CLCD_voidGoToXY(15u , 1u);
    3208:	8f e0       	ldi	r24, 0x0F	; 15
    320a:	61 e0       	ldi	r22, 0x01	; 1
    320c:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <CLCD_voidGoToXY>
		voidSendNumber(3);
    3210:	63 e0       	ldi	r22, 0x03	; 3
    3212:	70 e0       	ldi	r23, 0x00	; 0
    3214:	80 e0       	ldi	r24, 0x00	; 0
    3216:	90 e0       	ldi	r25, 0x00	; 0
    3218:	0e 94 82 1c 	call	0x3904	; 0x3904 <voidSendNumber>
    321c:	b1 c0       	rjmp	.+354    	; 0x3380 <LDRCONTROL+0x538>
	}
	else if ((local_u16LDRReading < 175) && (local_u16LDRReading >130 ) )
    321e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3220:	98 89       	ldd	r25, Y+16	; 0x10
    3222:	8f 3a       	cpi	r24, 0xAF	; 175
    3224:	91 05       	cpc	r25, r1
    3226:	c0 f5       	brcc	.+112    	; 0x3298 <LDRCONTROL+0x450>
    3228:	8f 85       	ldd	r24, Y+15	; 0x0f
    322a:	98 89       	ldd	r25, Y+16	; 0x10
    322c:	83 38       	cpi	r24, 0x83	; 131
    322e:	91 05       	cpc	r25, r1
    3230:	98 f1       	brcs	.+102    	; 0x3298 <LDRCONTROL+0x450>
	{
		DIO_U8SetPinValue(DIO_PORTC,DIO_PIN0,DIO_PIN_HIGH);
    3232:	82 e0       	ldi	r24, 0x02	; 2
    3234:	60 e0       	ldi	r22, 0x00	; 0
    3236:	41 e0       	ldi	r20, 0x01	; 1
    3238:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
		DIO_U8SetPinValue(DIO_PORTC,DIO_PIN1,DIO_PIN_HIGH);
    323c:	82 e0       	ldi	r24, 0x02	; 2
    323e:	61 e0       	ldi	r22, 0x01	; 1
    3240:	41 e0       	ldi	r20, 0x01	; 1
    3242:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
		DIO_U8SetPinValue(DIO_PORTC,DIO_PIN2,DIO_PIN_LOW);
    3246:	82 e0       	ldi	r24, 0x02	; 2
    3248:	62 e0       	ldi	r22, 0x02	; 2
    324a:	40 e0       	ldi	r20, 0x00	; 0
    324c:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
		DIO_U8SetPinValue(DIO_PORTC,DIO_PIN3,DIO_PIN_LOW);
    3250:	82 e0       	ldi	r24, 0x02	; 2
    3252:	63 e0       	ldi	r22, 0x03	; 3
    3254:	40 e0       	ldi	r20, 0x00	; 0
    3256:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
		DIO_U8SetPinValue(DIO_PORTC,DIO_PIN4,DIO_PIN_LOW);
    325a:	82 e0       	ldi	r24, 0x02	; 2
    325c:	64 e0       	ldi	r22, 0x04	; 4
    325e:	40 e0       	ldi	r20, 0x00	; 0
    3260:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
		DIO_U8SetPinValue(DIO_PORTC,DIO_PIN5,DIO_PIN_LOW);
    3264:	82 e0       	ldi	r24, 0x02	; 2
    3266:	65 e0       	ldi	r22, 0x05	; 5
    3268:	40 e0       	ldi	r20, 0x00	; 0
    326a:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
		DIO_U8SetPinValue(DIO_PORTC,DIO_PIN6,DIO_PIN_LOW);
    326e:	82 e0       	ldi	r24, 0x02	; 2
    3270:	66 e0       	ldi	r22, 0x06	; 6
    3272:	40 e0       	ldi	r20, 0x00	; 0
    3274:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
		DIO_U8SetPinValue(DIO_PORTC,DIO_PIN7,DIO_PIN_LOW);
    3278:	82 e0       	ldi	r24, 0x02	; 2
    327a:	67 e0       	ldi	r22, 0x07	; 7
    327c:	40 e0       	ldi	r20, 0x00	; 0
    327e:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
		CLCD_voidGoToXY(15u , 1u);
    3282:	8f e0       	ldi	r24, 0x0F	; 15
    3284:	61 e0       	ldi	r22, 0x01	; 1
    3286:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <CLCD_voidGoToXY>
		voidSendNumber(2);
    328a:	62 e0       	ldi	r22, 0x02	; 2
    328c:	70 e0       	ldi	r23, 0x00	; 0
    328e:	80 e0       	ldi	r24, 0x00	; 0
    3290:	90 e0       	ldi	r25, 0x00	; 0
    3292:	0e 94 82 1c 	call	0x3904	; 0x3904 <voidSendNumber>
    3296:	74 c0       	rjmp	.+232    	; 0x3380 <LDRCONTROL+0x538>
	}
	else if ((local_u16LDRReading > 175) && (local_u16LDRReading <215 ) )
    3298:	8f 85       	ldd	r24, Y+15	; 0x0f
    329a:	98 89       	ldd	r25, Y+16	; 0x10
    329c:	80 3b       	cpi	r24, 0xB0	; 176
    329e:	91 05       	cpc	r25, r1
    32a0:	c0 f1       	brcs	.+112    	; 0x3312 <LDRCONTROL+0x4ca>
    32a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    32a4:	98 89       	ldd	r25, Y+16	; 0x10
    32a6:	87 3d       	cpi	r24, 0xD7	; 215
    32a8:	91 05       	cpc	r25, r1
    32aa:	98 f5       	brcc	.+102    	; 0x3312 <LDRCONTROL+0x4ca>
	{
		DIO_U8SetPinValue(DIO_PORTC,DIO_PIN0,DIO_PIN_HIGH);
    32ac:	82 e0       	ldi	r24, 0x02	; 2
    32ae:	60 e0       	ldi	r22, 0x00	; 0
    32b0:	41 e0       	ldi	r20, 0x01	; 1
    32b2:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
		DIO_U8SetPinValue(DIO_PORTC,DIO_PIN1,DIO_PIN_LOW);
    32b6:	82 e0       	ldi	r24, 0x02	; 2
    32b8:	61 e0       	ldi	r22, 0x01	; 1
    32ba:	40 e0       	ldi	r20, 0x00	; 0
    32bc:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
		DIO_U8SetPinValue(DIO_PORTC,DIO_PIN2,DIO_PIN_LOW);
    32c0:	82 e0       	ldi	r24, 0x02	; 2
    32c2:	62 e0       	ldi	r22, 0x02	; 2
    32c4:	40 e0       	ldi	r20, 0x00	; 0
    32c6:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
		DIO_U8SetPinValue(DIO_PORTC,DIO_PIN3,DIO_PIN_LOW);
    32ca:	82 e0       	ldi	r24, 0x02	; 2
    32cc:	63 e0       	ldi	r22, 0x03	; 3
    32ce:	40 e0       	ldi	r20, 0x00	; 0
    32d0:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
		DIO_U8SetPinValue(DIO_PORTC,DIO_PIN4,DIO_PIN_LOW);
    32d4:	82 e0       	ldi	r24, 0x02	; 2
    32d6:	64 e0       	ldi	r22, 0x04	; 4
    32d8:	40 e0       	ldi	r20, 0x00	; 0
    32da:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
		DIO_U8SetPinValue(DIO_PORTC,DIO_PIN5,DIO_PIN_LOW);
    32de:	82 e0       	ldi	r24, 0x02	; 2
    32e0:	65 e0       	ldi	r22, 0x05	; 5
    32e2:	40 e0       	ldi	r20, 0x00	; 0
    32e4:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
		DIO_U8SetPinValue(DIO_PORTC,DIO_PIN6,DIO_PIN_LOW);
    32e8:	82 e0       	ldi	r24, 0x02	; 2
    32ea:	66 e0       	ldi	r22, 0x06	; 6
    32ec:	40 e0       	ldi	r20, 0x00	; 0
    32ee:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
		DIO_U8SetPinValue(DIO_PORTC,DIO_PIN7,DIO_PIN_LOW);
    32f2:	82 e0       	ldi	r24, 0x02	; 2
    32f4:	67 e0       	ldi	r22, 0x07	; 7
    32f6:	40 e0       	ldi	r20, 0x00	; 0
    32f8:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
		CLCD_voidGoToXY(15u , 1u);
    32fc:	8f e0       	ldi	r24, 0x0F	; 15
    32fe:	61 e0       	ldi	r22, 0x01	; 1
    3300:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <CLCD_voidGoToXY>
		voidSendNumber(1);
    3304:	61 e0       	ldi	r22, 0x01	; 1
    3306:	70 e0       	ldi	r23, 0x00	; 0
    3308:	80 e0       	ldi	r24, 0x00	; 0
    330a:	90 e0       	ldi	r25, 0x00	; 0
    330c:	0e 94 82 1c 	call	0x3904	; 0x3904 <voidSendNumber>
    3310:	37 c0       	rjmp	.+110    	; 0x3380 <LDRCONTROL+0x538>
	}
	else if (local_u16LDRReading > 215)
    3312:	8f 85       	ldd	r24, Y+15	; 0x0f
    3314:	98 89       	ldd	r25, Y+16	; 0x10
    3316:	88 3d       	cpi	r24, 0xD8	; 216
    3318:	91 05       	cpc	r25, r1
    331a:	90 f1       	brcs	.+100    	; 0x3380 <LDRCONTROL+0x538>
	{
		DIO_U8SetPinValue(DIO_PORTC,DIO_PIN0,DIO_PIN_LOW);
    331c:	82 e0       	ldi	r24, 0x02	; 2
    331e:	60 e0       	ldi	r22, 0x00	; 0
    3320:	40 e0       	ldi	r20, 0x00	; 0
    3322:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
		DIO_U8SetPinValue(DIO_PORTC,DIO_PIN1,DIO_PIN_LOW);
    3326:	82 e0       	ldi	r24, 0x02	; 2
    3328:	61 e0       	ldi	r22, 0x01	; 1
    332a:	40 e0       	ldi	r20, 0x00	; 0
    332c:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
		DIO_U8SetPinValue(DIO_PORTC,DIO_PIN2,DIO_PIN_LOW);
    3330:	82 e0       	ldi	r24, 0x02	; 2
    3332:	62 e0       	ldi	r22, 0x02	; 2
    3334:	40 e0       	ldi	r20, 0x00	; 0
    3336:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
		DIO_U8SetPinValue(DIO_PORTC,DIO_PIN3,DIO_PIN_LOW);
    333a:	82 e0       	ldi	r24, 0x02	; 2
    333c:	63 e0       	ldi	r22, 0x03	; 3
    333e:	40 e0       	ldi	r20, 0x00	; 0
    3340:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
		DIO_U8SetPinValue(DIO_PORTC,DIO_PIN4,DIO_PIN_LOW);
    3344:	82 e0       	ldi	r24, 0x02	; 2
    3346:	64 e0       	ldi	r22, 0x04	; 4
    3348:	40 e0       	ldi	r20, 0x00	; 0
    334a:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
		DIO_U8SetPinValue(DIO_PORTC,DIO_PIN5,DIO_PIN_LOW);
    334e:	82 e0       	ldi	r24, 0x02	; 2
    3350:	65 e0       	ldi	r22, 0x05	; 5
    3352:	40 e0       	ldi	r20, 0x00	; 0
    3354:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
		DIO_U8SetPinValue(DIO_PORTC,DIO_PIN6,DIO_PIN_LOW);
    3358:	82 e0       	ldi	r24, 0x02	; 2
    335a:	66 e0       	ldi	r22, 0x06	; 6
    335c:	40 e0       	ldi	r20, 0x00	; 0
    335e:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
		DIO_U8SetPinValue(DIO_PORTC,DIO_PIN7,DIO_PIN_LOW);
    3362:	82 e0       	ldi	r24, 0x02	; 2
    3364:	67 e0       	ldi	r22, 0x07	; 7
    3366:	40 e0       	ldi	r20, 0x00	; 0
    3368:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
		CLCD_voidGoToXY(15u , 1u);
    336c:	8f e0       	ldi	r24, 0x0F	; 15
    336e:	61 e0       	ldi	r22, 0x01	; 1
    3370:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <CLCD_voidGoToXY>
		voidSendNumber(0);
    3374:	60 e0       	ldi	r22, 0x00	; 0
    3376:	70 e0       	ldi	r23, 0x00	; 0
    3378:	80 e0       	ldi	r24, 0x00	; 0
    337a:	90 e0       	ldi	r25, 0x00	; 0
    337c:	0e 94 82 1c 	call	0x3904	; 0x3904 <voidSendNumber>
	}
	else
	{
		// do nothing
	}
}
    3380:	60 96       	adiw	r28, 0x10	; 16
    3382:	0f b6       	in	r0, 0x3f	; 63
    3384:	f8 94       	cli
    3386:	de bf       	out	0x3e, r29	; 62
    3388:	0f be       	out	0x3f, r0	; 63
    338a:	cd bf       	out	0x3d, r28	; 61
    338c:	cf 91       	pop	r28
    338e:	df 91       	pop	r29
    3390:	08 95       	ret

00003392 <LM35CONTROL>:

void LM35CONTROL ( void )
{
    3392:	df 93       	push	r29
    3394:	cf 93       	push	r28
    3396:	cd b7       	in	r28, 0x3d	; 61
    3398:	de b7       	in	r29, 0x3e	; 62
    339a:	2f 97       	sbiw	r28, 0x0f	; 15
    339c:	0f b6       	in	r0, 0x3f	; 63
    339e:	f8 94       	cli
    33a0:	de bf       	out	0x3e, r29	; 62
    33a2:	0f be       	out	0x3f, r0	; 63
    33a4:	cd bf       	out	0x3d, r28	; 61
	uint8 Local_u8LM35Reading = 0 ;
    33a6:	1f 86       	std	Y+15, r1	; 0x0f
	Local_u8LM35Reading = LM35_u8GetTemperature() ;
    33a8:	0e 94 2a 25 	call	0x4a54	; 0x4a54 <LM35_u8GetTemperature>
    33ac:	8f 87       	std	Y+15, r24	; 0x0f
	CLCD_voidGoToXY(5u,1u);
    33ae:	85 e0       	ldi	r24, 0x05	; 5
    33b0:	61 e0       	ldi	r22, 0x01	; 1
    33b2:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <CLCD_voidGoToXY>
	voidSendNumber((uint32)(Local_u8LM35Reading));
    33b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    33b8:	88 2f       	mov	r24, r24
    33ba:	90 e0       	ldi	r25, 0x00	; 0
    33bc:	a0 e0       	ldi	r26, 0x00	; 0
    33be:	b0 e0       	ldi	r27, 0x00	; 0
    33c0:	bc 01       	movw	r22, r24
    33c2:	cd 01       	movw	r24, r26
    33c4:	0e 94 82 1c 	call	0x3904	; 0x3904 <voidSendNumber>
    33c8:	80 e0       	ldi	r24, 0x00	; 0
    33ca:	90 e0       	ldi	r25, 0x00	; 0
    33cc:	a8 ec       	ldi	r26, 0xC8	; 200
    33ce:	b2 e4       	ldi	r27, 0x42	; 66
    33d0:	8b 87       	std	Y+11, r24	; 0x0b
    33d2:	9c 87       	std	Y+12, r25	; 0x0c
    33d4:	ad 87       	std	Y+13, r26	; 0x0d
    33d6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    33da:	7c 85       	ldd	r23, Y+12	; 0x0c
    33dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    33de:	9e 85       	ldd	r25, Y+14	; 0x0e
    33e0:	20 e0       	ldi	r18, 0x00	; 0
    33e2:	30 e0       	ldi	r19, 0x00	; 0
    33e4:	4a e7       	ldi	r20, 0x7A	; 122
    33e6:	55 e4       	ldi	r21, 0x45	; 69
    33e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33ec:	dc 01       	movw	r26, r24
    33ee:	cb 01       	movw	r24, r22
    33f0:	8f 83       	std	Y+7, r24	; 0x07
    33f2:	98 87       	std	Y+8, r25	; 0x08
    33f4:	a9 87       	std	Y+9, r26	; 0x09
    33f6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    33f8:	6f 81       	ldd	r22, Y+7	; 0x07
    33fa:	78 85       	ldd	r23, Y+8	; 0x08
    33fc:	89 85       	ldd	r24, Y+9	; 0x09
    33fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3400:	20 e0       	ldi	r18, 0x00	; 0
    3402:	30 e0       	ldi	r19, 0x00	; 0
    3404:	40 e8       	ldi	r20, 0x80	; 128
    3406:	5f e3       	ldi	r21, 0x3F	; 63
    3408:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    340c:	88 23       	and	r24, r24
    340e:	2c f4       	brge	.+10     	; 0x341a <LM35CONTROL+0x88>
		__ticks = 1;
    3410:	81 e0       	ldi	r24, 0x01	; 1
    3412:	90 e0       	ldi	r25, 0x00	; 0
    3414:	9e 83       	std	Y+6, r25	; 0x06
    3416:	8d 83       	std	Y+5, r24	; 0x05
    3418:	3f c0       	rjmp	.+126    	; 0x3498 <LM35CONTROL+0x106>
	else if (__tmp > 65535)
    341a:	6f 81       	ldd	r22, Y+7	; 0x07
    341c:	78 85       	ldd	r23, Y+8	; 0x08
    341e:	89 85       	ldd	r24, Y+9	; 0x09
    3420:	9a 85       	ldd	r25, Y+10	; 0x0a
    3422:	20 e0       	ldi	r18, 0x00	; 0
    3424:	3f ef       	ldi	r19, 0xFF	; 255
    3426:	4f e7       	ldi	r20, 0x7F	; 127
    3428:	57 e4       	ldi	r21, 0x47	; 71
    342a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    342e:	18 16       	cp	r1, r24
    3430:	4c f5       	brge	.+82     	; 0x3484 <LM35CONTROL+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3432:	6b 85       	ldd	r22, Y+11	; 0x0b
    3434:	7c 85       	ldd	r23, Y+12	; 0x0c
    3436:	8d 85       	ldd	r24, Y+13	; 0x0d
    3438:	9e 85       	ldd	r25, Y+14	; 0x0e
    343a:	20 e0       	ldi	r18, 0x00	; 0
    343c:	30 e0       	ldi	r19, 0x00	; 0
    343e:	40 e2       	ldi	r20, 0x20	; 32
    3440:	51 e4       	ldi	r21, 0x41	; 65
    3442:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3446:	dc 01       	movw	r26, r24
    3448:	cb 01       	movw	r24, r22
    344a:	bc 01       	movw	r22, r24
    344c:	cd 01       	movw	r24, r26
    344e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3452:	dc 01       	movw	r26, r24
    3454:	cb 01       	movw	r24, r22
    3456:	9e 83       	std	Y+6, r25	; 0x06
    3458:	8d 83       	std	Y+5, r24	; 0x05
    345a:	0f c0       	rjmp	.+30     	; 0x347a <LM35CONTROL+0xe8>
    345c:	80 e9       	ldi	r24, 0x90	; 144
    345e:	91 e0       	ldi	r25, 0x01	; 1
    3460:	9c 83       	std	Y+4, r25	; 0x04
    3462:	8b 83       	std	Y+3, r24	; 0x03
    3464:	8b 81       	ldd	r24, Y+3	; 0x03
    3466:	9c 81       	ldd	r25, Y+4	; 0x04
    3468:	01 97       	sbiw	r24, 0x01	; 1
    346a:	f1 f7       	brne	.-4      	; 0x3468 <LM35CONTROL+0xd6>
    346c:	9c 83       	std	Y+4, r25	; 0x04
    346e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3470:	8d 81       	ldd	r24, Y+5	; 0x05
    3472:	9e 81       	ldd	r25, Y+6	; 0x06
    3474:	01 97       	sbiw	r24, 0x01	; 1
    3476:	9e 83       	std	Y+6, r25	; 0x06
    3478:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    347a:	8d 81       	ldd	r24, Y+5	; 0x05
    347c:	9e 81       	ldd	r25, Y+6	; 0x06
    347e:	00 97       	sbiw	r24, 0x00	; 0
    3480:	69 f7       	brne	.-38     	; 0x345c <LM35CONTROL+0xca>
    3482:	14 c0       	rjmp	.+40     	; 0x34ac <LM35CONTROL+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3484:	6f 81       	ldd	r22, Y+7	; 0x07
    3486:	78 85       	ldd	r23, Y+8	; 0x08
    3488:	89 85       	ldd	r24, Y+9	; 0x09
    348a:	9a 85       	ldd	r25, Y+10	; 0x0a
    348c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3490:	dc 01       	movw	r26, r24
    3492:	cb 01       	movw	r24, r22
    3494:	9e 83       	std	Y+6, r25	; 0x06
    3496:	8d 83       	std	Y+5, r24	; 0x05
    3498:	8d 81       	ldd	r24, Y+5	; 0x05
    349a:	9e 81       	ldd	r25, Y+6	; 0x06
    349c:	9a 83       	std	Y+2, r25	; 0x02
    349e:	89 83       	std	Y+1, r24	; 0x01
    34a0:	89 81       	ldd	r24, Y+1	; 0x01
    34a2:	9a 81       	ldd	r25, Y+2	; 0x02
    34a4:	01 97       	sbiw	r24, 0x01	; 1
    34a6:	f1 f7       	brne	.-4      	; 0x34a4 <LM35CONTROL+0x112>
    34a8:	9a 83       	std	Y+2, r25	; 0x02
    34aa:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100) ;
	if ( Local_u8LM35Reading >= 35)
    34ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    34ae:	83 32       	cpi	r24, 0x23	; 35
    34b0:	68 f0       	brcs	.+26     	; 0x34cc <LM35CONTROL+0x13a>
	{
		DIO_U8SetPinValue(DIO_PORTB,DIO_PIN0,DIO_PIN_HIGH);
    34b2:	81 e0       	ldi	r24, 0x01	; 1
    34b4:	60 e0       	ldi	r22, 0x00	; 0
    34b6:	41 e0       	ldi	r20, 0x01	; 1
    34b8:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
		CLCD_voidGoToXY(9u,1u);
    34bc:	89 e0       	ldi	r24, 0x09	; 9
    34be:	61 e0       	ldi	r22, 0x01	; 1
    34c0:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <CLCD_voidGoToXY>
		CLCD_voidSendData('M');
    34c4:	8d e4       	ldi	r24, 0x4D	; 77
    34c6:	0e 94 8f 1b 	call	0x371e	; 0x371e <CLCD_voidSendData>
    34ca:	0f c0       	rjmp	.+30     	; 0x34ea <LM35CONTROL+0x158>
	}
	else if (Local_u8LM35Reading <= 30)
    34cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    34ce:	8f 31       	cpi	r24, 0x1F	; 31
    34d0:	60 f4       	brcc	.+24     	; 0x34ea <LM35CONTROL+0x158>
	{
		DIO_U8SetPinValue(DIO_PORTB,DIO_PIN0,DIO_PIN_LOW);
    34d2:	81 e0       	ldi	r24, 0x01	; 1
    34d4:	60 e0       	ldi	r22, 0x00	; 0
    34d6:	40 e0       	ldi	r20, 0x00	; 0
    34d8:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
		CLCD_voidGoToXY(9u,1u);
    34dc:	89 e0       	ldi	r24, 0x09	; 9
    34de:	61 e0       	ldi	r22, 0x01	; 1
    34e0:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <CLCD_voidGoToXY>
		CLCD_voidSendData(' ');
    34e4:	80 e2       	ldi	r24, 0x20	; 32
    34e6:	0e 94 8f 1b 	call	0x371e	; 0x371e <CLCD_voidSendData>
	}
	else
	{
		// DO NOTHING
	}
}
    34ea:	2f 96       	adiw	r28, 0x0f	; 15
    34ec:	0f b6       	in	r0, 0x3f	; 63
    34ee:	f8 94       	cli
    34f0:	de bf       	out	0x3e, r29	; 62
    34f2:	0f be       	out	0x3f, r0	; 63
    34f4:	cd bf       	out	0x3d, r28	; 61
    34f6:	cf 91       	pop	r28
    34f8:	df 91       	pop	r29
    34fa:	08 95       	ret

000034fc <SystemShutDown>:
void SystemShutDown ( void )
{
    34fc:	df 93       	push	r29
    34fe:	cf 93       	push	r28
    3500:	cd b7       	in	r28, 0x3d	; 61
    3502:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidSendCommand(1);
    3504:	81 e0       	ldi	r24, 0x01	; 1
    3506:	0e 94 74 1b 	call	0x36e8	; 0x36e8 <CLCD_voidSendCommand>
	DIO_U8SetPinValue(DIO_PORTC , DIO_PIN0 , DIO_PIN_LOW);
    350a:	82 e0       	ldi	r24, 0x02	; 2
    350c:	60 e0       	ldi	r22, 0x00	; 0
    350e:	40 e0       	ldi	r20, 0x00	; 0
    3510:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
	DIO_U8SetPinValue(DIO_PORTC , DIO_PIN1 , DIO_PIN_LOW);
    3514:	82 e0       	ldi	r24, 0x02	; 2
    3516:	61 e0       	ldi	r22, 0x01	; 1
    3518:	40 e0       	ldi	r20, 0x00	; 0
    351a:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
	DIO_U8SetPinValue(DIO_PORTC , DIO_PIN2 , DIO_PIN_LOW);
    351e:	82 e0       	ldi	r24, 0x02	; 2
    3520:	62 e0       	ldi	r22, 0x02	; 2
    3522:	40 e0       	ldi	r20, 0x00	; 0
    3524:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
	DIO_U8SetPinValue(DIO_PORTC , DIO_PIN3 , DIO_PIN_LOW);
    3528:	82 e0       	ldi	r24, 0x02	; 2
    352a:	63 e0       	ldi	r22, 0x03	; 3
    352c:	40 e0       	ldi	r20, 0x00	; 0
    352e:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
	DIO_U8SetPinValue(DIO_PORTC , DIO_PIN4 , DIO_PIN_LOW);
    3532:	82 e0       	ldi	r24, 0x02	; 2
    3534:	64 e0       	ldi	r22, 0x04	; 4
    3536:	40 e0       	ldi	r20, 0x00	; 0
    3538:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
	DIO_U8SetPinValue(DIO_PORTC , DIO_PIN5 , DIO_PIN_LOW);
    353c:	82 e0       	ldi	r24, 0x02	; 2
    353e:	65 e0       	ldi	r22, 0x05	; 5
    3540:	40 e0       	ldi	r20, 0x00	; 0
    3542:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
	DIO_U8SetPinValue(DIO_PORTC , DIO_PIN6 , DIO_PIN_LOW);
    3546:	82 e0       	ldi	r24, 0x02	; 2
    3548:	66 e0       	ldi	r22, 0x06	; 6
    354a:	40 e0       	ldi	r20, 0x00	; 0
    354c:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
	DIO_U8SetPinValue(DIO_PORTC , DIO_PIN7 , DIO_PIN_LOW);
    3550:	82 e0       	ldi	r24, 0x02	; 2
    3552:	67 e0       	ldi	r22, 0x07	; 7
    3554:	40 e0       	ldi	r20, 0x00	; 0
    3556:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
	DIO_U8SetPinValue(DIO_PORTB , DIO_PIN0 , DIO_PIN_LOW);
    355a:	81 e0       	ldi	r24, 0x01	; 1
    355c:	60 e0       	ldi	r22, 0x00	; 0
    355e:	40 e0       	ldi	r20, 0x00	; 0
    3560:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
}
    3564:	cf 91       	pop	r28
    3566:	df 91       	pop	r29
    3568:	08 95       	ret

0000356a <voidSetHalfDataPort>:
#include "CLCD_Cfg.h"

						/* Functions Initialization */
#if			CLCD_U8CONNECTION_MODE == FOUR_BIT
static void voidSetHalfDataPort (uint8 copy_u8FourBitData)
{
    356a:	df 93       	push	r29
    356c:	cf 93       	push	r28
    356e:	0f 92       	push	r0
    3570:	cd b7       	in	r28, 0x3d	; 61
    3572:	de b7       	in	r29, 0x3e	; 62
    3574:	89 83       	std	Y+1, r24	; 0x01
	DIO_U8SetPinValue(CLCD_u8DATA_PORT,CLCD_u8D4_PIN,GET_BIT(copy_u8FourBitData,0)) ;
    3576:	89 81       	ldd	r24, Y+1	; 0x01
    3578:	98 2f       	mov	r25, r24
    357a:	91 70       	andi	r25, 0x01	; 1
    357c:	80 e0       	ldi	r24, 0x00	; 0
    357e:	63 e0       	ldi	r22, 0x03	; 3
    3580:	49 2f       	mov	r20, r25
    3582:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
	DIO_U8SetPinValue(CLCD_u8DATA_PORT,CLCD_u8D5_PIN,GET_BIT(copy_u8FourBitData,1)) ;
    3586:	89 81       	ldd	r24, Y+1	; 0x01
    3588:	86 95       	lsr	r24
    358a:	98 2f       	mov	r25, r24
    358c:	91 70       	andi	r25, 0x01	; 1
    358e:	80 e0       	ldi	r24, 0x00	; 0
    3590:	64 e0       	ldi	r22, 0x04	; 4
    3592:	49 2f       	mov	r20, r25
    3594:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
	DIO_U8SetPinValue(CLCD_u8DATA_PORT,CLCD_u8D6_PIN,GET_BIT(copy_u8FourBitData,2)) ;
    3598:	89 81       	ldd	r24, Y+1	; 0x01
    359a:	86 95       	lsr	r24
    359c:	86 95       	lsr	r24
    359e:	98 2f       	mov	r25, r24
    35a0:	91 70       	andi	r25, 0x01	; 1
    35a2:	80 e0       	ldi	r24, 0x00	; 0
    35a4:	65 e0       	ldi	r22, 0x05	; 5
    35a6:	49 2f       	mov	r20, r25
    35a8:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
	DIO_U8SetPinValue(CLCD_u8DATA_PORT,CLCD_u8D7_PIN,GET_BIT(copy_u8FourBitData,3)) ;
    35ac:	89 81       	ldd	r24, Y+1	; 0x01
    35ae:	86 95       	lsr	r24
    35b0:	86 95       	lsr	r24
    35b2:	86 95       	lsr	r24
    35b4:	98 2f       	mov	r25, r24
    35b6:	91 70       	andi	r25, 0x01	; 1
    35b8:	80 e0       	ldi	r24, 0x00	; 0
    35ba:	66 e0       	ldi	r22, 0x06	; 6
    35bc:	49 2f       	mov	r20, r25
    35be:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
}
    35c2:	0f 90       	pop	r0
    35c4:	cf 91       	pop	r28
    35c6:	df 91       	pop	r29
    35c8:	08 95       	ret

000035ca <voidSendEnablePulse>:
#endif

static void voidSendEnablePulse ( void )
{
    35ca:	df 93       	push	r29
    35cc:	cf 93       	push	r28
    35ce:	cd b7       	in	r28, 0x3d	; 61
    35d0:	de b7       	in	r29, 0x3e	; 62
    35d2:	2e 97       	sbiw	r28, 0x0e	; 14
    35d4:	0f b6       	in	r0, 0x3f	; 63
    35d6:	f8 94       	cli
    35d8:	de bf       	out	0x3e, r29	; 62
    35da:	0f be       	out	0x3f, r0	; 63
    35dc:	cd bf       	out	0x3d, r28	; 61
	DIO_U8SetPinValue(CLCD_u8CTRL_PORT,CLCD_u8E_PIN,DIO_PIN_HIGH);
    35de:	80 e0       	ldi	r24, 0x00	; 0
    35e0:	62 e0       	ldi	r22, 0x02	; 2
    35e2:	41 e0       	ldi	r20, 0x01	; 1
    35e4:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
    35e8:	80 e0       	ldi	r24, 0x00	; 0
    35ea:	90 e0       	ldi	r25, 0x00	; 0
    35ec:	a0 e0       	ldi	r26, 0x00	; 0
    35ee:	b0 e4       	ldi	r27, 0x40	; 64
    35f0:	8b 87       	std	Y+11, r24	; 0x0b
    35f2:	9c 87       	std	Y+12, r25	; 0x0c
    35f4:	ad 87       	std	Y+13, r26	; 0x0d
    35f6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    35fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    35fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    35fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    3600:	20 e0       	ldi	r18, 0x00	; 0
    3602:	30 e0       	ldi	r19, 0x00	; 0
    3604:	4a e7       	ldi	r20, 0x7A	; 122
    3606:	55 e4       	ldi	r21, 0x45	; 69
    3608:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    360c:	dc 01       	movw	r26, r24
    360e:	cb 01       	movw	r24, r22
    3610:	8f 83       	std	Y+7, r24	; 0x07
    3612:	98 87       	std	Y+8, r25	; 0x08
    3614:	a9 87       	std	Y+9, r26	; 0x09
    3616:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3618:	6f 81       	ldd	r22, Y+7	; 0x07
    361a:	78 85       	ldd	r23, Y+8	; 0x08
    361c:	89 85       	ldd	r24, Y+9	; 0x09
    361e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3620:	20 e0       	ldi	r18, 0x00	; 0
    3622:	30 e0       	ldi	r19, 0x00	; 0
    3624:	40 e8       	ldi	r20, 0x80	; 128
    3626:	5f e3       	ldi	r21, 0x3F	; 63
    3628:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    362c:	88 23       	and	r24, r24
    362e:	2c f4       	brge	.+10     	; 0x363a <voidSendEnablePulse+0x70>
		__ticks = 1;
    3630:	81 e0       	ldi	r24, 0x01	; 1
    3632:	90 e0       	ldi	r25, 0x00	; 0
    3634:	9e 83       	std	Y+6, r25	; 0x06
    3636:	8d 83       	std	Y+5, r24	; 0x05
    3638:	3f c0       	rjmp	.+126    	; 0x36b8 <voidSendEnablePulse+0xee>
	else if (__tmp > 65535)
    363a:	6f 81       	ldd	r22, Y+7	; 0x07
    363c:	78 85       	ldd	r23, Y+8	; 0x08
    363e:	89 85       	ldd	r24, Y+9	; 0x09
    3640:	9a 85       	ldd	r25, Y+10	; 0x0a
    3642:	20 e0       	ldi	r18, 0x00	; 0
    3644:	3f ef       	ldi	r19, 0xFF	; 255
    3646:	4f e7       	ldi	r20, 0x7F	; 127
    3648:	57 e4       	ldi	r21, 0x47	; 71
    364a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    364e:	18 16       	cp	r1, r24
    3650:	4c f5       	brge	.+82     	; 0x36a4 <voidSendEnablePulse+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3652:	6b 85       	ldd	r22, Y+11	; 0x0b
    3654:	7c 85       	ldd	r23, Y+12	; 0x0c
    3656:	8d 85       	ldd	r24, Y+13	; 0x0d
    3658:	9e 85       	ldd	r25, Y+14	; 0x0e
    365a:	20 e0       	ldi	r18, 0x00	; 0
    365c:	30 e0       	ldi	r19, 0x00	; 0
    365e:	40 e2       	ldi	r20, 0x20	; 32
    3660:	51 e4       	ldi	r21, 0x41	; 65
    3662:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3666:	dc 01       	movw	r26, r24
    3668:	cb 01       	movw	r24, r22
    366a:	bc 01       	movw	r22, r24
    366c:	cd 01       	movw	r24, r26
    366e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3672:	dc 01       	movw	r26, r24
    3674:	cb 01       	movw	r24, r22
    3676:	9e 83       	std	Y+6, r25	; 0x06
    3678:	8d 83       	std	Y+5, r24	; 0x05
    367a:	0f c0       	rjmp	.+30     	; 0x369a <voidSendEnablePulse+0xd0>
    367c:	80 e9       	ldi	r24, 0x90	; 144
    367e:	91 e0       	ldi	r25, 0x01	; 1
    3680:	9c 83       	std	Y+4, r25	; 0x04
    3682:	8b 83       	std	Y+3, r24	; 0x03
    3684:	8b 81       	ldd	r24, Y+3	; 0x03
    3686:	9c 81       	ldd	r25, Y+4	; 0x04
    3688:	01 97       	sbiw	r24, 0x01	; 1
    368a:	f1 f7       	brne	.-4      	; 0x3688 <voidSendEnablePulse+0xbe>
    368c:	9c 83       	std	Y+4, r25	; 0x04
    368e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3690:	8d 81       	ldd	r24, Y+5	; 0x05
    3692:	9e 81       	ldd	r25, Y+6	; 0x06
    3694:	01 97       	sbiw	r24, 0x01	; 1
    3696:	9e 83       	std	Y+6, r25	; 0x06
    3698:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    369a:	8d 81       	ldd	r24, Y+5	; 0x05
    369c:	9e 81       	ldd	r25, Y+6	; 0x06
    369e:	00 97       	sbiw	r24, 0x00	; 0
    36a0:	69 f7       	brne	.-38     	; 0x367c <voidSendEnablePulse+0xb2>
    36a2:	14 c0       	rjmp	.+40     	; 0x36cc <voidSendEnablePulse+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36a4:	6f 81       	ldd	r22, Y+7	; 0x07
    36a6:	78 85       	ldd	r23, Y+8	; 0x08
    36a8:	89 85       	ldd	r24, Y+9	; 0x09
    36aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    36ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36b0:	dc 01       	movw	r26, r24
    36b2:	cb 01       	movw	r24, r22
    36b4:	9e 83       	std	Y+6, r25	; 0x06
    36b6:	8d 83       	std	Y+5, r24	; 0x05
    36b8:	8d 81       	ldd	r24, Y+5	; 0x05
    36ba:	9e 81       	ldd	r25, Y+6	; 0x06
    36bc:	9a 83       	std	Y+2, r25	; 0x02
    36be:	89 83       	std	Y+1, r24	; 0x01
    36c0:	89 81       	ldd	r24, Y+1	; 0x01
    36c2:	9a 81       	ldd	r25, Y+2	; 0x02
    36c4:	01 97       	sbiw	r24, 0x01	; 1
    36c6:	f1 f7       	brne	.-4      	; 0x36c4 <voidSendEnablePulse+0xfa>
    36c8:	9a 83       	std	Y+2, r25	; 0x02
    36ca:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_U8SetPinValue(CLCD_u8CTRL_PORT,CLCD_u8E_PIN,DIO_PIN_LOW);
    36cc:	80 e0       	ldi	r24, 0x00	; 0
    36ce:	62 e0       	ldi	r22, 0x02	; 2
    36d0:	40 e0       	ldi	r20, 0x00	; 0
    36d2:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
}
    36d6:	2e 96       	adiw	r28, 0x0e	; 14
    36d8:	0f b6       	in	r0, 0x3f	; 63
    36da:	f8 94       	cli
    36dc:	de bf       	out	0x3e, r29	; 62
    36de:	0f be       	out	0x3f, r0	; 63
    36e0:	cd bf       	out	0x3d, r28	; 61
    36e2:	cf 91       	pop	r28
    36e4:	df 91       	pop	r29
    36e6:	08 95       	ret

000036e8 <CLCD_voidSendCommand>:

void CLCD_voidSendCommand ( uint8 Copy_u8Command )
{
    36e8:	df 93       	push	r29
    36ea:	cf 93       	push	r28
    36ec:	0f 92       	push	r0
    36ee:	cd b7       	in	r28, 0x3d	; 61
    36f0:	de b7       	in	r29, 0x3e	; 62
    36f2:	89 83       	std	Y+1, r24	; 0x01
					// 1-Set RS pin low for command

	DIO_U8SetPinValue(CLCD_u8CTRL_PORT,CLCD_u8RS_PIN,DIO_PIN_LOW);
    36f4:	80 e0       	ldi	r24, 0x00	; 0
    36f6:	61 e0       	ldi	r22, 0x01	; 1
    36f8:	40 e0       	ldi	r20, 0x00	; 0
    36fa:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>

					// 3- Send the command

	#if			CLCD_U8CONNECTION_MODE == FOUR_BIT
					/* Send The Higher 4 Bits */
	voidSetHalfDataPort( Copy_u8Command >> 4u ) ;
    36fe:	89 81       	ldd	r24, Y+1	; 0x01
    3700:	82 95       	swap	r24
    3702:	8f 70       	andi	r24, 0x0F	; 15
    3704:	0e 94 b5 1a 	call	0x356a	; 0x356a <voidSetHalfDataPort>
								//
					/*  Send Enable Pulse */
	voidSendEnablePulse () ;
    3708:	0e 94 e5 1a 	call	0x35ca	; 0x35ca <voidSendEnablePulse>
								//
					/* Send The Lower 4 Bits */
	voidSetHalfDataPort( Copy_u8Command ) ;
    370c:	89 81       	ldd	r24, Y+1	; 0x01
    370e:	0e 94 b5 1a 	call	0x356a	; 0x356a <voidSetHalfDataPort>
	DIO_U8SetPortValue(CLCD_u8DATA_PORT,Copy_u8Command);
	#endif

					// 4- Send Enable Pulse

	voidSendEnablePulse () ;
    3712:	0e 94 e5 1a 	call	0x35ca	; 0x35ca <voidSendEnablePulse>

}
    3716:	0f 90       	pop	r0
    3718:	cf 91       	pop	r28
    371a:	df 91       	pop	r29
    371c:	08 95       	ret

0000371e <CLCD_voidSendData>:
void CLCD_voidSendData   (uint8 copy_u8Data)
{
    371e:	df 93       	push	r29
    3720:	cf 93       	push	r28
    3722:	0f 92       	push	r0
    3724:	cd b7       	in	r28, 0x3d	; 61
    3726:	de b7       	in	r29, 0x3e	; 62
    3728:	89 83       	std	Y+1, r24	; 0x01
					// 1-Set RS pin High for data sending

	DIO_U8SetPinValue(CLCD_u8CTRL_PORT,CLCD_u8RS_PIN,DIO_PIN_HIGH);
    372a:	80 e0       	ldi	r24, 0x00	; 0
    372c:	61 e0       	ldi	r22, 0x01	; 1
    372e:	41 e0       	ldi	r20, 0x01	; 1
    3730:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>

					// 3- Send the data

	#if			CLCD_U8CONNECTION_MODE == FOUR_BIT
					/* Send The Higher 4 Bits */
	voidSetHalfDataPort( copy_u8Data >> 4u ) ;
    3734:	89 81       	ldd	r24, Y+1	; 0x01
    3736:	82 95       	swap	r24
    3738:	8f 70       	andi	r24, 0x0F	; 15
    373a:	0e 94 b5 1a 	call	0x356a	; 0x356a <voidSetHalfDataPort>
								//
					/*  Send Enable Pulse */
	voidSendEnablePulse () ;
    373e:	0e 94 e5 1a 	call	0x35ca	; 0x35ca <voidSendEnablePulse>
								//
					/* Send The Lower 4 Bits */
	voidSetHalfDataPort( copy_u8Data ) ;
    3742:	89 81       	ldd	r24, Y+1	; 0x01
    3744:	0e 94 b5 1a 	call	0x356a	; 0x356a <voidSetHalfDataPort>
	DIO_U8SetPortValue(CLCD_u8DATA_PORT,copy_u8Data);
	#endif

					// 4- Send Enable Pulse

	voidSendEnablePulse () ;
    3748:	0e 94 e5 1a 	call	0x35ca	; 0x35ca <voidSendEnablePulse>

}
    374c:	0f 90       	pop	r0
    374e:	cf 91       	pop	r28
    3750:	df 91       	pop	r29
    3752:	08 95       	ret

00003754 <CLCD_voidInit>:
void CLCD_voidInit       (void)
{
    3754:	df 93       	push	r29
    3756:	cf 93       	push	r28
    3758:	cd b7       	in	r28, 0x3d	; 61
    375a:	de b7       	in	r29, 0x3e	; 62
    375c:	2e 97       	sbiw	r28, 0x0e	; 14
    375e:	0f b6       	in	r0, 0x3f	; 63
    3760:	f8 94       	cli
    3762:	de bf       	out	0x3e, r29	; 62
    3764:	0f be       	out	0x3f, r0	; 63
    3766:	cd bf       	out	0x3d, r28	; 61
    3768:	80 e0       	ldi	r24, 0x00	; 0
    376a:	90 e0       	ldi	r25, 0x00	; 0
    376c:	a0 e2       	ldi	r26, 0x20	; 32
    376e:	b2 e4       	ldi	r27, 0x42	; 66
    3770:	8b 87       	std	Y+11, r24	; 0x0b
    3772:	9c 87       	std	Y+12, r25	; 0x0c
    3774:	ad 87       	std	Y+13, r26	; 0x0d
    3776:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3778:	6b 85       	ldd	r22, Y+11	; 0x0b
    377a:	7c 85       	ldd	r23, Y+12	; 0x0c
    377c:	8d 85       	ldd	r24, Y+13	; 0x0d
    377e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3780:	20 e0       	ldi	r18, 0x00	; 0
    3782:	30 e0       	ldi	r19, 0x00	; 0
    3784:	4a e7       	ldi	r20, 0x7A	; 122
    3786:	55 e4       	ldi	r21, 0x45	; 69
    3788:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    378c:	dc 01       	movw	r26, r24
    378e:	cb 01       	movw	r24, r22
    3790:	8f 83       	std	Y+7, r24	; 0x07
    3792:	98 87       	std	Y+8, r25	; 0x08
    3794:	a9 87       	std	Y+9, r26	; 0x09
    3796:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3798:	6f 81       	ldd	r22, Y+7	; 0x07
    379a:	78 85       	ldd	r23, Y+8	; 0x08
    379c:	89 85       	ldd	r24, Y+9	; 0x09
    379e:	9a 85       	ldd	r25, Y+10	; 0x0a
    37a0:	20 e0       	ldi	r18, 0x00	; 0
    37a2:	30 e0       	ldi	r19, 0x00	; 0
    37a4:	40 e8       	ldi	r20, 0x80	; 128
    37a6:	5f e3       	ldi	r21, 0x3F	; 63
    37a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    37ac:	88 23       	and	r24, r24
    37ae:	2c f4       	brge	.+10     	; 0x37ba <CLCD_voidInit+0x66>
		__ticks = 1;
    37b0:	81 e0       	ldi	r24, 0x01	; 1
    37b2:	90 e0       	ldi	r25, 0x00	; 0
    37b4:	9e 83       	std	Y+6, r25	; 0x06
    37b6:	8d 83       	std	Y+5, r24	; 0x05
    37b8:	3f c0       	rjmp	.+126    	; 0x3838 <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    37ba:	6f 81       	ldd	r22, Y+7	; 0x07
    37bc:	78 85       	ldd	r23, Y+8	; 0x08
    37be:	89 85       	ldd	r24, Y+9	; 0x09
    37c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    37c2:	20 e0       	ldi	r18, 0x00	; 0
    37c4:	3f ef       	ldi	r19, 0xFF	; 255
    37c6:	4f e7       	ldi	r20, 0x7F	; 127
    37c8:	57 e4       	ldi	r21, 0x47	; 71
    37ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    37ce:	18 16       	cp	r1, r24
    37d0:	4c f5       	brge	.+82     	; 0x3824 <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    37d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    37d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    37d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    37da:	20 e0       	ldi	r18, 0x00	; 0
    37dc:	30 e0       	ldi	r19, 0x00	; 0
    37de:	40 e2       	ldi	r20, 0x20	; 32
    37e0:	51 e4       	ldi	r21, 0x41	; 65
    37e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37e6:	dc 01       	movw	r26, r24
    37e8:	cb 01       	movw	r24, r22
    37ea:	bc 01       	movw	r22, r24
    37ec:	cd 01       	movw	r24, r26
    37ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37f2:	dc 01       	movw	r26, r24
    37f4:	cb 01       	movw	r24, r22
    37f6:	9e 83       	std	Y+6, r25	; 0x06
    37f8:	8d 83       	std	Y+5, r24	; 0x05
    37fa:	0f c0       	rjmp	.+30     	; 0x381a <CLCD_voidInit+0xc6>
    37fc:	80 e9       	ldi	r24, 0x90	; 144
    37fe:	91 e0       	ldi	r25, 0x01	; 1
    3800:	9c 83       	std	Y+4, r25	; 0x04
    3802:	8b 83       	std	Y+3, r24	; 0x03
    3804:	8b 81       	ldd	r24, Y+3	; 0x03
    3806:	9c 81       	ldd	r25, Y+4	; 0x04
    3808:	01 97       	sbiw	r24, 0x01	; 1
    380a:	f1 f7       	brne	.-4      	; 0x3808 <CLCD_voidInit+0xb4>
    380c:	9c 83       	std	Y+4, r25	; 0x04
    380e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3810:	8d 81       	ldd	r24, Y+5	; 0x05
    3812:	9e 81       	ldd	r25, Y+6	; 0x06
    3814:	01 97       	sbiw	r24, 0x01	; 1
    3816:	9e 83       	std	Y+6, r25	; 0x06
    3818:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    381a:	8d 81       	ldd	r24, Y+5	; 0x05
    381c:	9e 81       	ldd	r25, Y+6	; 0x06
    381e:	00 97       	sbiw	r24, 0x00	; 0
    3820:	69 f7       	brne	.-38     	; 0x37fc <CLCD_voidInit+0xa8>
    3822:	14 c0       	rjmp	.+40     	; 0x384c <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3824:	6f 81       	ldd	r22, Y+7	; 0x07
    3826:	78 85       	ldd	r23, Y+8	; 0x08
    3828:	89 85       	ldd	r24, Y+9	; 0x09
    382a:	9a 85       	ldd	r25, Y+10	; 0x0a
    382c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3830:	dc 01       	movw	r26, r24
    3832:	cb 01       	movw	r24, r22
    3834:	9e 83       	std	Y+6, r25	; 0x06
    3836:	8d 83       	std	Y+5, r24	; 0x05
    3838:	8d 81       	ldd	r24, Y+5	; 0x05
    383a:	9e 81       	ldd	r25, Y+6	; 0x06
    383c:	9a 83       	std	Y+2, r25	; 0x02
    383e:	89 83       	std	Y+1, r24	; 0x01
    3840:	89 81       	ldd	r24, Y+1	; 0x01
    3842:	9a 81       	ldd	r25, Y+2	; 0x02
    3844:	01 97       	sbiw	r24, 0x01	; 1
    3846:	f1 f7       	brne	.-4      	; 0x3844 <CLCD_voidInit+0xf0>
    3848:	9a 83       	std	Y+2, r25	; 0x02
    384a:	89 83       	std	Y+1, r24	; 0x01

		//2-Function Set Command : 2 lines , font size 5*7

	#if			CLCD_U8CONNECTION_MODE == FOUR_BIT
					/* Sending Command into 3 Steps */
	voidSetHalfDataPort( 0b0010 ) ;
    384c:	82 e0       	ldi	r24, 0x02	; 2
    384e:	0e 94 b5 1a 	call	0x356a	; 0x356a <voidSetHalfDataPort>
	voidSendEnablePulse ();
    3852:	0e 94 e5 1a 	call	0x35ca	; 0x35ca <voidSendEnablePulse>
	voidSetHalfDataPort( 0b0010 ) ;
    3856:	82 e0       	ldi	r24, 0x02	; 2
    3858:	0e 94 b5 1a 	call	0x356a	; 0x356a <voidSetHalfDataPort>
	voidSendEnablePulse ();
    385c:	0e 94 e5 1a 	call	0x35ca	; 0x35ca <voidSendEnablePulse>
	voidSetHalfDataPort( 0b1000 ) ;
    3860:	88 e0       	ldi	r24, 0x08	; 8
    3862:	0e 94 b5 1a 	call	0x356a	; 0x356a <voidSetHalfDataPort>
	voidSendEnablePulse ();
    3866:	0e 94 e5 1a 	call	0x35ca	; 0x35ca <voidSendEnablePulse>

		//3- WAIT FOR MORE THAN 39 uSec ( already done before )

		//4-Function Set Command for Display on/off control : Display on , cursor off , Blink cursor off

	CLCD_voidSendCommand(0b00001100);
    386a:	8c e0       	ldi	r24, 0x0C	; 12
    386c:	0e 94 74 1b 	call	0x36e8	; 0x36e8 <CLCD_voidSendCommand>

		//5- WAIT FOR MORE THAN 39 uSec ( already done before )

		//6- Clear Display

	CLCD_voidSendCommand(1);
    3870:	81 e0       	ldi	r24, 0x01	; 1
    3872:	0e 94 74 1b 	call	0x36e8	; 0x36e8 <CLCD_voidSendCommand>

		//7- Entry Mode Set ( Skip It )

}
    3876:	2e 96       	adiw	r28, 0x0e	; 14
    3878:	0f b6       	in	r0, 0x3f	; 63
    387a:	f8 94       	cli
    387c:	de bf       	out	0x3e, r29	; 62
    387e:	0f be       	out	0x3f, r0	; 63
    3880:	cd bf       	out	0x3d, r28	; 61
    3882:	cf 91       	pop	r28
    3884:	df 91       	pop	r29
    3886:	08 95       	ret

00003888 <voidSendString>:

void voidSendString 	( char *copy_pu8String )
{
    3888:	df 93       	push	r29
    388a:	cf 93       	push	r28
    388c:	00 d0       	rcall	.+0      	; 0x388e <voidSendString+0x6>
    388e:	00 d0       	rcall	.+0      	; 0x3890 <voidSendString+0x8>
    3890:	cd b7       	in	r28, 0x3d	; 61
    3892:	de b7       	in	r29, 0x3e	; 62
    3894:	9c 83       	std	Y+4, r25	; 0x04
    3896:	8b 83       	std	Y+3, r24	; 0x03
	uint8 local_u8StringCounter = 0 ;
    3898:	1a 82       	std	Y+2, r1	; 0x02
	uint8 local_u8Iterator = 0 ;
    389a:	19 82       	std	Y+1, r1	; 0x01
	for (local_u8Iterator=0 ; *(copy_pu8String+local_u8Iterator) != '\0' ; local_u8Iterator ++ )
    389c:	19 82       	std	Y+1, r1	; 0x01
    389e:	06 c0       	rjmp	.+12     	; 0x38ac <voidSendString+0x24>
	{
		local_u8StringCounter ++ ;
    38a0:	8a 81       	ldd	r24, Y+2	; 0x02
    38a2:	8f 5f       	subi	r24, 0xFF	; 255
    38a4:	8a 83       	std	Y+2, r24	; 0x02

void voidSendString 	( char *copy_pu8String )
{
	uint8 local_u8StringCounter = 0 ;
	uint8 local_u8Iterator = 0 ;
	for (local_u8Iterator=0 ; *(copy_pu8String+local_u8Iterator) != '\0' ; local_u8Iterator ++ )
    38a6:	89 81       	ldd	r24, Y+1	; 0x01
    38a8:	8f 5f       	subi	r24, 0xFF	; 255
    38aa:	89 83       	std	Y+1, r24	; 0x01
    38ac:	89 81       	ldd	r24, Y+1	; 0x01
    38ae:	28 2f       	mov	r18, r24
    38b0:	30 e0       	ldi	r19, 0x00	; 0
    38b2:	8b 81       	ldd	r24, Y+3	; 0x03
    38b4:	9c 81       	ldd	r25, Y+4	; 0x04
    38b6:	fc 01       	movw	r30, r24
    38b8:	e2 0f       	add	r30, r18
    38ba:	f3 1f       	adc	r31, r19
    38bc:	80 81       	ld	r24, Z
    38be:	88 23       	and	r24, r24
    38c0:	79 f7       	brne	.-34     	; 0x38a0 <voidSendString+0x18>
	{
		local_u8StringCounter ++ ;
	}
	for (local_u8Iterator = 0 ; local_u8Iterator <= local_u8StringCounter-1 ; local_u8Iterator ++ )
    38c2:	19 82       	std	Y+1, r1	; 0x01
    38c4:	0e c0       	rjmp	.+28     	; 0x38e2 <voidSendString+0x5a>
	{
		CLCD_voidSendData(copy_pu8String[local_u8Iterator]);
    38c6:	89 81       	ldd	r24, Y+1	; 0x01
    38c8:	28 2f       	mov	r18, r24
    38ca:	30 e0       	ldi	r19, 0x00	; 0
    38cc:	8b 81       	ldd	r24, Y+3	; 0x03
    38ce:	9c 81       	ldd	r25, Y+4	; 0x04
    38d0:	fc 01       	movw	r30, r24
    38d2:	e2 0f       	add	r30, r18
    38d4:	f3 1f       	adc	r31, r19
    38d6:	80 81       	ld	r24, Z
    38d8:	0e 94 8f 1b 	call	0x371e	; 0x371e <CLCD_voidSendData>
	uint8 local_u8Iterator = 0 ;
	for (local_u8Iterator=0 ; *(copy_pu8String+local_u8Iterator) != '\0' ; local_u8Iterator ++ )
	{
		local_u8StringCounter ++ ;
	}
	for (local_u8Iterator = 0 ; local_u8Iterator <= local_u8StringCounter-1 ; local_u8Iterator ++ )
    38dc:	89 81       	ldd	r24, Y+1	; 0x01
    38de:	8f 5f       	subi	r24, 0xFF	; 255
    38e0:	89 83       	std	Y+1, r24	; 0x01
    38e2:	89 81       	ldd	r24, Y+1	; 0x01
    38e4:	28 2f       	mov	r18, r24
    38e6:	30 e0       	ldi	r19, 0x00	; 0
    38e8:	8a 81       	ldd	r24, Y+2	; 0x02
    38ea:	88 2f       	mov	r24, r24
    38ec:	90 e0       	ldi	r25, 0x00	; 0
    38ee:	01 97       	sbiw	r24, 0x01	; 1
    38f0:	82 17       	cp	r24, r18
    38f2:	93 07       	cpc	r25, r19
    38f4:	44 f7       	brge	.-48     	; 0x38c6 <voidSendString+0x3e>
	{
		CLCD_voidSendData(copy_pu8String[local_u8Iterator]);
	}

}
    38f6:	0f 90       	pop	r0
    38f8:	0f 90       	pop	r0
    38fa:	0f 90       	pop	r0
    38fc:	0f 90       	pop	r0
    38fe:	cf 91       	pop	r28
    3900:	df 91       	pop	r29
    3902:	08 95       	ret

00003904 <voidSendNumber>:

void voidSendNumber		( sint32 copy_s32Number )
{
    3904:	0f 93       	push	r16
    3906:	1f 93       	push	r17
    3908:	df 93       	push	r29
    390a:	cf 93       	push	r28
    390c:	cd b7       	in	r28, 0x3d	; 61
    390e:	de b7       	in	r29, 0x3e	; 62
    3910:	67 97       	sbiw	r28, 0x17	; 23
    3912:	0f b6       	in	r0, 0x3f	; 63
    3914:	f8 94       	cli
    3916:	de bf       	out	0x3e, r29	; 62
    3918:	0f be       	out	0x3f, r0	; 63
    391a:	cd bf       	out	0x3d, r28	; 61
    391c:	6e 87       	std	Y+14, r22	; 0x0e
    391e:	7f 87       	std	Y+15, r23	; 0x0f
    3920:	88 8b       	std	Y+16, r24	; 0x10
    3922:	99 8b       	std	Y+17, r25	; 0x11
	}
	for (local_u8Iterator=0 ; local_u8Iterator < (local_u8DigitCounter) ; local_u8Iterator ++ )
		{
			CLCD_voidSendData(local_u8NumberSendArr[local_u8Iterator]+'0');
		}
}
    3924:	2d b7       	in	r18, 0x3d	; 61
    3926:	3e b7       	in	r19, 0x3e	; 62
    3928:	3f 8b       	std	Y+23, r19	; 0x17
    392a:	2e 8b       	std	Y+22, r18	; 0x16
	}

}

void voidSendNumber		( sint32 copy_s32Number )
{
    392c:	8d b7       	in	r24, 0x3d	; 61
    392e:	9e b7       	in	r25, 0x3e	; 62
    3930:	9b 8b       	std	Y+19, r25	; 0x13
    3932:	8a 8b       	std	Y+18, r24	; 0x12
    if (copy_s32Number < 0)
    3934:	8e 85       	ldd	r24, Y+14	; 0x0e
    3936:	9f 85       	ldd	r25, Y+15	; 0x0f
    3938:	a8 89       	ldd	r26, Y+16	; 0x10
    393a:	b9 89       	ldd	r27, Y+17	; 0x11
    393c:	bb 23       	and	r27, r27
    393e:	9c f4       	brge	.+38     	; 0x3966 <voidSendNumber+0x62>
	{
	    CLCD_voidSendData('-');
    3940:	8d e2       	ldi	r24, 0x2D	; 45
    3942:	0e 94 8f 1b 	call	0x371e	; 0x371e <CLCD_voidSendData>
	    copy_s32Number=-copy_s32Number ;
    3946:	8e 85       	ldd	r24, Y+14	; 0x0e
    3948:	9f 85       	ldd	r25, Y+15	; 0x0f
    394a:	a8 89       	ldd	r26, Y+16	; 0x10
    394c:	b9 89       	ldd	r27, Y+17	; 0x11
    394e:	b0 95       	com	r27
    3950:	a0 95       	com	r26
    3952:	90 95       	com	r25
    3954:	81 95       	neg	r24
    3956:	9f 4f       	sbci	r25, 0xFF	; 255
    3958:	af 4f       	sbci	r26, 0xFF	; 255
    395a:	bf 4f       	sbci	r27, 0xFF	; 255
    395c:	8e 87       	std	Y+14, r24	; 0x0e
    395e:	9f 87       	std	Y+15, r25	; 0x0f
    3960:	a8 8b       	std	Y+16, r26	; 0x10
    3962:	b9 8b       	std	Y+17, r27	; 0x11
    3964:	0c c0       	rjmp	.+24     	; 0x397e <voidSendNumber+0x7a>
	}
    else if (copy_s32Number == 0 )
    3966:	8e 85       	ldd	r24, Y+14	; 0x0e
    3968:	9f 85       	ldd	r25, Y+15	; 0x0f
    396a:	a8 89       	ldd	r26, Y+16	; 0x10
    396c:	b9 89       	ldd	r27, Y+17	; 0x11
    396e:	00 97       	sbiw	r24, 0x00	; 0
    3970:	a1 05       	cpc	r26, r1
    3972:	b1 05       	cpc	r27, r1
    3974:	21 f4       	brne	.+8      	; 0x397e <voidSendNumber+0x7a>
    {
    	CLCD_voidSendData('0');
    3976:	80 e3       	ldi	r24, 0x30	; 48
    3978:	0e 94 8f 1b 	call	0x371e	; 0x371e <CLCD_voidSendData>
    397c:	99 c0       	rjmp	.+306    	; 0x3ab0 <voidSendNumber+0x1ac>
    	return ;
    }
	sint32 local_s32NumberSend = copy_s32Number ;
    397e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3980:	9f 85       	ldd	r25, Y+15	; 0x0f
    3982:	a8 89       	ldd	r26, Y+16	; 0x10
    3984:	b9 89       	ldd	r27, Y+17	; 0x11
    3986:	88 87       	std	Y+8, r24	; 0x08
    3988:	99 87       	std	Y+9, r25	; 0x09
    398a:	aa 87       	std	Y+10, r26	; 0x0a
    398c:	bb 87       	std	Y+11, r27	; 0x0b
	sint32 local_s32NumberDiv  = copy_s32Number ;
    398e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3990:	9f 85       	ldd	r25, Y+15	; 0x0f
    3992:	a8 89       	ldd	r26, Y+16	; 0x10
    3994:	b9 89       	ldd	r27, Y+17	; 0x11
    3996:	8c 83       	std	Y+4, r24	; 0x04
    3998:	9d 83       	std	Y+5, r25	; 0x05
    399a:	ae 83       	std	Y+6, r26	; 0x06
    399c:	bf 83       	std	Y+7, r27	; 0x07
	uint8 local_u8DigitCounter = 0 ;
    399e:	1b 82       	std	Y+3, r1	; 0x03
    39a0:	15 c0       	rjmp	.+42     	; 0x39cc <voidSendNumber+0xc8>
	uint8 local_u8Iterator ;
						/* Calculate The Number Of Digits in Number Sent To Function */
	while (local_s32NumberSend != 0)
	{
		local_s32NumberSend /= 10 ;
    39a2:	88 85       	ldd	r24, Y+8	; 0x08
    39a4:	99 85       	ldd	r25, Y+9	; 0x09
    39a6:	aa 85       	ldd	r26, Y+10	; 0x0a
    39a8:	bb 85       	ldd	r27, Y+11	; 0x0b
    39aa:	2a e0       	ldi	r18, 0x0A	; 10
    39ac:	30 e0       	ldi	r19, 0x00	; 0
    39ae:	40 e0       	ldi	r20, 0x00	; 0
    39b0:	50 e0       	ldi	r21, 0x00	; 0
    39b2:	bc 01       	movw	r22, r24
    39b4:	cd 01       	movw	r24, r26
    39b6:	0e 94 83 26 	call	0x4d06	; 0x4d06 <__divmodsi4>
    39ba:	da 01       	movw	r26, r20
    39bc:	c9 01       	movw	r24, r18
    39be:	88 87       	std	Y+8, r24	; 0x08
    39c0:	99 87       	std	Y+9, r25	; 0x09
    39c2:	aa 87       	std	Y+10, r26	; 0x0a
    39c4:	bb 87       	std	Y+11, r27	; 0x0b
		local_u8DigitCounter++ ;
    39c6:	8b 81       	ldd	r24, Y+3	; 0x03
    39c8:	8f 5f       	subi	r24, 0xFF	; 255
    39ca:	8b 83       	std	Y+3, r24	; 0x03
	sint32 local_s32NumberSend = copy_s32Number ;
	sint32 local_s32NumberDiv  = copy_s32Number ;
	uint8 local_u8DigitCounter = 0 ;
	uint8 local_u8Iterator ;
						/* Calculate The Number Of Digits in Number Sent To Function */
	while (local_s32NumberSend != 0)
    39cc:	88 85       	ldd	r24, Y+8	; 0x08
    39ce:	99 85       	ldd	r25, Y+9	; 0x09
    39d0:	aa 85       	ldd	r26, Y+10	; 0x0a
    39d2:	bb 85       	ldd	r27, Y+11	; 0x0b
    39d4:	00 97       	sbiw	r24, 0x00	; 0
    39d6:	a1 05       	cpc	r26, r1
    39d8:	b1 05       	cpc	r27, r1
    39da:	19 f7       	brne	.-58     	; 0x39a2 <voidSendNumber+0x9e>
	{
		local_s32NumberSend /= 10 ;
		local_u8DigitCounter++ ;
	}
						/* Save The Value in Array As Separated Digits */
	uint8 local_u8ArrSize = local_u8DigitCounter ;
    39dc:	8b 81       	ldd	r24, Y+3	; 0x03
    39de:	89 83       	std	Y+1, r24	; 0x01
	uint8 local_u8NumberSendArr[local_u8ArrSize];
    39e0:	89 81       	ldd	r24, Y+1	; 0x01
    39e2:	88 2f       	mov	r24, r24
    39e4:	90 e0       	ldi	r25, 0x00	; 0
    39e6:	2d b7       	in	r18, 0x3d	; 61
    39e8:	3e b7       	in	r19, 0x3e	; 62
    39ea:	28 1b       	sub	r18, r24
    39ec:	39 0b       	sbc	r19, r25
    39ee:	0f b6       	in	r0, 0x3f	; 63
    39f0:	f8 94       	cli
    39f2:	3e bf       	out	0x3e, r19	; 62
    39f4:	0f be       	out	0x3f, r0	; 63
    39f6:	2d bf       	out	0x3d, r18	; 61
    39f8:	8d b7       	in	r24, 0x3d	; 61
    39fa:	9e b7       	in	r25, 0x3e	; 62
    39fc:	01 96       	adiw	r24, 0x01	; 1
    39fe:	9d 8b       	std	Y+21, r25	; 0x15
    3a00:	8c 8b       	std	Y+20, r24	; 0x14
    3a02:	8c 89       	ldd	r24, Y+20	; 0x14
    3a04:	9d 89       	ldd	r25, Y+21	; 0x15
    3a06:	00 96       	adiw	r24, 0x00	; 0
    3a08:	9d 8b       	std	Y+21, r25	; 0x15
    3a0a:	8c 8b       	std	Y+20, r24	; 0x14
    3a0c:	2c 89       	ldd	r18, Y+20	; 0x14
    3a0e:	3d 89       	ldd	r19, Y+21	; 0x15
    3a10:	3d 87       	std	Y+13, r19	; 0x0d
    3a12:	2c 87       	std	Y+12, r18	; 0x0c
    3a14:	30 c0       	rjmp	.+96     	; 0x3a76 <voidSendNumber+0x172>
	while (local_s32NumberDiv != 0)
	{
		local_u8NumberSendArr[local_u8ArrSize-1] = (local_s32NumberDiv % 10) ;
    3a16:	89 81       	ldd	r24, Y+1	; 0x01
    3a18:	88 2f       	mov	r24, r24
    3a1a:	90 e0       	ldi	r25, 0x00	; 0
    3a1c:	8c 01       	movw	r16, r24
    3a1e:	01 50       	subi	r16, 0x01	; 1
    3a20:	10 40       	sbci	r17, 0x00	; 0
    3a22:	8c 81       	ldd	r24, Y+4	; 0x04
    3a24:	9d 81       	ldd	r25, Y+5	; 0x05
    3a26:	ae 81       	ldd	r26, Y+6	; 0x06
    3a28:	bf 81       	ldd	r27, Y+7	; 0x07
    3a2a:	2a e0       	ldi	r18, 0x0A	; 10
    3a2c:	30 e0       	ldi	r19, 0x00	; 0
    3a2e:	40 e0       	ldi	r20, 0x00	; 0
    3a30:	50 e0       	ldi	r21, 0x00	; 0
    3a32:	bc 01       	movw	r22, r24
    3a34:	cd 01       	movw	r24, r26
    3a36:	0e 94 83 26 	call	0x4d06	; 0x4d06 <__divmodsi4>
    3a3a:	dc 01       	movw	r26, r24
    3a3c:	cb 01       	movw	r24, r22
    3a3e:	28 2f       	mov	r18, r24
    3a40:	8c 85       	ldd	r24, Y+12	; 0x0c
    3a42:	9d 85       	ldd	r25, Y+13	; 0x0d
    3a44:	fc 01       	movw	r30, r24
    3a46:	e0 0f       	add	r30, r16
    3a48:	f1 1f       	adc	r31, r17
    3a4a:	20 83       	st	Z, r18
		local_s32NumberDiv /=10 ;
    3a4c:	8c 81       	ldd	r24, Y+4	; 0x04
    3a4e:	9d 81       	ldd	r25, Y+5	; 0x05
    3a50:	ae 81       	ldd	r26, Y+6	; 0x06
    3a52:	bf 81       	ldd	r27, Y+7	; 0x07
    3a54:	2a e0       	ldi	r18, 0x0A	; 10
    3a56:	30 e0       	ldi	r19, 0x00	; 0
    3a58:	40 e0       	ldi	r20, 0x00	; 0
    3a5a:	50 e0       	ldi	r21, 0x00	; 0
    3a5c:	bc 01       	movw	r22, r24
    3a5e:	cd 01       	movw	r24, r26
    3a60:	0e 94 83 26 	call	0x4d06	; 0x4d06 <__divmodsi4>
    3a64:	da 01       	movw	r26, r20
    3a66:	c9 01       	movw	r24, r18
    3a68:	8c 83       	std	Y+4, r24	; 0x04
    3a6a:	9d 83       	std	Y+5, r25	; 0x05
    3a6c:	ae 83       	std	Y+6, r26	; 0x06
    3a6e:	bf 83       	std	Y+7, r27	; 0x07
		local_u8ArrSize -- ;
    3a70:	89 81       	ldd	r24, Y+1	; 0x01
    3a72:	81 50       	subi	r24, 0x01	; 1
    3a74:	89 83       	std	Y+1, r24	; 0x01
		local_u8DigitCounter++ ;
	}
						/* Save The Value in Array As Separated Digits */
	uint8 local_u8ArrSize = local_u8DigitCounter ;
	uint8 local_u8NumberSendArr[local_u8ArrSize];
	while (local_s32NumberDiv != 0)
    3a76:	8c 81       	ldd	r24, Y+4	; 0x04
    3a78:	9d 81       	ldd	r25, Y+5	; 0x05
    3a7a:	ae 81       	ldd	r26, Y+6	; 0x06
    3a7c:	bf 81       	ldd	r27, Y+7	; 0x07
    3a7e:	00 97       	sbiw	r24, 0x00	; 0
    3a80:	a1 05       	cpc	r26, r1
    3a82:	b1 05       	cpc	r27, r1
    3a84:	41 f6       	brne	.-112    	; 0x3a16 <voidSendNumber+0x112>
	{
		local_u8NumberSendArr[local_u8ArrSize-1] = (local_s32NumberDiv % 10) ;
		local_s32NumberDiv /=10 ;
		local_u8ArrSize -- ;
	}
	for (local_u8Iterator=0 ; local_u8Iterator < (local_u8DigitCounter) ; local_u8Iterator ++ )
    3a86:	1a 82       	std	Y+2, r1	; 0x02
    3a88:	0f c0       	rjmp	.+30     	; 0x3aa8 <voidSendNumber+0x1a4>
		{
			CLCD_voidSendData(local_u8NumberSendArr[local_u8Iterator]+'0');
    3a8a:	8a 81       	ldd	r24, Y+2	; 0x02
    3a8c:	28 2f       	mov	r18, r24
    3a8e:	30 e0       	ldi	r19, 0x00	; 0
    3a90:	8c 85       	ldd	r24, Y+12	; 0x0c
    3a92:	9d 85       	ldd	r25, Y+13	; 0x0d
    3a94:	fc 01       	movw	r30, r24
    3a96:	e2 0f       	add	r30, r18
    3a98:	f3 1f       	adc	r31, r19
    3a9a:	80 81       	ld	r24, Z
    3a9c:	80 5d       	subi	r24, 0xD0	; 208
    3a9e:	0e 94 8f 1b 	call	0x371e	; 0x371e <CLCD_voidSendData>
	{
		local_u8NumberSendArr[local_u8ArrSize-1] = (local_s32NumberDiv % 10) ;
		local_s32NumberDiv /=10 ;
		local_u8ArrSize -- ;
	}
	for (local_u8Iterator=0 ; local_u8Iterator < (local_u8DigitCounter) ; local_u8Iterator ++ )
    3aa2:	8a 81       	ldd	r24, Y+2	; 0x02
    3aa4:	8f 5f       	subi	r24, 0xFF	; 255
    3aa6:	8a 83       	std	Y+2, r24	; 0x02
    3aa8:	9a 81       	ldd	r25, Y+2	; 0x02
    3aaa:	8b 81       	ldd	r24, Y+3	; 0x03
    3aac:	98 17       	cp	r25, r24
    3aae:	68 f3       	brcs	.-38     	; 0x3a8a <voidSendNumber+0x186>
    3ab0:	8a 89       	ldd	r24, Y+18	; 0x12
    3ab2:	9b 89       	ldd	r25, Y+19	; 0x13
    3ab4:	0f b6       	in	r0, 0x3f	; 63
    3ab6:	f8 94       	cli
    3ab8:	9e bf       	out	0x3e, r25	; 62
    3aba:	0f be       	out	0x3f, r0	; 63
    3abc:	8d bf       	out	0x3d, r24	; 61
		{
			CLCD_voidSendData(local_u8NumberSendArr[local_u8Iterator]+'0');
		}
}
    3abe:	2e 89       	ldd	r18, Y+22	; 0x16
    3ac0:	3f 89       	ldd	r19, Y+23	; 0x17
    3ac2:	0f b6       	in	r0, 0x3f	; 63
    3ac4:	f8 94       	cli
    3ac6:	3e bf       	out	0x3e, r19	; 62
    3ac8:	0f be       	out	0x3f, r0	; 63
    3aca:	2d bf       	out	0x3d, r18	; 61
    3acc:	67 96       	adiw	r28, 0x17	; 23
    3ace:	0f b6       	in	r0, 0x3f	; 63
    3ad0:	f8 94       	cli
    3ad2:	de bf       	out	0x3e, r29	; 62
    3ad4:	0f be       	out	0x3f, r0	; 63
    3ad6:	cd bf       	out	0x3d, r28	; 61
    3ad8:	cf 91       	pop	r28
    3ada:	df 91       	pop	r29
    3adc:	1f 91       	pop	r17
    3ade:	0f 91       	pop	r16
    3ae0:	08 95       	ret

00003ae2 <CLCD_voidGoToXY>:

void CLCD_voidGoToXY 		( uint8 copy_u8XPos ,uint8 copy_u8YPos )
{
    3ae2:	df 93       	push	r29
    3ae4:	cf 93       	push	r28
    3ae6:	00 d0       	rcall	.+0      	; 0x3ae8 <CLCD_voidGoToXY+0x6>
    3ae8:	0f 92       	push	r0
    3aea:	cd b7       	in	r28, 0x3d	; 61
    3aec:	de b7       	in	r29, 0x3e	; 62
    3aee:	8a 83       	std	Y+2, r24	; 0x02
    3af0:	6b 83       	std	Y+3, r22	; 0x03

	uint8 Local_u8DDRamAdd = ( copy_u8YPos * 0x40u ) + copy_u8XPos ;
    3af2:	8b 81       	ldd	r24, Y+3	; 0x03
    3af4:	88 2f       	mov	r24, r24
    3af6:	90 e0       	ldi	r25, 0x00	; 0
    3af8:	00 24       	eor	r0, r0
    3afa:	96 95       	lsr	r25
    3afc:	87 95       	ror	r24
    3afe:	07 94       	ror	r0
    3b00:	96 95       	lsr	r25
    3b02:	87 95       	ror	r24
    3b04:	07 94       	ror	r0
    3b06:	98 2f       	mov	r25, r24
    3b08:	80 2d       	mov	r24, r0
    3b0a:	98 2f       	mov	r25, r24
    3b0c:	8a 81       	ldd	r24, Y+2	; 0x02
    3b0e:	89 0f       	add	r24, r25
    3b10:	89 83       	std	Y+1, r24	; 0x01

						/* Set Bit 7 for Setting DDRAM Address Command */

	SET_BIT( Local_u8DDRamAdd , 7U);
    3b12:	89 81       	ldd	r24, Y+1	; 0x01
    3b14:	80 68       	ori	r24, 0x80	; 128
    3b16:	89 83       	std	Y+1, r24	; 0x01

											//

						/* Send The Setting DDRAM Address Command */

	CLCD_voidSendCommand( Local_u8DDRamAdd );
    3b18:	89 81       	ldd	r24, Y+1	; 0x01
    3b1a:	0e 94 74 1b 	call	0x36e8	; 0x36e8 <CLCD_voidSendCommand>

											//

}
    3b1e:	0f 90       	pop	r0
    3b20:	0f 90       	pop	r0
    3b22:	0f 90       	pop	r0
    3b24:	cf 91       	pop	r28
    3b26:	df 91       	pop	r29
    3b28:	08 95       	ret

00003b2a <CLCD_u8WriteSpecialCharacter>:

uint8 CLCD_u8WriteSpecialCharacter	( uint8 copy_u8PatternNumber , uint8 copy_pu8PatternArr[] , uint8 copy_u8XPos , uint8 copy_u8YPos)
{
    3b2a:	df 93       	push	r29
    3b2c:	cf 93       	push	r28
    3b2e:	cd b7       	in	r28, 0x3d	; 61
    3b30:	de b7       	in	r29, 0x3e	; 62
    3b32:	28 97       	sbiw	r28, 0x08	; 8
    3b34:	0f b6       	in	r0, 0x3f	; 63
    3b36:	f8 94       	cli
    3b38:	de bf       	out	0x3e, r29	; 62
    3b3a:	0f be       	out	0x3f, r0	; 63
    3b3c:	cd bf       	out	0x3d, r28	; 61
    3b3e:	8c 83       	std	Y+4, r24	; 0x04
    3b40:	7e 83       	std	Y+6, r23	; 0x06
    3b42:	6d 83       	std	Y+5, r22	; 0x05
    3b44:	4f 83       	std	Y+7, r20	; 0x07
    3b46:	28 87       	std	Y+8, r18	; 0x08

	uint8 Local_u8ErrorStatus = OK ;
    3b48:	1b 82       	std	Y+3, r1	; 0x03
	if ( copy_pu8PatternArr != NULL )
    3b4a:	8d 81       	ldd	r24, Y+5	; 0x05
    3b4c:	9e 81       	ldd	r25, Y+6	; 0x06
    3b4e:	00 97       	sbiw	r24, 0x00	; 0
    3b50:	59 f1       	breq	.+86     	; 0x3ba8 <CLCD_u8WriteSpecialCharacter+0x7e>
	{

		uint8 Local_u8CGRAMAdd = copy_u8PatternNumber * 8u ;
    3b52:	8c 81       	ldd	r24, Y+4	; 0x04
    3b54:	88 2f       	mov	r24, r24
    3b56:	90 e0       	ldi	r25, 0x00	; 0
    3b58:	88 0f       	add	r24, r24
    3b5a:	99 1f       	adc	r25, r25
    3b5c:	88 0f       	add	r24, r24
    3b5e:	99 1f       	adc	r25, r25
    3b60:	88 0f       	add	r24, r24
    3b62:	99 1f       	adc	r25, r25
    3b64:	8a 83       	std	Y+2, r24	; 0x02
		uint8 Local_u8Iterator ;

						/* Set Bit 6 & Clear Bit 7 for Setting CGRAM Address Command */

		SET_BIT( Local_u8CGRAMAdd , 6U ) ;
    3b66:	8a 81       	ldd	r24, Y+2	; 0x02
    3b68:	80 64       	ori	r24, 0x40	; 64
    3b6a:	8a 83       	std	Y+2, r24	; 0x02

												//

						/* Set CGRAM Address */

		CLCD_voidSendCommand( Local_u8CGRAMAdd );
    3b6c:	8a 81       	ldd	r24, Y+2	; 0x02
    3b6e:	0e 94 74 1b 	call	0x36e8	; 0x36e8 <CLCD_voidSendCommand>

											   //

						/* Write the pattern inside CGRAM */

		for ( Local_u8Iterator = 0u ; Local_u8Iterator < 8u ; Local_u8Iterator ++)
    3b72:	19 82       	std	Y+1, r1	; 0x01
    3b74:	0e c0       	rjmp	.+28     	; 0x3b92 <CLCD_u8WriteSpecialCharacter+0x68>
		{
			CLCD_voidSendData( copy_pu8PatternArr [ Local_u8Iterator ] );
    3b76:	89 81       	ldd	r24, Y+1	; 0x01
    3b78:	28 2f       	mov	r18, r24
    3b7a:	30 e0       	ldi	r19, 0x00	; 0
    3b7c:	8d 81       	ldd	r24, Y+5	; 0x05
    3b7e:	9e 81       	ldd	r25, Y+6	; 0x06
    3b80:	fc 01       	movw	r30, r24
    3b82:	e2 0f       	add	r30, r18
    3b84:	f3 1f       	adc	r31, r19
    3b86:	80 81       	ld	r24, Z
    3b88:	0e 94 8f 1b 	call	0x371e	; 0x371e <CLCD_voidSendData>

											   //

						/* Write the pattern inside CGRAM */

		for ( Local_u8Iterator = 0u ; Local_u8Iterator < 8u ; Local_u8Iterator ++)
    3b8c:	89 81       	ldd	r24, Y+1	; 0x01
    3b8e:	8f 5f       	subi	r24, 0xFF	; 255
    3b90:	89 83       	std	Y+1, r24	; 0x01
    3b92:	89 81       	ldd	r24, Y+1	; 0x01
    3b94:	88 30       	cpi	r24, 0x08	; 8
    3b96:	78 f3       	brcs	.-34     	; 0x3b76 <CLCD_u8WriteSpecialCharacter+0x4c>

											  //

						/* Set DDRAM Address */

		CLCD_voidGoToXY( copy_u8XPos , copy_u8YPos ) ;
    3b98:	8f 81       	ldd	r24, Y+7	; 0x07
    3b9a:	68 85       	ldd	r22, Y+8	; 0x08
    3b9c:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <CLCD_voidGoToXY>

											 //

						/* Write the corresponding pattern number to display from CGRAM */

		CLCD_voidSendData( copy_u8PatternNumber ) ;
    3ba0:	8c 81       	ldd	r24, Y+4	; 0x04
    3ba2:	0e 94 8f 1b 	call	0x371e	; 0x371e <CLCD_voidSendData>
    3ba6:	02 c0       	rjmp	.+4      	; 0x3bac <CLCD_u8WriteSpecialCharacter+0x82>

	}
	else
	{

		Local_u8ErrorStatus = NULL_PTR ;
    3ba8:	82 e0       	ldi	r24, 0x02	; 2
    3baa:	8b 83       	std	Y+3, r24	; 0x03

	}

	return Local_u8ErrorStatus  ;
    3bac:	8b 81       	ldd	r24, Y+3	; 0x03

}
    3bae:	28 96       	adiw	r28, 0x08	; 8
    3bb0:	0f b6       	in	r0, 0x3f	; 63
    3bb2:	f8 94       	cli
    3bb4:	de bf       	out	0x3e, r29	; 62
    3bb6:	0f be       	out	0x3f, r0	; 63
    3bb8:	cd bf       	out	0x3d, r28	; 61
    3bba:	cf 91       	pop	r28
    3bbc:	df 91       	pop	r29
    3bbe:	08 95       	ret

00003bc0 <DIO_U8SetPinDirection>:

#include "DIO_Reg.h"
#include "DIO_Interface.h"

uint8 DIO_U8SetPinDirection	    (DIO_Port_t copy_Port,	 DIO_Pin_t copy_PinNum,		DIO_PinDir_t copy_Dir)
{
    3bc0:	df 93       	push	r29
    3bc2:	cf 93       	push	r28
    3bc4:	cd b7       	in	r28, 0x3d	; 61
    3bc6:	de b7       	in	r29, 0x3e	; 62
    3bc8:	28 97       	sbiw	r28, 0x08	; 8
    3bca:	0f b6       	in	r0, 0x3f	; 63
    3bcc:	f8 94       	cli
    3bce:	de bf       	out	0x3e, r29	; 62
    3bd0:	0f be       	out	0x3f, r0	; 63
    3bd2:	cd bf       	out	0x3d, r28	; 61
    3bd4:	8a 83       	std	Y+2, r24	; 0x02
    3bd6:	6b 83       	std	Y+3, r22	; 0x03
    3bd8:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK ;
    3bda:	19 82       	std	Y+1, r1	; 0x01
	if ( (copy_PinNum >= DIO_PIN0) && (copy_PinNum <= DIO_PIN7) )
    3bdc:	8b 81       	ldd	r24, Y+3	; 0x03
    3bde:	88 30       	cpi	r24, 0x08	; 8
    3be0:	08 f0       	brcs	.+2      	; 0x3be4 <DIO_U8SetPinDirection+0x24>
    3be2:	f4 c0       	rjmp	.+488    	; 0x3dcc <DIO_U8SetPinDirection+0x20c>
	{
		if (copy_Dir==DIO_PIN_INPUT)
    3be4:	8c 81       	ldd	r24, Y+4	; 0x04
    3be6:	88 23       	and	r24, r24
    3be8:	09 f0       	breq	.+2      	; 0x3bec <DIO_U8SetPinDirection+0x2c>
    3bea:	77 c0       	rjmp	.+238    	; 0x3cda <DIO_U8SetPinDirection+0x11a>
		{
			switch (copy_Port)
    3bec:	8a 81       	ldd	r24, Y+2	; 0x02
    3bee:	28 2f       	mov	r18, r24
    3bf0:	30 e0       	ldi	r19, 0x00	; 0
    3bf2:	38 87       	std	Y+8, r19	; 0x08
    3bf4:	2f 83       	std	Y+7, r18	; 0x07
    3bf6:	8f 81       	ldd	r24, Y+7	; 0x07
    3bf8:	98 85       	ldd	r25, Y+8	; 0x08
    3bfa:	81 30       	cpi	r24, 0x01	; 1
    3bfc:	91 05       	cpc	r25, r1
    3bfe:	59 f1       	breq	.+86     	; 0x3c56 <DIO_U8SetPinDirection+0x96>
    3c00:	2f 81       	ldd	r18, Y+7	; 0x07
    3c02:	38 85       	ldd	r19, Y+8	; 0x08
    3c04:	22 30       	cpi	r18, 0x02	; 2
    3c06:	31 05       	cpc	r19, r1
    3c08:	2c f4       	brge	.+10     	; 0x3c14 <DIO_U8SetPinDirection+0x54>
    3c0a:	8f 81       	ldd	r24, Y+7	; 0x07
    3c0c:	98 85       	ldd	r25, Y+8	; 0x08
    3c0e:	00 97       	sbiw	r24, 0x00	; 0
    3c10:	69 f0       	breq	.+26     	; 0x3c2c <DIO_U8SetPinDirection+0x6c>
    3c12:	60 c0       	rjmp	.+192    	; 0x3cd4 <DIO_U8SetPinDirection+0x114>
    3c14:	2f 81       	ldd	r18, Y+7	; 0x07
    3c16:	38 85       	ldd	r19, Y+8	; 0x08
    3c18:	22 30       	cpi	r18, 0x02	; 2
    3c1a:	31 05       	cpc	r19, r1
    3c1c:	89 f1       	breq	.+98     	; 0x3c80 <DIO_U8SetPinDirection+0xc0>
    3c1e:	8f 81       	ldd	r24, Y+7	; 0x07
    3c20:	98 85       	ldd	r25, Y+8	; 0x08
    3c22:	83 30       	cpi	r24, 0x03	; 3
    3c24:	91 05       	cpc	r25, r1
    3c26:	09 f4       	brne	.+2      	; 0x3c2a <DIO_U8SetPinDirection+0x6a>
    3c28:	40 c0       	rjmp	.+128    	; 0x3caa <DIO_U8SetPinDirection+0xea>
    3c2a:	54 c0       	rjmp	.+168    	; 0x3cd4 <DIO_U8SetPinDirection+0x114>
			{
			case DIO_PORTA : CLR_BIT(DDRA,copy_PinNum); break ;
    3c2c:	aa e3       	ldi	r26, 0x3A	; 58
    3c2e:	b0 e0       	ldi	r27, 0x00	; 0
    3c30:	ea e3       	ldi	r30, 0x3A	; 58
    3c32:	f0 e0       	ldi	r31, 0x00	; 0
    3c34:	80 81       	ld	r24, Z
    3c36:	48 2f       	mov	r20, r24
    3c38:	8b 81       	ldd	r24, Y+3	; 0x03
    3c3a:	28 2f       	mov	r18, r24
    3c3c:	30 e0       	ldi	r19, 0x00	; 0
    3c3e:	81 e0       	ldi	r24, 0x01	; 1
    3c40:	90 e0       	ldi	r25, 0x00	; 0
    3c42:	02 2e       	mov	r0, r18
    3c44:	02 c0       	rjmp	.+4      	; 0x3c4a <DIO_U8SetPinDirection+0x8a>
    3c46:	88 0f       	add	r24, r24
    3c48:	99 1f       	adc	r25, r25
    3c4a:	0a 94       	dec	r0
    3c4c:	e2 f7       	brpl	.-8      	; 0x3c46 <DIO_U8SetPinDirection+0x86>
    3c4e:	80 95       	com	r24
    3c50:	84 23       	and	r24, r20
    3c52:	8c 93       	st	X, r24
    3c54:	bd c0       	rjmp	.+378    	; 0x3dd0 <DIO_U8SetPinDirection+0x210>
			case DIO_PORTB : CLR_BIT(DDRB,copy_PinNum); break ;
    3c56:	a7 e3       	ldi	r26, 0x37	; 55
    3c58:	b0 e0       	ldi	r27, 0x00	; 0
    3c5a:	e7 e3       	ldi	r30, 0x37	; 55
    3c5c:	f0 e0       	ldi	r31, 0x00	; 0
    3c5e:	80 81       	ld	r24, Z
    3c60:	48 2f       	mov	r20, r24
    3c62:	8b 81       	ldd	r24, Y+3	; 0x03
    3c64:	28 2f       	mov	r18, r24
    3c66:	30 e0       	ldi	r19, 0x00	; 0
    3c68:	81 e0       	ldi	r24, 0x01	; 1
    3c6a:	90 e0       	ldi	r25, 0x00	; 0
    3c6c:	02 2e       	mov	r0, r18
    3c6e:	02 c0       	rjmp	.+4      	; 0x3c74 <DIO_U8SetPinDirection+0xb4>
    3c70:	88 0f       	add	r24, r24
    3c72:	99 1f       	adc	r25, r25
    3c74:	0a 94       	dec	r0
    3c76:	e2 f7       	brpl	.-8      	; 0x3c70 <DIO_U8SetPinDirection+0xb0>
    3c78:	80 95       	com	r24
    3c7a:	84 23       	and	r24, r20
    3c7c:	8c 93       	st	X, r24
    3c7e:	a8 c0       	rjmp	.+336    	; 0x3dd0 <DIO_U8SetPinDirection+0x210>
			case DIO_PORTC : CLR_BIT(DDRC,copy_PinNum); break ;
    3c80:	a4 e3       	ldi	r26, 0x34	; 52
    3c82:	b0 e0       	ldi	r27, 0x00	; 0
    3c84:	e4 e3       	ldi	r30, 0x34	; 52
    3c86:	f0 e0       	ldi	r31, 0x00	; 0
    3c88:	80 81       	ld	r24, Z
    3c8a:	48 2f       	mov	r20, r24
    3c8c:	8b 81       	ldd	r24, Y+3	; 0x03
    3c8e:	28 2f       	mov	r18, r24
    3c90:	30 e0       	ldi	r19, 0x00	; 0
    3c92:	81 e0       	ldi	r24, 0x01	; 1
    3c94:	90 e0       	ldi	r25, 0x00	; 0
    3c96:	02 2e       	mov	r0, r18
    3c98:	02 c0       	rjmp	.+4      	; 0x3c9e <DIO_U8SetPinDirection+0xde>
    3c9a:	88 0f       	add	r24, r24
    3c9c:	99 1f       	adc	r25, r25
    3c9e:	0a 94       	dec	r0
    3ca0:	e2 f7       	brpl	.-8      	; 0x3c9a <DIO_U8SetPinDirection+0xda>
    3ca2:	80 95       	com	r24
    3ca4:	84 23       	and	r24, r20
    3ca6:	8c 93       	st	X, r24
    3ca8:	93 c0       	rjmp	.+294    	; 0x3dd0 <DIO_U8SetPinDirection+0x210>
			case DIO_PORTD : CLR_BIT(DDRD,copy_PinNum); break ;
    3caa:	a1 e3       	ldi	r26, 0x31	; 49
    3cac:	b0 e0       	ldi	r27, 0x00	; 0
    3cae:	e1 e3       	ldi	r30, 0x31	; 49
    3cb0:	f0 e0       	ldi	r31, 0x00	; 0
    3cb2:	80 81       	ld	r24, Z
    3cb4:	48 2f       	mov	r20, r24
    3cb6:	8b 81       	ldd	r24, Y+3	; 0x03
    3cb8:	28 2f       	mov	r18, r24
    3cba:	30 e0       	ldi	r19, 0x00	; 0
    3cbc:	81 e0       	ldi	r24, 0x01	; 1
    3cbe:	90 e0       	ldi	r25, 0x00	; 0
    3cc0:	02 2e       	mov	r0, r18
    3cc2:	02 c0       	rjmp	.+4      	; 0x3cc8 <DIO_U8SetPinDirection+0x108>
    3cc4:	88 0f       	add	r24, r24
    3cc6:	99 1f       	adc	r25, r25
    3cc8:	0a 94       	dec	r0
    3cca:	e2 f7       	brpl	.-8      	; 0x3cc4 <DIO_U8SetPinDirection+0x104>
    3ccc:	80 95       	com	r24
    3cce:	84 23       	and	r24, r20
    3cd0:	8c 93       	st	X, r24
    3cd2:	7e c0       	rjmp	.+252    	; 0x3dd0 <DIO_U8SetPinDirection+0x210>
			default : Local_u8ErrorState = NOK ; break ;
    3cd4:	81 e0       	ldi	r24, 0x01	; 1
    3cd6:	89 83       	std	Y+1, r24	; 0x01
    3cd8:	7b c0       	rjmp	.+246    	; 0x3dd0 <DIO_U8SetPinDirection+0x210>
			}
		}
		else if (copy_Dir==DIO_PIN_OUTPUT)
    3cda:	8c 81       	ldd	r24, Y+4	; 0x04
    3cdc:	81 30       	cpi	r24, 0x01	; 1
    3cde:	09 f0       	breq	.+2      	; 0x3ce2 <DIO_U8SetPinDirection+0x122>
    3ce0:	72 c0       	rjmp	.+228    	; 0x3dc6 <DIO_U8SetPinDirection+0x206>
		{
			switch (copy_Port)
    3ce2:	8a 81       	ldd	r24, Y+2	; 0x02
    3ce4:	28 2f       	mov	r18, r24
    3ce6:	30 e0       	ldi	r19, 0x00	; 0
    3ce8:	3e 83       	std	Y+6, r19	; 0x06
    3cea:	2d 83       	std	Y+5, r18	; 0x05
    3cec:	8d 81       	ldd	r24, Y+5	; 0x05
    3cee:	9e 81       	ldd	r25, Y+6	; 0x06
    3cf0:	81 30       	cpi	r24, 0x01	; 1
    3cf2:	91 05       	cpc	r25, r1
    3cf4:	49 f1       	breq	.+82     	; 0x3d48 <DIO_U8SetPinDirection+0x188>
    3cf6:	2d 81       	ldd	r18, Y+5	; 0x05
    3cf8:	3e 81       	ldd	r19, Y+6	; 0x06
    3cfa:	22 30       	cpi	r18, 0x02	; 2
    3cfc:	31 05       	cpc	r19, r1
    3cfe:	2c f4       	brge	.+10     	; 0x3d0a <DIO_U8SetPinDirection+0x14a>
    3d00:	8d 81       	ldd	r24, Y+5	; 0x05
    3d02:	9e 81       	ldd	r25, Y+6	; 0x06
    3d04:	00 97       	sbiw	r24, 0x00	; 0
    3d06:	61 f0       	breq	.+24     	; 0x3d20 <DIO_U8SetPinDirection+0x160>
    3d08:	5b c0       	rjmp	.+182    	; 0x3dc0 <DIO_U8SetPinDirection+0x200>
    3d0a:	2d 81       	ldd	r18, Y+5	; 0x05
    3d0c:	3e 81       	ldd	r19, Y+6	; 0x06
    3d0e:	22 30       	cpi	r18, 0x02	; 2
    3d10:	31 05       	cpc	r19, r1
    3d12:	71 f1       	breq	.+92     	; 0x3d70 <DIO_U8SetPinDirection+0x1b0>
    3d14:	8d 81       	ldd	r24, Y+5	; 0x05
    3d16:	9e 81       	ldd	r25, Y+6	; 0x06
    3d18:	83 30       	cpi	r24, 0x03	; 3
    3d1a:	91 05       	cpc	r25, r1
    3d1c:	e9 f1       	breq	.+122    	; 0x3d98 <DIO_U8SetPinDirection+0x1d8>
    3d1e:	50 c0       	rjmp	.+160    	; 0x3dc0 <DIO_U8SetPinDirection+0x200>
			{
			case DIO_PORTA : SET_BIT(DDRA,copy_PinNum); break ;
    3d20:	aa e3       	ldi	r26, 0x3A	; 58
    3d22:	b0 e0       	ldi	r27, 0x00	; 0
    3d24:	ea e3       	ldi	r30, 0x3A	; 58
    3d26:	f0 e0       	ldi	r31, 0x00	; 0
    3d28:	80 81       	ld	r24, Z
    3d2a:	48 2f       	mov	r20, r24
    3d2c:	8b 81       	ldd	r24, Y+3	; 0x03
    3d2e:	28 2f       	mov	r18, r24
    3d30:	30 e0       	ldi	r19, 0x00	; 0
    3d32:	81 e0       	ldi	r24, 0x01	; 1
    3d34:	90 e0       	ldi	r25, 0x00	; 0
    3d36:	02 2e       	mov	r0, r18
    3d38:	02 c0       	rjmp	.+4      	; 0x3d3e <DIO_U8SetPinDirection+0x17e>
    3d3a:	88 0f       	add	r24, r24
    3d3c:	99 1f       	adc	r25, r25
    3d3e:	0a 94       	dec	r0
    3d40:	e2 f7       	brpl	.-8      	; 0x3d3a <DIO_U8SetPinDirection+0x17a>
    3d42:	84 2b       	or	r24, r20
    3d44:	8c 93       	st	X, r24
    3d46:	44 c0       	rjmp	.+136    	; 0x3dd0 <DIO_U8SetPinDirection+0x210>
			case DIO_PORTB : SET_BIT(DDRB,copy_PinNum); break ;
    3d48:	a7 e3       	ldi	r26, 0x37	; 55
    3d4a:	b0 e0       	ldi	r27, 0x00	; 0
    3d4c:	e7 e3       	ldi	r30, 0x37	; 55
    3d4e:	f0 e0       	ldi	r31, 0x00	; 0
    3d50:	80 81       	ld	r24, Z
    3d52:	48 2f       	mov	r20, r24
    3d54:	8b 81       	ldd	r24, Y+3	; 0x03
    3d56:	28 2f       	mov	r18, r24
    3d58:	30 e0       	ldi	r19, 0x00	; 0
    3d5a:	81 e0       	ldi	r24, 0x01	; 1
    3d5c:	90 e0       	ldi	r25, 0x00	; 0
    3d5e:	02 2e       	mov	r0, r18
    3d60:	02 c0       	rjmp	.+4      	; 0x3d66 <DIO_U8SetPinDirection+0x1a6>
    3d62:	88 0f       	add	r24, r24
    3d64:	99 1f       	adc	r25, r25
    3d66:	0a 94       	dec	r0
    3d68:	e2 f7       	brpl	.-8      	; 0x3d62 <DIO_U8SetPinDirection+0x1a2>
    3d6a:	84 2b       	or	r24, r20
    3d6c:	8c 93       	st	X, r24
    3d6e:	30 c0       	rjmp	.+96     	; 0x3dd0 <DIO_U8SetPinDirection+0x210>
			case DIO_PORTC : SET_BIT(DDRC,copy_PinNum); break ;
    3d70:	a4 e3       	ldi	r26, 0x34	; 52
    3d72:	b0 e0       	ldi	r27, 0x00	; 0
    3d74:	e4 e3       	ldi	r30, 0x34	; 52
    3d76:	f0 e0       	ldi	r31, 0x00	; 0
    3d78:	80 81       	ld	r24, Z
    3d7a:	48 2f       	mov	r20, r24
    3d7c:	8b 81       	ldd	r24, Y+3	; 0x03
    3d7e:	28 2f       	mov	r18, r24
    3d80:	30 e0       	ldi	r19, 0x00	; 0
    3d82:	81 e0       	ldi	r24, 0x01	; 1
    3d84:	90 e0       	ldi	r25, 0x00	; 0
    3d86:	02 2e       	mov	r0, r18
    3d88:	02 c0       	rjmp	.+4      	; 0x3d8e <DIO_U8SetPinDirection+0x1ce>
    3d8a:	88 0f       	add	r24, r24
    3d8c:	99 1f       	adc	r25, r25
    3d8e:	0a 94       	dec	r0
    3d90:	e2 f7       	brpl	.-8      	; 0x3d8a <DIO_U8SetPinDirection+0x1ca>
    3d92:	84 2b       	or	r24, r20
    3d94:	8c 93       	st	X, r24
    3d96:	1c c0       	rjmp	.+56     	; 0x3dd0 <DIO_U8SetPinDirection+0x210>
			case DIO_PORTD : SET_BIT(DDRD,copy_PinNum); break ;
    3d98:	a1 e3       	ldi	r26, 0x31	; 49
    3d9a:	b0 e0       	ldi	r27, 0x00	; 0
    3d9c:	e1 e3       	ldi	r30, 0x31	; 49
    3d9e:	f0 e0       	ldi	r31, 0x00	; 0
    3da0:	80 81       	ld	r24, Z
    3da2:	48 2f       	mov	r20, r24
    3da4:	8b 81       	ldd	r24, Y+3	; 0x03
    3da6:	28 2f       	mov	r18, r24
    3da8:	30 e0       	ldi	r19, 0x00	; 0
    3daa:	81 e0       	ldi	r24, 0x01	; 1
    3dac:	90 e0       	ldi	r25, 0x00	; 0
    3dae:	02 2e       	mov	r0, r18
    3db0:	02 c0       	rjmp	.+4      	; 0x3db6 <DIO_U8SetPinDirection+0x1f6>
    3db2:	88 0f       	add	r24, r24
    3db4:	99 1f       	adc	r25, r25
    3db6:	0a 94       	dec	r0
    3db8:	e2 f7       	brpl	.-8      	; 0x3db2 <DIO_U8SetPinDirection+0x1f2>
    3dba:	84 2b       	or	r24, r20
    3dbc:	8c 93       	st	X, r24
    3dbe:	08 c0       	rjmp	.+16     	; 0x3dd0 <DIO_U8SetPinDirection+0x210>
			default : Local_u8ErrorState = NOK ; break ;
    3dc0:	81 e0       	ldi	r24, 0x01	; 1
    3dc2:	89 83       	std	Y+1, r24	; 0x01
    3dc4:	05 c0       	rjmp	.+10     	; 0x3dd0 <DIO_U8SetPinDirection+0x210>
			}
		}
		else
		{
			Local_u8ErrorState = NOK ;
    3dc6:	81 e0       	ldi	r24, 0x01	; 1
    3dc8:	89 83       	std	Y+1, r24	; 0x01
    3dca:	02 c0       	rjmp	.+4      	; 0x3dd0 <DIO_U8SetPinDirection+0x210>
		}
	}
	else
	{
		Local_u8ErrorState = NOK ;
    3dcc:	81 e0       	ldi	r24, 0x01	; 1
    3dce:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    3dd0:	89 81       	ldd	r24, Y+1	; 0x01
}
    3dd2:	28 96       	adiw	r28, 0x08	; 8
    3dd4:	0f b6       	in	r0, 0x3f	; 63
    3dd6:	f8 94       	cli
    3dd8:	de bf       	out	0x3e, r29	; 62
    3dda:	0f be       	out	0x3f, r0	; 63
    3ddc:	cd bf       	out	0x3d, r28	; 61
    3dde:	cf 91       	pop	r28
    3de0:	df 91       	pop	r29
    3de2:	08 95       	ret

00003de4 <DIO_U8SetPortDirection>:
uint8 DIO_U8SetPortDirection	(DIO_Port_t copy_Port,	 uint8 copy_u8PortDir)
{
    3de4:	df 93       	push	r29
    3de6:	cf 93       	push	r28
    3de8:	00 d0       	rcall	.+0      	; 0x3dea <DIO_U8SetPortDirection+0x6>
    3dea:	00 d0       	rcall	.+0      	; 0x3dec <DIO_U8SetPortDirection+0x8>
    3dec:	0f 92       	push	r0
    3dee:	cd b7       	in	r28, 0x3d	; 61
    3df0:	de b7       	in	r29, 0x3e	; 62
    3df2:	8a 83       	std	Y+2, r24	; 0x02
    3df4:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK ;
    3df6:	19 82       	std	Y+1, r1	; 0x01
	switch (copy_Port)
    3df8:	8a 81       	ldd	r24, Y+2	; 0x02
    3dfa:	28 2f       	mov	r18, r24
    3dfc:	30 e0       	ldi	r19, 0x00	; 0
    3dfe:	3d 83       	std	Y+5, r19	; 0x05
    3e00:	2c 83       	std	Y+4, r18	; 0x04
    3e02:	8c 81       	ldd	r24, Y+4	; 0x04
    3e04:	9d 81       	ldd	r25, Y+5	; 0x05
    3e06:	81 30       	cpi	r24, 0x01	; 1
    3e08:	91 05       	cpc	r25, r1
    3e0a:	d1 f0       	breq	.+52     	; 0x3e40 <DIO_U8SetPortDirection+0x5c>
    3e0c:	2c 81       	ldd	r18, Y+4	; 0x04
    3e0e:	3d 81       	ldd	r19, Y+5	; 0x05
    3e10:	22 30       	cpi	r18, 0x02	; 2
    3e12:	31 05       	cpc	r19, r1
    3e14:	2c f4       	brge	.+10     	; 0x3e20 <DIO_U8SetPortDirection+0x3c>
    3e16:	8c 81       	ldd	r24, Y+4	; 0x04
    3e18:	9d 81       	ldd	r25, Y+5	; 0x05
    3e1a:	00 97       	sbiw	r24, 0x00	; 0
    3e1c:	61 f0       	breq	.+24     	; 0x3e36 <DIO_U8SetPortDirection+0x52>
    3e1e:	1f c0       	rjmp	.+62     	; 0x3e5e <DIO_U8SetPortDirection+0x7a>
    3e20:	2c 81       	ldd	r18, Y+4	; 0x04
    3e22:	3d 81       	ldd	r19, Y+5	; 0x05
    3e24:	22 30       	cpi	r18, 0x02	; 2
    3e26:	31 05       	cpc	r19, r1
    3e28:	81 f0       	breq	.+32     	; 0x3e4a <DIO_U8SetPortDirection+0x66>
    3e2a:	8c 81       	ldd	r24, Y+4	; 0x04
    3e2c:	9d 81       	ldd	r25, Y+5	; 0x05
    3e2e:	83 30       	cpi	r24, 0x03	; 3
    3e30:	91 05       	cpc	r25, r1
    3e32:	81 f0       	breq	.+32     	; 0x3e54 <DIO_U8SetPortDirection+0x70>
    3e34:	14 c0       	rjmp	.+40     	; 0x3e5e <DIO_U8SetPortDirection+0x7a>
	{
	case DIO_PORTA : DDRA = copy_u8PortDir ; break ;
    3e36:	ea e3       	ldi	r30, 0x3A	; 58
    3e38:	f0 e0       	ldi	r31, 0x00	; 0
    3e3a:	8b 81       	ldd	r24, Y+3	; 0x03
    3e3c:	80 83       	st	Z, r24
    3e3e:	11 c0       	rjmp	.+34     	; 0x3e62 <DIO_U8SetPortDirection+0x7e>
	case DIO_PORTB : DDRB = copy_u8PortDir ; break ;
    3e40:	e7 e3       	ldi	r30, 0x37	; 55
    3e42:	f0 e0       	ldi	r31, 0x00	; 0
    3e44:	8b 81       	ldd	r24, Y+3	; 0x03
    3e46:	80 83       	st	Z, r24
    3e48:	0c c0       	rjmp	.+24     	; 0x3e62 <DIO_U8SetPortDirection+0x7e>
	case DIO_PORTC : DDRC = copy_u8PortDir ; break ;
    3e4a:	e4 e3       	ldi	r30, 0x34	; 52
    3e4c:	f0 e0       	ldi	r31, 0x00	; 0
    3e4e:	8b 81       	ldd	r24, Y+3	; 0x03
    3e50:	80 83       	st	Z, r24
    3e52:	07 c0       	rjmp	.+14     	; 0x3e62 <DIO_U8SetPortDirection+0x7e>
	case DIO_PORTD : DDRD = copy_u8PortDir ; break ;
    3e54:	e1 e3       	ldi	r30, 0x31	; 49
    3e56:	f0 e0       	ldi	r31, 0x00	; 0
    3e58:	8b 81       	ldd	r24, Y+3	; 0x03
    3e5a:	80 83       	st	Z, r24
    3e5c:	02 c0       	rjmp	.+4      	; 0x3e62 <DIO_U8SetPortDirection+0x7e>
	default : Local_u8ErrorState = NOK     ; break ;
    3e5e:	81 e0       	ldi	r24, 0x01	; 1
    3e60:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    3e62:	89 81       	ldd	r24, Y+1	; 0x01
}
    3e64:	0f 90       	pop	r0
    3e66:	0f 90       	pop	r0
    3e68:	0f 90       	pop	r0
    3e6a:	0f 90       	pop	r0
    3e6c:	0f 90       	pop	r0
    3e6e:	cf 91       	pop	r28
    3e70:	df 91       	pop	r29
    3e72:	08 95       	ret

00003e74 <DIO_U8SetPinValue>:

uint8 DIO_U8SetPinValue	        (DIO_Port_t copy_Port,	 DIO_Pin_t copy_PinNum,		DIO_PinVal_t copy_Val)
{
    3e74:	df 93       	push	r29
    3e76:	cf 93       	push	r28
    3e78:	cd b7       	in	r28, 0x3d	; 61
    3e7a:	de b7       	in	r29, 0x3e	; 62
    3e7c:	28 97       	sbiw	r28, 0x08	; 8
    3e7e:	0f b6       	in	r0, 0x3f	; 63
    3e80:	f8 94       	cli
    3e82:	de bf       	out	0x3e, r29	; 62
    3e84:	0f be       	out	0x3f, r0	; 63
    3e86:	cd bf       	out	0x3d, r28	; 61
    3e88:	8a 83       	std	Y+2, r24	; 0x02
    3e8a:	6b 83       	std	Y+3, r22	; 0x03
    3e8c:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK ;
    3e8e:	19 82       	std	Y+1, r1	; 0x01
	if ( (copy_PinNum >= DIO_PIN0) && (copy_PinNum <= DIO_PIN7) )
    3e90:	8b 81       	ldd	r24, Y+3	; 0x03
    3e92:	88 30       	cpi	r24, 0x08	; 8
    3e94:	08 f0       	brcs	.+2      	; 0x3e98 <DIO_U8SetPinValue+0x24>
    3e96:	f4 c0       	rjmp	.+488    	; 0x4080 <DIO_U8SetPinValue+0x20c>
	{
		if (copy_Val==DIO_PIN_LOW)
    3e98:	8c 81       	ldd	r24, Y+4	; 0x04
    3e9a:	88 23       	and	r24, r24
    3e9c:	09 f0       	breq	.+2      	; 0x3ea0 <DIO_U8SetPinValue+0x2c>
    3e9e:	77 c0       	rjmp	.+238    	; 0x3f8e <DIO_U8SetPinValue+0x11a>
		{
			switch (copy_Port)
    3ea0:	8a 81       	ldd	r24, Y+2	; 0x02
    3ea2:	28 2f       	mov	r18, r24
    3ea4:	30 e0       	ldi	r19, 0x00	; 0
    3ea6:	38 87       	std	Y+8, r19	; 0x08
    3ea8:	2f 83       	std	Y+7, r18	; 0x07
    3eaa:	8f 81       	ldd	r24, Y+7	; 0x07
    3eac:	98 85       	ldd	r25, Y+8	; 0x08
    3eae:	81 30       	cpi	r24, 0x01	; 1
    3eb0:	91 05       	cpc	r25, r1
    3eb2:	59 f1       	breq	.+86     	; 0x3f0a <DIO_U8SetPinValue+0x96>
    3eb4:	2f 81       	ldd	r18, Y+7	; 0x07
    3eb6:	38 85       	ldd	r19, Y+8	; 0x08
    3eb8:	22 30       	cpi	r18, 0x02	; 2
    3eba:	31 05       	cpc	r19, r1
    3ebc:	2c f4       	brge	.+10     	; 0x3ec8 <DIO_U8SetPinValue+0x54>
    3ebe:	8f 81       	ldd	r24, Y+7	; 0x07
    3ec0:	98 85       	ldd	r25, Y+8	; 0x08
    3ec2:	00 97       	sbiw	r24, 0x00	; 0
    3ec4:	69 f0       	breq	.+26     	; 0x3ee0 <DIO_U8SetPinValue+0x6c>
    3ec6:	60 c0       	rjmp	.+192    	; 0x3f88 <DIO_U8SetPinValue+0x114>
    3ec8:	2f 81       	ldd	r18, Y+7	; 0x07
    3eca:	38 85       	ldd	r19, Y+8	; 0x08
    3ecc:	22 30       	cpi	r18, 0x02	; 2
    3ece:	31 05       	cpc	r19, r1
    3ed0:	89 f1       	breq	.+98     	; 0x3f34 <DIO_U8SetPinValue+0xc0>
    3ed2:	8f 81       	ldd	r24, Y+7	; 0x07
    3ed4:	98 85       	ldd	r25, Y+8	; 0x08
    3ed6:	83 30       	cpi	r24, 0x03	; 3
    3ed8:	91 05       	cpc	r25, r1
    3eda:	09 f4       	brne	.+2      	; 0x3ede <DIO_U8SetPinValue+0x6a>
    3edc:	40 c0       	rjmp	.+128    	; 0x3f5e <DIO_U8SetPinValue+0xea>
    3ede:	54 c0       	rjmp	.+168    	; 0x3f88 <DIO_U8SetPinValue+0x114>
			{
			case DIO_PORTA : CLR_BIT(PORTA,copy_PinNum); break ;
    3ee0:	ab e3       	ldi	r26, 0x3B	; 59
    3ee2:	b0 e0       	ldi	r27, 0x00	; 0
    3ee4:	eb e3       	ldi	r30, 0x3B	; 59
    3ee6:	f0 e0       	ldi	r31, 0x00	; 0
    3ee8:	80 81       	ld	r24, Z
    3eea:	48 2f       	mov	r20, r24
    3eec:	8b 81       	ldd	r24, Y+3	; 0x03
    3eee:	28 2f       	mov	r18, r24
    3ef0:	30 e0       	ldi	r19, 0x00	; 0
    3ef2:	81 e0       	ldi	r24, 0x01	; 1
    3ef4:	90 e0       	ldi	r25, 0x00	; 0
    3ef6:	02 2e       	mov	r0, r18
    3ef8:	02 c0       	rjmp	.+4      	; 0x3efe <DIO_U8SetPinValue+0x8a>
    3efa:	88 0f       	add	r24, r24
    3efc:	99 1f       	adc	r25, r25
    3efe:	0a 94       	dec	r0
    3f00:	e2 f7       	brpl	.-8      	; 0x3efa <DIO_U8SetPinValue+0x86>
    3f02:	80 95       	com	r24
    3f04:	84 23       	and	r24, r20
    3f06:	8c 93       	st	X, r24
    3f08:	bd c0       	rjmp	.+378    	; 0x4084 <DIO_U8SetPinValue+0x210>
			case DIO_PORTB : CLR_BIT(PORTB,copy_PinNum); break ;
    3f0a:	a8 e3       	ldi	r26, 0x38	; 56
    3f0c:	b0 e0       	ldi	r27, 0x00	; 0
    3f0e:	e8 e3       	ldi	r30, 0x38	; 56
    3f10:	f0 e0       	ldi	r31, 0x00	; 0
    3f12:	80 81       	ld	r24, Z
    3f14:	48 2f       	mov	r20, r24
    3f16:	8b 81       	ldd	r24, Y+3	; 0x03
    3f18:	28 2f       	mov	r18, r24
    3f1a:	30 e0       	ldi	r19, 0x00	; 0
    3f1c:	81 e0       	ldi	r24, 0x01	; 1
    3f1e:	90 e0       	ldi	r25, 0x00	; 0
    3f20:	02 2e       	mov	r0, r18
    3f22:	02 c0       	rjmp	.+4      	; 0x3f28 <DIO_U8SetPinValue+0xb4>
    3f24:	88 0f       	add	r24, r24
    3f26:	99 1f       	adc	r25, r25
    3f28:	0a 94       	dec	r0
    3f2a:	e2 f7       	brpl	.-8      	; 0x3f24 <DIO_U8SetPinValue+0xb0>
    3f2c:	80 95       	com	r24
    3f2e:	84 23       	and	r24, r20
    3f30:	8c 93       	st	X, r24
    3f32:	a8 c0       	rjmp	.+336    	; 0x4084 <DIO_U8SetPinValue+0x210>
			case DIO_PORTC : CLR_BIT(PORTC,copy_PinNum); break ;
    3f34:	a5 e3       	ldi	r26, 0x35	; 53
    3f36:	b0 e0       	ldi	r27, 0x00	; 0
    3f38:	e5 e3       	ldi	r30, 0x35	; 53
    3f3a:	f0 e0       	ldi	r31, 0x00	; 0
    3f3c:	80 81       	ld	r24, Z
    3f3e:	48 2f       	mov	r20, r24
    3f40:	8b 81       	ldd	r24, Y+3	; 0x03
    3f42:	28 2f       	mov	r18, r24
    3f44:	30 e0       	ldi	r19, 0x00	; 0
    3f46:	81 e0       	ldi	r24, 0x01	; 1
    3f48:	90 e0       	ldi	r25, 0x00	; 0
    3f4a:	02 2e       	mov	r0, r18
    3f4c:	02 c0       	rjmp	.+4      	; 0x3f52 <DIO_U8SetPinValue+0xde>
    3f4e:	88 0f       	add	r24, r24
    3f50:	99 1f       	adc	r25, r25
    3f52:	0a 94       	dec	r0
    3f54:	e2 f7       	brpl	.-8      	; 0x3f4e <DIO_U8SetPinValue+0xda>
    3f56:	80 95       	com	r24
    3f58:	84 23       	and	r24, r20
    3f5a:	8c 93       	st	X, r24
    3f5c:	93 c0       	rjmp	.+294    	; 0x4084 <DIO_U8SetPinValue+0x210>
			case DIO_PORTD : CLR_BIT(PORTD,copy_PinNum); break ;
    3f5e:	a2 e3       	ldi	r26, 0x32	; 50
    3f60:	b0 e0       	ldi	r27, 0x00	; 0
    3f62:	e2 e3       	ldi	r30, 0x32	; 50
    3f64:	f0 e0       	ldi	r31, 0x00	; 0
    3f66:	80 81       	ld	r24, Z
    3f68:	48 2f       	mov	r20, r24
    3f6a:	8b 81       	ldd	r24, Y+3	; 0x03
    3f6c:	28 2f       	mov	r18, r24
    3f6e:	30 e0       	ldi	r19, 0x00	; 0
    3f70:	81 e0       	ldi	r24, 0x01	; 1
    3f72:	90 e0       	ldi	r25, 0x00	; 0
    3f74:	02 2e       	mov	r0, r18
    3f76:	02 c0       	rjmp	.+4      	; 0x3f7c <DIO_U8SetPinValue+0x108>
    3f78:	88 0f       	add	r24, r24
    3f7a:	99 1f       	adc	r25, r25
    3f7c:	0a 94       	dec	r0
    3f7e:	e2 f7       	brpl	.-8      	; 0x3f78 <DIO_U8SetPinValue+0x104>
    3f80:	80 95       	com	r24
    3f82:	84 23       	and	r24, r20
    3f84:	8c 93       	st	X, r24
    3f86:	7e c0       	rjmp	.+252    	; 0x4084 <DIO_U8SetPinValue+0x210>
			default : Local_u8ErrorState = NOK ; break ;
    3f88:	81 e0       	ldi	r24, 0x01	; 1
    3f8a:	89 83       	std	Y+1, r24	; 0x01
    3f8c:	7b c0       	rjmp	.+246    	; 0x4084 <DIO_U8SetPinValue+0x210>
			}
		}
		else if (copy_Val==DIO_PIN_HIGH)
    3f8e:	8c 81       	ldd	r24, Y+4	; 0x04
    3f90:	81 30       	cpi	r24, 0x01	; 1
    3f92:	09 f0       	breq	.+2      	; 0x3f96 <DIO_U8SetPinValue+0x122>
    3f94:	72 c0       	rjmp	.+228    	; 0x407a <DIO_U8SetPinValue+0x206>
		{
			switch (copy_Port)
    3f96:	8a 81       	ldd	r24, Y+2	; 0x02
    3f98:	28 2f       	mov	r18, r24
    3f9a:	30 e0       	ldi	r19, 0x00	; 0
    3f9c:	3e 83       	std	Y+6, r19	; 0x06
    3f9e:	2d 83       	std	Y+5, r18	; 0x05
    3fa0:	8d 81       	ldd	r24, Y+5	; 0x05
    3fa2:	9e 81       	ldd	r25, Y+6	; 0x06
    3fa4:	81 30       	cpi	r24, 0x01	; 1
    3fa6:	91 05       	cpc	r25, r1
    3fa8:	49 f1       	breq	.+82     	; 0x3ffc <DIO_U8SetPinValue+0x188>
    3faa:	2d 81       	ldd	r18, Y+5	; 0x05
    3fac:	3e 81       	ldd	r19, Y+6	; 0x06
    3fae:	22 30       	cpi	r18, 0x02	; 2
    3fb0:	31 05       	cpc	r19, r1
    3fb2:	2c f4       	brge	.+10     	; 0x3fbe <DIO_U8SetPinValue+0x14a>
    3fb4:	8d 81       	ldd	r24, Y+5	; 0x05
    3fb6:	9e 81       	ldd	r25, Y+6	; 0x06
    3fb8:	00 97       	sbiw	r24, 0x00	; 0
    3fba:	61 f0       	breq	.+24     	; 0x3fd4 <DIO_U8SetPinValue+0x160>
    3fbc:	5b c0       	rjmp	.+182    	; 0x4074 <DIO_U8SetPinValue+0x200>
    3fbe:	2d 81       	ldd	r18, Y+5	; 0x05
    3fc0:	3e 81       	ldd	r19, Y+6	; 0x06
    3fc2:	22 30       	cpi	r18, 0x02	; 2
    3fc4:	31 05       	cpc	r19, r1
    3fc6:	71 f1       	breq	.+92     	; 0x4024 <DIO_U8SetPinValue+0x1b0>
    3fc8:	8d 81       	ldd	r24, Y+5	; 0x05
    3fca:	9e 81       	ldd	r25, Y+6	; 0x06
    3fcc:	83 30       	cpi	r24, 0x03	; 3
    3fce:	91 05       	cpc	r25, r1
    3fd0:	e9 f1       	breq	.+122    	; 0x404c <DIO_U8SetPinValue+0x1d8>
    3fd2:	50 c0       	rjmp	.+160    	; 0x4074 <DIO_U8SetPinValue+0x200>
			{
			case DIO_PORTA : SET_BIT(PORTA,copy_PinNum); break ;
    3fd4:	ab e3       	ldi	r26, 0x3B	; 59
    3fd6:	b0 e0       	ldi	r27, 0x00	; 0
    3fd8:	eb e3       	ldi	r30, 0x3B	; 59
    3fda:	f0 e0       	ldi	r31, 0x00	; 0
    3fdc:	80 81       	ld	r24, Z
    3fde:	48 2f       	mov	r20, r24
    3fe0:	8b 81       	ldd	r24, Y+3	; 0x03
    3fe2:	28 2f       	mov	r18, r24
    3fe4:	30 e0       	ldi	r19, 0x00	; 0
    3fe6:	81 e0       	ldi	r24, 0x01	; 1
    3fe8:	90 e0       	ldi	r25, 0x00	; 0
    3fea:	02 2e       	mov	r0, r18
    3fec:	02 c0       	rjmp	.+4      	; 0x3ff2 <DIO_U8SetPinValue+0x17e>
    3fee:	88 0f       	add	r24, r24
    3ff0:	99 1f       	adc	r25, r25
    3ff2:	0a 94       	dec	r0
    3ff4:	e2 f7       	brpl	.-8      	; 0x3fee <DIO_U8SetPinValue+0x17a>
    3ff6:	84 2b       	or	r24, r20
    3ff8:	8c 93       	st	X, r24
    3ffa:	44 c0       	rjmp	.+136    	; 0x4084 <DIO_U8SetPinValue+0x210>
			case DIO_PORTB : SET_BIT(PORTB,copy_PinNum); break ;
    3ffc:	a8 e3       	ldi	r26, 0x38	; 56
    3ffe:	b0 e0       	ldi	r27, 0x00	; 0
    4000:	e8 e3       	ldi	r30, 0x38	; 56
    4002:	f0 e0       	ldi	r31, 0x00	; 0
    4004:	80 81       	ld	r24, Z
    4006:	48 2f       	mov	r20, r24
    4008:	8b 81       	ldd	r24, Y+3	; 0x03
    400a:	28 2f       	mov	r18, r24
    400c:	30 e0       	ldi	r19, 0x00	; 0
    400e:	81 e0       	ldi	r24, 0x01	; 1
    4010:	90 e0       	ldi	r25, 0x00	; 0
    4012:	02 2e       	mov	r0, r18
    4014:	02 c0       	rjmp	.+4      	; 0x401a <DIO_U8SetPinValue+0x1a6>
    4016:	88 0f       	add	r24, r24
    4018:	99 1f       	adc	r25, r25
    401a:	0a 94       	dec	r0
    401c:	e2 f7       	brpl	.-8      	; 0x4016 <DIO_U8SetPinValue+0x1a2>
    401e:	84 2b       	or	r24, r20
    4020:	8c 93       	st	X, r24
    4022:	30 c0       	rjmp	.+96     	; 0x4084 <DIO_U8SetPinValue+0x210>
			case DIO_PORTC : SET_BIT(PORTC,copy_PinNum); break ;
    4024:	a5 e3       	ldi	r26, 0x35	; 53
    4026:	b0 e0       	ldi	r27, 0x00	; 0
    4028:	e5 e3       	ldi	r30, 0x35	; 53
    402a:	f0 e0       	ldi	r31, 0x00	; 0
    402c:	80 81       	ld	r24, Z
    402e:	48 2f       	mov	r20, r24
    4030:	8b 81       	ldd	r24, Y+3	; 0x03
    4032:	28 2f       	mov	r18, r24
    4034:	30 e0       	ldi	r19, 0x00	; 0
    4036:	81 e0       	ldi	r24, 0x01	; 1
    4038:	90 e0       	ldi	r25, 0x00	; 0
    403a:	02 2e       	mov	r0, r18
    403c:	02 c0       	rjmp	.+4      	; 0x4042 <DIO_U8SetPinValue+0x1ce>
    403e:	88 0f       	add	r24, r24
    4040:	99 1f       	adc	r25, r25
    4042:	0a 94       	dec	r0
    4044:	e2 f7       	brpl	.-8      	; 0x403e <DIO_U8SetPinValue+0x1ca>
    4046:	84 2b       	or	r24, r20
    4048:	8c 93       	st	X, r24
    404a:	1c c0       	rjmp	.+56     	; 0x4084 <DIO_U8SetPinValue+0x210>
			case DIO_PORTD : SET_BIT(PORTD,copy_PinNum); break ;
    404c:	a2 e3       	ldi	r26, 0x32	; 50
    404e:	b0 e0       	ldi	r27, 0x00	; 0
    4050:	e2 e3       	ldi	r30, 0x32	; 50
    4052:	f0 e0       	ldi	r31, 0x00	; 0
    4054:	80 81       	ld	r24, Z
    4056:	48 2f       	mov	r20, r24
    4058:	8b 81       	ldd	r24, Y+3	; 0x03
    405a:	28 2f       	mov	r18, r24
    405c:	30 e0       	ldi	r19, 0x00	; 0
    405e:	81 e0       	ldi	r24, 0x01	; 1
    4060:	90 e0       	ldi	r25, 0x00	; 0
    4062:	02 2e       	mov	r0, r18
    4064:	02 c0       	rjmp	.+4      	; 0x406a <DIO_U8SetPinValue+0x1f6>
    4066:	88 0f       	add	r24, r24
    4068:	99 1f       	adc	r25, r25
    406a:	0a 94       	dec	r0
    406c:	e2 f7       	brpl	.-8      	; 0x4066 <DIO_U8SetPinValue+0x1f2>
    406e:	84 2b       	or	r24, r20
    4070:	8c 93       	st	X, r24
    4072:	08 c0       	rjmp	.+16     	; 0x4084 <DIO_U8SetPinValue+0x210>
			default : Local_u8ErrorState = NOK ; break ;
    4074:	81 e0       	ldi	r24, 0x01	; 1
    4076:	89 83       	std	Y+1, r24	; 0x01
    4078:	05 c0       	rjmp	.+10     	; 0x4084 <DIO_U8SetPinValue+0x210>
			}
		}
		else
		{
			Local_u8ErrorState = NOK ;
    407a:	81 e0       	ldi	r24, 0x01	; 1
    407c:	89 83       	std	Y+1, r24	; 0x01
    407e:	02 c0       	rjmp	.+4      	; 0x4084 <DIO_U8SetPinValue+0x210>
		}
	}
	else
	{
		Local_u8ErrorState = NOK ;
    4080:	81 e0       	ldi	r24, 0x01	; 1
    4082:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    4084:	89 81       	ldd	r24, Y+1	; 0x01
}
    4086:	28 96       	adiw	r28, 0x08	; 8
    4088:	0f b6       	in	r0, 0x3f	; 63
    408a:	f8 94       	cli
    408c:	de bf       	out	0x3e, r29	; 62
    408e:	0f be       	out	0x3f, r0	; 63
    4090:	cd bf       	out	0x3d, r28	; 61
    4092:	cf 91       	pop	r28
    4094:	df 91       	pop	r29
    4096:	08 95       	ret

00004098 <DIO_U8SetPortValue>:
uint8 DIO_U8SetPortValue    	(DIO_Port_t copy_Port,	 uint8 copy_u8PortVal)
{
    4098:	df 93       	push	r29
    409a:	cf 93       	push	r28
    409c:	00 d0       	rcall	.+0      	; 0x409e <DIO_U8SetPortValue+0x6>
    409e:	00 d0       	rcall	.+0      	; 0x40a0 <DIO_U8SetPortValue+0x8>
    40a0:	0f 92       	push	r0
    40a2:	cd b7       	in	r28, 0x3d	; 61
    40a4:	de b7       	in	r29, 0x3e	; 62
    40a6:	8a 83       	std	Y+2, r24	; 0x02
    40a8:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK ;
    40aa:	19 82       	std	Y+1, r1	; 0x01
	switch (copy_Port)
    40ac:	8a 81       	ldd	r24, Y+2	; 0x02
    40ae:	28 2f       	mov	r18, r24
    40b0:	30 e0       	ldi	r19, 0x00	; 0
    40b2:	3d 83       	std	Y+5, r19	; 0x05
    40b4:	2c 83       	std	Y+4, r18	; 0x04
    40b6:	8c 81       	ldd	r24, Y+4	; 0x04
    40b8:	9d 81       	ldd	r25, Y+5	; 0x05
    40ba:	81 30       	cpi	r24, 0x01	; 1
    40bc:	91 05       	cpc	r25, r1
    40be:	d1 f0       	breq	.+52     	; 0x40f4 <DIO_U8SetPortValue+0x5c>
    40c0:	2c 81       	ldd	r18, Y+4	; 0x04
    40c2:	3d 81       	ldd	r19, Y+5	; 0x05
    40c4:	22 30       	cpi	r18, 0x02	; 2
    40c6:	31 05       	cpc	r19, r1
    40c8:	2c f4       	brge	.+10     	; 0x40d4 <DIO_U8SetPortValue+0x3c>
    40ca:	8c 81       	ldd	r24, Y+4	; 0x04
    40cc:	9d 81       	ldd	r25, Y+5	; 0x05
    40ce:	00 97       	sbiw	r24, 0x00	; 0
    40d0:	61 f0       	breq	.+24     	; 0x40ea <DIO_U8SetPortValue+0x52>
    40d2:	1f c0       	rjmp	.+62     	; 0x4112 <DIO_U8SetPortValue+0x7a>
    40d4:	2c 81       	ldd	r18, Y+4	; 0x04
    40d6:	3d 81       	ldd	r19, Y+5	; 0x05
    40d8:	22 30       	cpi	r18, 0x02	; 2
    40da:	31 05       	cpc	r19, r1
    40dc:	81 f0       	breq	.+32     	; 0x40fe <DIO_U8SetPortValue+0x66>
    40de:	8c 81       	ldd	r24, Y+4	; 0x04
    40e0:	9d 81       	ldd	r25, Y+5	; 0x05
    40e2:	83 30       	cpi	r24, 0x03	; 3
    40e4:	91 05       	cpc	r25, r1
    40e6:	81 f0       	breq	.+32     	; 0x4108 <DIO_U8SetPortValue+0x70>
    40e8:	14 c0       	rjmp	.+40     	; 0x4112 <DIO_U8SetPortValue+0x7a>
	{
	case DIO_PORTA : PORTA = copy_u8PortVal ; break ;
    40ea:	eb e3       	ldi	r30, 0x3B	; 59
    40ec:	f0 e0       	ldi	r31, 0x00	; 0
    40ee:	8b 81       	ldd	r24, Y+3	; 0x03
    40f0:	80 83       	st	Z, r24
    40f2:	11 c0       	rjmp	.+34     	; 0x4116 <DIO_U8SetPortValue+0x7e>
	case DIO_PORTB : PORTB = copy_u8PortVal ; break ;
    40f4:	e8 e3       	ldi	r30, 0x38	; 56
    40f6:	f0 e0       	ldi	r31, 0x00	; 0
    40f8:	8b 81       	ldd	r24, Y+3	; 0x03
    40fa:	80 83       	st	Z, r24
    40fc:	0c c0       	rjmp	.+24     	; 0x4116 <DIO_U8SetPortValue+0x7e>
	case DIO_PORTC : PORTC = copy_u8PortVal ; break ;
    40fe:	e5 e3       	ldi	r30, 0x35	; 53
    4100:	f0 e0       	ldi	r31, 0x00	; 0
    4102:	8b 81       	ldd	r24, Y+3	; 0x03
    4104:	80 83       	st	Z, r24
    4106:	07 c0       	rjmp	.+14     	; 0x4116 <DIO_U8SetPortValue+0x7e>
	case DIO_PORTD : PORTD = copy_u8PortVal ; break ;
    4108:	e2 e3       	ldi	r30, 0x32	; 50
    410a:	f0 e0       	ldi	r31, 0x00	; 0
    410c:	8b 81       	ldd	r24, Y+3	; 0x03
    410e:	80 83       	st	Z, r24
    4110:	02 c0       	rjmp	.+4      	; 0x4116 <DIO_U8SetPortValue+0x7e>
	default : Local_u8ErrorState = NOK      ; break ;
    4112:	81 e0       	ldi	r24, 0x01	; 1
    4114:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    4116:	89 81       	ldd	r24, Y+1	; 0x01
}
    4118:	0f 90       	pop	r0
    411a:	0f 90       	pop	r0
    411c:	0f 90       	pop	r0
    411e:	0f 90       	pop	r0
    4120:	0f 90       	pop	r0
    4122:	cf 91       	pop	r28
    4124:	df 91       	pop	r29
    4126:	08 95       	ret

00004128 <DIO_u8GetPinValue>:

uint8 DIO_u8GetPinValue 		(DIO_Port_t copy_port,   DIO_Pin_t copy_PinNum, 	DIO_PinVal_t* copy_pVal )
{
    4128:	df 93       	push	r29
    412a:	cf 93       	push	r28
    412c:	cd b7       	in	r28, 0x3d	; 61
    412e:	de b7       	in	r29, 0x3e	; 62
    4130:	27 97       	sbiw	r28, 0x07	; 7
    4132:	0f b6       	in	r0, 0x3f	; 63
    4134:	f8 94       	cli
    4136:	de bf       	out	0x3e, r29	; 62
    4138:	0f be       	out	0x3f, r0	; 63
    413a:	cd bf       	out	0x3d, r28	; 61
    413c:	8a 83       	std	Y+2, r24	; 0x02
    413e:	6b 83       	std	Y+3, r22	; 0x03
    4140:	5d 83       	std	Y+5, r21	; 0x05
    4142:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK ;
    4144:	19 82       	std	Y+1, r1	; 0x01
	if (copy_pVal != NULL)
    4146:	8c 81       	ldd	r24, Y+4	; 0x04
    4148:	9d 81       	ldd	r25, Y+5	; 0x05
    414a:	00 97       	sbiw	r24, 0x00	; 0
    414c:	09 f4       	brne	.+2      	; 0x4150 <DIO_u8GetPinValue+0x28>
    414e:	7b c0       	rjmp	.+246    	; 0x4246 <DIO_u8GetPinValue+0x11e>
	{
		if ( (copy_PinNum >= DIO_PIN0) && (copy_PinNum <= DIO_PIN7) )
    4150:	8b 81       	ldd	r24, Y+3	; 0x03
    4152:	88 30       	cpi	r24, 0x08	; 8
    4154:	08 f0       	brcs	.+2      	; 0x4158 <DIO_u8GetPinValue+0x30>
    4156:	74 c0       	rjmp	.+232    	; 0x4240 <DIO_u8GetPinValue+0x118>
		{
			switch (copy_port)
    4158:	8a 81       	ldd	r24, Y+2	; 0x02
    415a:	28 2f       	mov	r18, r24
    415c:	30 e0       	ldi	r19, 0x00	; 0
    415e:	3f 83       	std	Y+7, r19	; 0x07
    4160:	2e 83       	std	Y+6, r18	; 0x06
    4162:	4e 81       	ldd	r20, Y+6	; 0x06
    4164:	5f 81       	ldd	r21, Y+7	; 0x07
    4166:	41 30       	cpi	r20, 0x01	; 1
    4168:	51 05       	cpc	r21, r1
    416a:	59 f1       	breq	.+86     	; 0x41c2 <DIO_u8GetPinValue+0x9a>
    416c:	8e 81       	ldd	r24, Y+6	; 0x06
    416e:	9f 81       	ldd	r25, Y+7	; 0x07
    4170:	82 30       	cpi	r24, 0x02	; 2
    4172:	91 05       	cpc	r25, r1
    4174:	34 f4       	brge	.+12     	; 0x4182 <DIO_u8GetPinValue+0x5a>
    4176:	2e 81       	ldd	r18, Y+6	; 0x06
    4178:	3f 81       	ldd	r19, Y+7	; 0x07
    417a:	21 15       	cp	r18, r1
    417c:	31 05       	cpc	r19, r1
    417e:	69 f0       	breq	.+26     	; 0x419a <DIO_u8GetPinValue+0x72>
    4180:	5c c0       	rjmp	.+184    	; 0x423a <DIO_u8GetPinValue+0x112>
    4182:	4e 81       	ldd	r20, Y+6	; 0x06
    4184:	5f 81       	ldd	r21, Y+7	; 0x07
    4186:	42 30       	cpi	r20, 0x02	; 2
    4188:	51 05       	cpc	r21, r1
    418a:	79 f1       	breq	.+94     	; 0x41ea <DIO_u8GetPinValue+0xc2>
    418c:	8e 81       	ldd	r24, Y+6	; 0x06
    418e:	9f 81       	ldd	r25, Y+7	; 0x07
    4190:	83 30       	cpi	r24, 0x03	; 3
    4192:	91 05       	cpc	r25, r1
    4194:	09 f4       	brne	.+2      	; 0x4198 <DIO_u8GetPinValue+0x70>
    4196:	3d c0       	rjmp	.+122    	; 0x4212 <DIO_u8GetPinValue+0xea>
    4198:	50 c0       	rjmp	.+160    	; 0x423a <DIO_u8GetPinValue+0x112>
			{
			case DIO_PORTA : *copy_pVal = GET_BIT(PINA , copy_PinNum) ; break ;
    419a:	e9 e3       	ldi	r30, 0x39	; 57
    419c:	f0 e0       	ldi	r31, 0x00	; 0
    419e:	80 81       	ld	r24, Z
    41a0:	28 2f       	mov	r18, r24
    41a2:	30 e0       	ldi	r19, 0x00	; 0
    41a4:	8b 81       	ldd	r24, Y+3	; 0x03
    41a6:	88 2f       	mov	r24, r24
    41a8:	90 e0       	ldi	r25, 0x00	; 0
    41aa:	a9 01       	movw	r20, r18
    41ac:	02 c0       	rjmp	.+4      	; 0x41b2 <DIO_u8GetPinValue+0x8a>
    41ae:	55 95       	asr	r21
    41b0:	47 95       	ror	r20
    41b2:	8a 95       	dec	r24
    41b4:	e2 f7       	brpl	.-8      	; 0x41ae <DIO_u8GetPinValue+0x86>
    41b6:	ca 01       	movw	r24, r20
    41b8:	81 70       	andi	r24, 0x01	; 1
    41ba:	ec 81       	ldd	r30, Y+4	; 0x04
    41bc:	fd 81       	ldd	r31, Y+5	; 0x05
    41be:	80 83       	st	Z, r24
    41c0:	44 c0       	rjmp	.+136    	; 0x424a <DIO_u8GetPinValue+0x122>
			case DIO_PORTB : *copy_pVal = GET_BIT(PINB , copy_PinNum) ; break ;
    41c2:	e6 e3       	ldi	r30, 0x36	; 54
    41c4:	f0 e0       	ldi	r31, 0x00	; 0
    41c6:	80 81       	ld	r24, Z
    41c8:	28 2f       	mov	r18, r24
    41ca:	30 e0       	ldi	r19, 0x00	; 0
    41cc:	8b 81       	ldd	r24, Y+3	; 0x03
    41ce:	88 2f       	mov	r24, r24
    41d0:	90 e0       	ldi	r25, 0x00	; 0
    41d2:	a9 01       	movw	r20, r18
    41d4:	02 c0       	rjmp	.+4      	; 0x41da <DIO_u8GetPinValue+0xb2>
    41d6:	55 95       	asr	r21
    41d8:	47 95       	ror	r20
    41da:	8a 95       	dec	r24
    41dc:	e2 f7       	brpl	.-8      	; 0x41d6 <DIO_u8GetPinValue+0xae>
    41de:	ca 01       	movw	r24, r20
    41e0:	81 70       	andi	r24, 0x01	; 1
    41e2:	ec 81       	ldd	r30, Y+4	; 0x04
    41e4:	fd 81       	ldd	r31, Y+5	; 0x05
    41e6:	80 83       	st	Z, r24
    41e8:	30 c0       	rjmp	.+96     	; 0x424a <DIO_u8GetPinValue+0x122>
			case DIO_PORTC : *copy_pVal = GET_BIT(PINC , copy_PinNum) ; break ;
    41ea:	e3 e3       	ldi	r30, 0x33	; 51
    41ec:	f0 e0       	ldi	r31, 0x00	; 0
    41ee:	80 81       	ld	r24, Z
    41f0:	28 2f       	mov	r18, r24
    41f2:	30 e0       	ldi	r19, 0x00	; 0
    41f4:	8b 81       	ldd	r24, Y+3	; 0x03
    41f6:	88 2f       	mov	r24, r24
    41f8:	90 e0       	ldi	r25, 0x00	; 0
    41fa:	a9 01       	movw	r20, r18
    41fc:	02 c0       	rjmp	.+4      	; 0x4202 <DIO_u8GetPinValue+0xda>
    41fe:	55 95       	asr	r21
    4200:	47 95       	ror	r20
    4202:	8a 95       	dec	r24
    4204:	e2 f7       	brpl	.-8      	; 0x41fe <DIO_u8GetPinValue+0xd6>
    4206:	ca 01       	movw	r24, r20
    4208:	81 70       	andi	r24, 0x01	; 1
    420a:	ec 81       	ldd	r30, Y+4	; 0x04
    420c:	fd 81       	ldd	r31, Y+5	; 0x05
    420e:	80 83       	st	Z, r24
    4210:	1c c0       	rjmp	.+56     	; 0x424a <DIO_u8GetPinValue+0x122>
			case DIO_PORTD : *copy_pVal = GET_BIT(PIND , copy_PinNum) ; break ;
    4212:	e0 e3       	ldi	r30, 0x30	; 48
    4214:	f0 e0       	ldi	r31, 0x00	; 0
    4216:	80 81       	ld	r24, Z
    4218:	28 2f       	mov	r18, r24
    421a:	30 e0       	ldi	r19, 0x00	; 0
    421c:	8b 81       	ldd	r24, Y+3	; 0x03
    421e:	88 2f       	mov	r24, r24
    4220:	90 e0       	ldi	r25, 0x00	; 0
    4222:	a9 01       	movw	r20, r18
    4224:	02 c0       	rjmp	.+4      	; 0x422a <DIO_u8GetPinValue+0x102>
    4226:	55 95       	asr	r21
    4228:	47 95       	ror	r20
    422a:	8a 95       	dec	r24
    422c:	e2 f7       	brpl	.-8      	; 0x4226 <DIO_u8GetPinValue+0xfe>
    422e:	ca 01       	movw	r24, r20
    4230:	81 70       	andi	r24, 0x01	; 1
    4232:	ec 81       	ldd	r30, Y+4	; 0x04
    4234:	fd 81       	ldd	r31, Y+5	; 0x05
    4236:	80 83       	st	Z, r24
    4238:	08 c0       	rjmp	.+16     	; 0x424a <DIO_u8GetPinValue+0x122>
			default : Local_u8ErrorState = NOK ; break ;
    423a:	81 e0       	ldi	r24, 0x01	; 1
    423c:	89 83       	std	Y+1, r24	; 0x01
    423e:	05 c0       	rjmp	.+10     	; 0x424a <DIO_u8GetPinValue+0x122>
			}
		}
		else
		{
			Local_u8ErrorState = NOK ;
    4240:	81 e0       	ldi	r24, 0x01	; 1
    4242:	89 83       	std	Y+1, r24	; 0x01
    4244:	02 c0       	rjmp	.+4      	; 0x424a <DIO_u8GetPinValue+0x122>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR ;
    4246:	82 e0       	ldi	r24, 0x02	; 2
    4248:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    424a:	89 81       	ldd	r24, Y+1	; 0x01
}
    424c:	27 96       	adiw	r28, 0x07	; 7
    424e:	0f b6       	in	r0, 0x3f	; 63
    4250:	f8 94       	cli
    4252:	de bf       	out	0x3e, r29	; 62
    4254:	0f be       	out	0x3f, r0	; 63
    4256:	cd bf       	out	0x3d, r28	; 61
    4258:	cf 91       	pop	r28
    425a:	df 91       	pop	r29
    425c:	08 95       	ret

0000425e <DIO_u8TogglePinValue>:

uint8 DIO_u8TogglePinValue		(DIO_Port_t copy_Port,	 DIO_Pin_t copy_PinNum)
{
    425e:	df 93       	push	r29
    4260:	cf 93       	push	r28
    4262:	00 d0       	rcall	.+0      	; 0x4264 <DIO_u8TogglePinValue+0x6>
    4264:	00 d0       	rcall	.+0      	; 0x4266 <DIO_u8TogglePinValue+0x8>
    4266:	0f 92       	push	r0
    4268:	cd b7       	in	r28, 0x3d	; 61
    426a:	de b7       	in	r29, 0x3e	; 62
    426c:	8a 83       	std	Y+2, r24	; 0x02
    426e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK ;
    4270:	19 82       	std	Y+1, r1	; 0x01
	if ( (copy_PinNum >= DIO_PIN0 ) && (copy_PinNum <= DIO_PIN7 ) )
    4272:	8b 81       	ldd	r24, Y+3	; 0x03
    4274:	88 30       	cpi	r24, 0x08	; 8
    4276:	08 f0       	brcs	.+2      	; 0x427a <DIO_u8TogglePinValue+0x1c>
    4278:	72 c0       	rjmp	.+228    	; 0x435e <DIO_u8TogglePinValue+0x100>
	{
		switch (copy_Port)
    427a:	8a 81       	ldd	r24, Y+2	; 0x02
    427c:	28 2f       	mov	r18, r24
    427e:	30 e0       	ldi	r19, 0x00	; 0
    4280:	3d 83       	std	Y+5, r19	; 0x05
    4282:	2c 83       	std	Y+4, r18	; 0x04
    4284:	8c 81       	ldd	r24, Y+4	; 0x04
    4286:	9d 81       	ldd	r25, Y+5	; 0x05
    4288:	81 30       	cpi	r24, 0x01	; 1
    428a:	91 05       	cpc	r25, r1
    428c:	49 f1       	breq	.+82     	; 0x42e0 <DIO_u8TogglePinValue+0x82>
    428e:	2c 81       	ldd	r18, Y+4	; 0x04
    4290:	3d 81       	ldd	r19, Y+5	; 0x05
    4292:	22 30       	cpi	r18, 0x02	; 2
    4294:	31 05       	cpc	r19, r1
    4296:	2c f4       	brge	.+10     	; 0x42a2 <DIO_u8TogglePinValue+0x44>
    4298:	8c 81       	ldd	r24, Y+4	; 0x04
    429a:	9d 81       	ldd	r25, Y+5	; 0x05
    429c:	00 97       	sbiw	r24, 0x00	; 0
    429e:	61 f0       	breq	.+24     	; 0x42b8 <DIO_u8TogglePinValue+0x5a>
    42a0:	5b c0       	rjmp	.+182    	; 0x4358 <DIO_u8TogglePinValue+0xfa>
    42a2:	2c 81       	ldd	r18, Y+4	; 0x04
    42a4:	3d 81       	ldd	r19, Y+5	; 0x05
    42a6:	22 30       	cpi	r18, 0x02	; 2
    42a8:	31 05       	cpc	r19, r1
    42aa:	71 f1       	breq	.+92     	; 0x4308 <DIO_u8TogglePinValue+0xaa>
    42ac:	8c 81       	ldd	r24, Y+4	; 0x04
    42ae:	9d 81       	ldd	r25, Y+5	; 0x05
    42b0:	83 30       	cpi	r24, 0x03	; 3
    42b2:	91 05       	cpc	r25, r1
    42b4:	e9 f1       	breq	.+122    	; 0x4330 <DIO_u8TogglePinValue+0xd2>
    42b6:	50 c0       	rjmp	.+160    	; 0x4358 <DIO_u8TogglePinValue+0xfa>
					{
					case DIO_PORTA : TOG_BIT(PORTA,copy_PinNum); break ;
    42b8:	ab e3       	ldi	r26, 0x3B	; 59
    42ba:	b0 e0       	ldi	r27, 0x00	; 0
    42bc:	eb e3       	ldi	r30, 0x3B	; 59
    42be:	f0 e0       	ldi	r31, 0x00	; 0
    42c0:	80 81       	ld	r24, Z
    42c2:	48 2f       	mov	r20, r24
    42c4:	8b 81       	ldd	r24, Y+3	; 0x03
    42c6:	28 2f       	mov	r18, r24
    42c8:	30 e0       	ldi	r19, 0x00	; 0
    42ca:	81 e0       	ldi	r24, 0x01	; 1
    42cc:	90 e0       	ldi	r25, 0x00	; 0
    42ce:	02 2e       	mov	r0, r18
    42d0:	02 c0       	rjmp	.+4      	; 0x42d6 <DIO_u8TogglePinValue+0x78>
    42d2:	88 0f       	add	r24, r24
    42d4:	99 1f       	adc	r25, r25
    42d6:	0a 94       	dec	r0
    42d8:	e2 f7       	brpl	.-8      	; 0x42d2 <DIO_u8TogglePinValue+0x74>
    42da:	84 27       	eor	r24, r20
    42dc:	8c 93       	st	X, r24
    42de:	41 c0       	rjmp	.+130    	; 0x4362 <DIO_u8TogglePinValue+0x104>
					case DIO_PORTB : TOG_BIT(PORTB,copy_PinNum); break ;
    42e0:	a8 e3       	ldi	r26, 0x38	; 56
    42e2:	b0 e0       	ldi	r27, 0x00	; 0
    42e4:	e8 e3       	ldi	r30, 0x38	; 56
    42e6:	f0 e0       	ldi	r31, 0x00	; 0
    42e8:	80 81       	ld	r24, Z
    42ea:	48 2f       	mov	r20, r24
    42ec:	8b 81       	ldd	r24, Y+3	; 0x03
    42ee:	28 2f       	mov	r18, r24
    42f0:	30 e0       	ldi	r19, 0x00	; 0
    42f2:	81 e0       	ldi	r24, 0x01	; 1
    42f4:	90 e0       	ldi	r25, 0x00	; 0
    42f6:	02 2e       	mov	r0, r18
    42f8:	02 c0       	rjmp	.+4      	; 0x42fe <DIO_u8TogglePinValue+0xa0>
    42fa:	88 0f       	add	r24, r24
    42fc:	99 1f       	adc	r25, r25
    42fe:	0a 94       	dec	r0
    4300:	e2 f7       	brpl	.-8      	; 0x42fa <DIO_u8TogglePinValue+0x9c>
    4302:	84 27       	eor	r24, r20
    4304:	8c 93       	st	X, r24
    4306:	2d c0       	rjmp	.+90     	; 0x4362 <DIO_u8TogglePinValue+0x104>
					case DIO_PORTC : TOG_BIT(PORTC,copy_PinNum); break ;
    4308:	a5 e3       	ldi	r26, 0x35	; 53
    430a:	b0 e0       	ldi	r27, 0x00	; 0
    430c:	e5 e3       	ldi	r30, 0x35	; 53
    430e:	f0 e0       	ldi	r31, 0x00	; 0
    4310:	80 81       	ld	r24, Z
    4312:	48 2f       	mov	r20, r24
    4314:	8b 81       	ldd	r24, Y+3	; 0x03
    4316:	28 2f       	mov	r18, r24
    4318:	30 e0       	ldi	r19, 0x00	; 0
    431a:	81 e0       	ldi	r24, 0x01	; 1
    431c:	90 e0       	ldi	r25, 0x00	; 0
    431e:	02 2e       	mov	r0, r18
    4320:	02 c0       	rjmp	.+4      	; 0x4326 <DIO_u8TogglePinValue+0xc8>
    4322:	88 0f       	add	r24, r24
    4324:	99 1f       	adc	r25, r25
    4326:	0a 94       	dec	r0
    4328:	e2 f7       	brpl	.-8      	; 0x4322 <DIO_u8TogglePinValue+0xc4>
    432a:	84 27       	eor	r24, r20
    432c:	8c 93       	st	X, r24
    432e:	19 c0       	rjmp	.+50     	; 0x4362 <DIO_u8TogglePinValue+0x104>
					case DIO_PORTD : TOG_BIT(PORTD,copy_PinNum); break ;
    4330:	a2 e3       	ldi	r26, 0x32	; 50
    4332:	b0 e0       	ldi	r27, 0x00	; 0
    4334:	e2 e3       	ldi	r30, 0x32	; 50
    4336:	f0 e0       	ldi	r31, 0x00	; 0
    4338:	80 81       	ld	r24, Z
    433a:	48 2f       	mov	r20, r24
    433c:	8b 81       	ldd	r24, Y+3	; 0x03
    433e:	28 2f       	mov	r18, r24
    4340:	30 e0       	ldi	r19, 0x00	; 0
    4342:	81 e0       	ldi	r24, 0x01	; 1
    4344:	90 e0       	ldi	r25, 0x00	; 0
    4346:	02 2e       	mov	r0, r18
    4348:	02 c0       	rjmp	.+4      	; 0x434e <DIO_u8TogglePinValue+0xf0>
    434a:	88 0f       	add	r24, r24
    434c:	99 1f       	adc	r25, r25
    434e:	0a 94       	dec	r0
    4350:	e2 f7       	brpl	.-8      	; 0x434a <DIO_u8TogglePinValue+0xec>
    4352:	84 27       	eor	r24, r20
    4354:	8c 93       	st	X, r24
    4356:	05 c0       	rjmp	.+10     	; 0x4362 <DIO_u8TogglePinValue+0x104>
					default : Local_u8ErrorState = NOK ; 		 break ;
    4358:	81 e0       	ldi	r24, 0x01	; 1
    435a:	89 83       	std	Y+1, r24	; 0x01
    435c:	02 c0       	rjmp	.+4      	; 0x4362 <DIO_u8TogglePinValue+0x104>
					}
	}
	else
	{
		Local_u8ErrorState = NOK ;
    435e:	81 e0       	ldi	r24, 0x01	; 1
    4360:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState ;
    4362:	89 81       	ldd	r24, Y+1	; 0x01
}
    4364:	0f 90       	pop	r0
    4366:	0f 90       	pop	r0
    4368:	0f 90       	pop	r0
    436a:	0f 90       	pop	r0
    436c:	0f 90       	pop	r0
    436e:	cf 91       	pop	r28
    4370:	df 91       	pop	r29
    4372:	08 95       	ret

00004374 <EXTI_voidInit>:
#include "EXTI_Reg.h"

static void ( *EXTI_pfFuncPtr[3] ) ( void ) = { NULL , NULL , NULL } ;   // ARRAY OF 3 POINTERS TO FUNCTION

void EXTI_voidInit ( void )
{
    4374:	df 93       	push	r29
    4376:	cf 93       	push	r28
    4378:	cd b7       	in	r28, 0x3d	; 61
    437a:	de b7       	in	r29, 0x3e	; 62
	#elif EXTI_u8INT0_TRIG_SRC == ON_CHANGE
		  SET_BIT ( MCUCR , MCUCR_ISC00 ) ;
		  CLR_BIT ( MCUCR , MCUCR_ISC01 ) ;

	#elif EXTI_u8INT0_TRIG_SRC == FALLING_EDGE
		  CLR_BIT ( MCUCR , MCUCR_ISC00 ) ;
    437c:	a5 e5       	ldi	r26, 0x55	; 85
    437e:	b0 e0       	ldi	r27, 0x00	; 0
    4380:	e5 e5       	ldi	r30, 0x55	; 85
    4382:	f0 e0       	ldi	r31, 0x00	; 0
    4384:	80 81       	ld	r24, Z
    4386:	8e 7f       	andi	r24, 0xFE	; 254
    4388:	8c 93       	st	X, r24
		  SET_BIT ( MCUCR , MCUCR_ISC01 ) ;
    438a:	a5 e5       	ldi	r26, 0x55	; 85
    438c:	b0 e0       	ldi	r27, 0x00	; 0
    438e:	e5 e5       	ldi	r30, 0x55	; 85
    4390:	f0 e0       	ldi	r31, 0x00	; 0
    4392:	80 81       	ld	r24, Z
    4394:	82 60       	ori	r24, 0x02	; 2
    4396:	8c 93       	st	X, r24
	#elif EXTI_u8INT1_TRIG_SRC == ON_CHANGE
		  SET_BIT ( MCUCR , MCUCR_ISC10 ) ;
		  CLR_BIT ( MCUCR , MCUCR_ISC11 ) ;

	#elif EXTI_u8INT1_TRIG_SRC == FALLING_EDGE
		  CLR_BIT ( MCUCR , MCUCR_ISC10 ) ;
    4398:	a5 e5       	ldi	r26, 0x55	; 85
    439a:	b0 e0       	ldi	r27, 0x00	; 0
    439c:	e5 e5       	ldi	r30, 0x55	; 85
    439e:	f0 e0       	ldi	r31, 0x00	; 0
    43a0:	80 81       	ld	r24, Z
    43a2:	8b 7f       	andi	r24, 0xFB	; 251
    43a4:	8c 93       	st	X, r24
		  SET_BIT ( MCUCR , MCUCR_ISC11 ) ;
    43a6:	a5 e5       	ldi	r26, 0x55	; 85
    43a8:	b0 e0       	ldi	r27, 0x00	; 0
    43aa:	e5 e5       	ldi	r30, 0x55	; 85
    43ac:	f0 e0       	ldi	r31, 0x00	; 0
    43ae:	80 81       	ld	r24, Z
    43b0:	88 60       	ori	r24, 0x08	; 8
    43b2:	8c 93       	st	X, r24
	#else
		  #error "Wrong EXTI_u8INT1_TRIG_SRC configuration option"
	#endif

	#if   EXTI_u8INT2_TRIG_SRC == FALLING_EDGE
		  CLR_BIT ( MCUCSR , MCUCSR_ISC2 ) ;
    43b4:	a4 e5       	ldi	r26, 0x54	; 84
    43b6:	b0 e0       	ldi	r27, 0x00	; 0
    43b8:	e4 e5       	ldi	r30, 0x54	; 84
    43ba:	f0 e0       	ldi	r31, 0x00	; 0
    43bc:	80 81       	ld	r24, Z
    43be:	8f 7b       	andi	r24, 0xBF	; 191
    43c0:	8c 93       	st	X, r24
	#endif

	#if   EXTI_u8INT0_INIT_STATE == DISABLED
		  CLR_BIT ( GICR , GICR_INT0 );
	#elif EXTI_u8INT0_INIT_STATE == ENABLED
		  SET_BIT ( GICR , GICR_INT0 );
    43c2:	ab e5       	ldi	r26, 0x5B	; 91
    43c4:	b0 e0       	ldi	r27, 0x00	; 0
    43c6:	eb e5       	ldi	r30, 0x5B	; 91
    43c8:	f0 e0       	ldi	r31, 0x00	; 0
    43ca:	80 81       	ld	r24, Z
    43cc:	80 64       	ori	r24, 0x40	; 64
    43ce:	8c 93       	st	X, r24
	#else
		  #error "WRONG EXTI_u8INT0_INIT_STATE CONFIGURATION OPTION"
	#endif

	#if   EXTI_u8INT1_INIT_STATE == DISABLED
		  CLR_BIT ( GICR , GICR_INT1 );
    43d0:	ab e5       	ldi	r26, 0x5B	; 91
    43d2:	b0 e0       	ldi	r27, 0x00	; 0
    43d4:	eb e5       	ldi	r30, 0x5B	; 91
    43d6:	f0 e0       	ldi	r31, 0x00	; 0
    43d8:	80 81       	ld	r24, Z
    43da:	8f 77       	andi	r24, 0x7F	; 127
    43dc:	8c 93       	st	X, r24
	#else
		  #error "WRONG EXTI_u8INT1_INIT_STATE CONFIGURATION OPTION"
	#endif

	#if   EXTI_u8INT2_INIT_STATE == DISABLED
		  CLR_BIT ( GICR , GICR_INT2 );
    43de:	ab e5       	ldi	r26, 0x5B	; 91
    43e0:	b0 e0       	ldi	r27, 0x00	; 0
    43e2:	eb e5       	ldi	r30, 0x5B	; 91
    43e4:	f0 e0       	ldi	r31, 0x00	; 0
    43e6:	80 81       	ld	r24, Z
    43e8:	8f 7d       	andi	r24, 0xDF	; 223
    43ea:	8c 93       	st	X, r24
	#elif EXTI_u8INT2_INIT_STATE == ENABLED
		  SET_BIT ( GICR , GICR_INT2 );
	#else
		  #error "WRONG EXTI_u8INT2_INIT_STATE CONFIGURATION OPTION"
	#endif
}
    43ec:	cf 91       	pop	r28
    43ee:	df 91       	pop	r29
    43f0:	08 95       	ret

000043f2 <EXTI_u8SetSenseCtrl>:
uint8 EXTI_u8SetSenseCtrl (EXTI_IntNum_t copy_IntNum , uint8 copy_u8SenseCtrl)
{
    43f2:	df 93       	push	r29
    43f4:	cf 93       	push	r28
    43f6:	cd b7       	in	r28, 0x3d	; 61
    43f8:	de b7       	in	r29, 0x3e	; 62
    43fa:	29 97       	sbiw	r28, 0x09	; 9
    43fc:	0f b6       	in	r0, 0x3f	; 63
    43fe:	f8 94       	cli
    4400:	de bf       	out	0x3e, r29	; 62
    4402:	0f be       	out	0x3f, r0	; 63
    4404:	cd bf       	out	0x3d, r28	; 61
    4406:	8a 83       	std	Y+2, r24	; 0x02
    4408:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK ;
    440a:	19 82       	std	Y+1, r1	; 0x01
	if ( copy_IntNum == INT0 )
    440c:	8a 81       	ldd	r24, Y+2	; 0x02
    440e:	88 23       	and	r24, r24
    4410:	09 f0       	breq	.+2      	; 0x4414 <EXTI_u8SetSenseCtrl+0x22>
    4412:	5f c0       	rjmp	.+190    	; 0x44d2 <EXTI_u8SetSenseCtrl+0xe0>
	{
		switch ( copy_u8SenseCtrl )
    4414:	8b 81       	ldd	r24, Y+3	; 0x03
    4416:	28 2f       	mov	r18, r24
    4418:	30 e0       	ldi	r19, 0x00	; 0
    441a:	39 87       	std	Y+9, r19	; 0x09
    441c:	28 87       	std	Y+8, r18	; 0x08
    441e:	88 85       	ldd	r24, Y+8	; 0x08
    4420:	99 85       	ldd	r25, Y+9	; 0x09
    4422:	82 30       	cpi	r24, 0x02	; 2
    4424:	91 05       	cpc	r25, r1
    4426:	29 f1       	breq	.+74     	; 0x4472 <EXTI_u8SetSenseCtrl+0x80>
    4428:	28 85       	ldd	r18, Y+8	; 0x08
    442a:	39 85       	ldd	r19, Y+9	; 0x09
    442c:	23 30       	cpi	r18, 0x03	; 3
    442e:	31 05       	cpc	r19, r1
    4430:	34 f4       	brge	.+12     	; 0x443e <EXTI_u8SetSenseCtrl+0x4c>
    4432:	88 85       	ldd	r24, Y+8	; 0x08
    4434:	99 85       	ldd	r25, Y+9	; 0x09
    4436:	81 30       	cpi	r24, 0x01	; 1
    4438:	91 05       	cpc	r25, r1
    443a:	61 f0       	breq	.+24     	; 0x4454 <EXTI_u8SetSenseCtrl+0x62>
    443c:	47 c0       	rjmp	.+142    	; 0x44cc <EXTI_u8SetSenseCtrl+0xda>
    443e:	28 85       	ldd	r18, Y+8	; 0x08
    4440:	39 85       	ldd	r19, Y+9	; 0x09
    4442:	23 30       	cpi	r18, 0x03	; 3
    4444:	31 05       	cpc	r19, r1
    4446:	21 f1       	breq	.+72     	; 0x4490 <EXTI_u8SetSenseCtrl+0x9e>
    4448:	88 85       	ldd	r24, Y+8	; 0x08
    444a:	99 85       	ldd	r25, Y+9	; 0x09
    444c:	84 30       	cpi	r24, 0x04	; 4
    444e:	91 05       	cpc	r25, r1
    4450:	71 f1       	breq	.+92     	; 0x44ae <EXTI_u8SetSenseCtrl+0xbc>
    4452:	3c c0       	rjmp	.+120    	; 0x44cc <EXTI_u8SetSenseCtrl+0xda>
		{
		case LOW_LEVEL    : CLR_BIT ( MCUCR , MCUCR_ISC00 ) ; CLR_BIT ( MCUCR , MCUCR_ISC01 ) ; break ;
    4454:	a5 e5       	ldi	r26, 0x55	; 85
    4456:	b0 e0       	ldi	r27, 0x00	; 0
    4458:	e5 e5       	ldi	r30, 0x55	; 85
    445a:	f0 e0       	ldi	r31, 0x00	; 0
    445c:	80 81       	ld	r24, Z
    445e:	8e 7f       	andi	r24, 0xFE	; 254
    4460:	8c 93       	st	X, r24
    4462:	a5 e5       	ldi	r26, 0x55	; 85
    4464:	b0 e0       	ldi	r27, 0x00	; 0
    4466:	e5 e5       	ldi	r30, 0x55	; 85
    4468:	f0 e0       	ldi	r31, 0x00	; 0
    446a:	80 81       	ld	r24, Z
    446c:	8d 7f       	andi	r24, 0xFD	; 253
    446e:	8c 93       	st	X, r24
    4470:	bb c0       	rjmp	.+374    	; 0x45e8 <EXTI_u8SetSenseCtrl+0x1f6>
		case ON_CHANGE 	  : SET_BIT ( MCUCR , MCUCR_ISC00 ) ; CLR_BIT ( MCUCR , MCUCR_ISC01 ) ; break ;
    4472:	a5 e5       	ldi	r26, 0x55	; 85
    4474:	b0 e0       	ldi	r27, 0x00	; 0
    4476:	e5 e5       	ldi	r30, 0x55	; 85
    4478:	f0 e0       	ldi	r31, 0x00	; 0
    447a:	80 81       	ld	r24, Z
    447c:	81 60       	ori	r24, 0x01	; 1
    447e:	8c 93       	st	X, r24
    4480:	a5 e5       	ldi	r26, 0x55	; 85
    4482:	b0 e0       	ldi	r27, 0x00	; 0
    4484:	e5 e5       	ldi	r30, 0x55	; 85
    4486:	f0 e0       	ldi	r31, 0x00	; 0
    4488:	80 81       	ld	r24, Z
    448a:	8d 7f       	andi	r24, 0xFD	; 253
    448c:	8c 93       	st	X, r24
    448e:	ac c0       	rjmp	.+344    	; 0x45e8 <EXTI_u8SetSenseCtrl+0x1f6>
		case FALLING_EDGE : CLR_BIT ( MCUCR , MCUCR_ISC00 ) ; SET_BIT ( MCUCR , MCUCR_ISC01 ) ; break ;
    4490:	a5 e5       	ldi	r26, 0x55	; 85
    4492:	b0 e0       	ldi	r27, 0x00	; 0
    4494:	e5 e5       	ldi	r30, 0x55	; 85
    4496:	f0 e0       	ldi	r31, 0x00	; 0
    4498:	80 81       	ld	r24, Z
    449a:	8e 7f       	andi	r24, 0xFE	; 254
    449c:	8c 93       	st	X, r24
    449e:	a5 e5       	ldi	r26, 0x55	; 85
    44a0:	b0 e0       	ldi	r27, 0x00	; 0
    44a2:	e5 e5       	ldi	r30, 0x55	; 85
    44a4:	f0 e0       	ldi	r31, 0x00	; 0
    44a6:	80 81       	ld	r24, Z
    44a8:	82 60       	ori	r24, 0x02	; 2
    44aa:	8c 93       	st	X, r24
    44ac:	9d c0       	rjmp	.+314    	; 0x45e8 <EXTI_u8SetSenseCtrl+0x1f6>
		case RISING_EDGE  : SET_BIT ( MCUCR , MCUCR_ISC00 ) ; SET_BIT ( MCUCR , MCUCR_ISC01 ) ; break ;
    44ae:	a5 e5       	ldi	r26, 0x55	; 85
    44b0:	b0 e0       	ldi	r27, 0x00	; 0
    44b2:	e5 e5       	ldi	r30, 0x55	; 85
    44b4:	f0 e0       	ldi	r31, 0x00	; 0
    44b6:	80 81       	ld	r24, Z
    44b8:	81 60       	ori	r24, 0x01	; 1
    44ba:	8c 93       	st	X, r24
    44bc:	a5 e5       	ldi	r26, 0x55	; 85
    44be:	b0 e0       	ldi	r27, 0x00	; 0
    44c0:	e5 e5       	ldi	r30, 0x55	; 85
    44c2:	f0 e0       	ldi	r31, 0x00	; 0
    44c4:	80 81       	ld	r24, Z
    44c6:	82 60       	ori	r24, 0x02	; 2
    44c8:	8c 93       	st	X, r24
    44ca:	8e c0       	rjmp	.+284    	; 0x45e8 <EXTI_u8SetSenseCtrl+0x1f6>
		default 		  : Local_u8ErrorState = NOK ; 										    break ;
    44cc:	81 e0       	ldi	r24, 0x01	; 1
    44ce:	89 83       	std	Y+1, r24	; 0x01
    44d0:	8b c0       	rjmp	.+278    	; 0x45e8 <EXTI_u8SetSenseCtrl+0x1f6>
		}
	}
	else if ( copy_IntNum == INT1 )
    44d2:	8a 81       	ldd	r24, Y+2	; 0x02
    44d4:	81 30       	cpi	r24, 0x01	; 1
    44d6:	09 f0       	breq	.+2      	; 0x44da <EXTI_u8SetSenseCtrl+0xe8>
    44d8:	5f c0       	rjmp	.+190    	; 0x4598 <EXTI_u8SetSenseCtrl+0x1a6>
	{
		switch ( copy_u8SenseCtrl )
    44da:	8b 81       	ldd	r24, Y+3	; 0x03
    44dc:	28 2f       	mov	r18, r24
    44de:	30 e0       	ldi	r19, 0x00	; 0
    44e0:	3f 83       	std	Y+7, r19	; 0x07
    44e2:	2e 83       	std	Y+6, r18	; 0x06
    44e4:	8e 81       	ldd	r24, Y+6	; 0x06
    44e6:	9f 81       	ldd	r25, Y+7	; 0x07
    44e8:	82 30       	cpi	r24, 0x02	; 2
    44ea:	91 05       	cpc	r25, r1
    44ec:	29 f1       	breq	.+74     	; 0x4538 <EXTI_u8SetSenseCtrl+0x146>
    44ee:	2e 81       	ldd	r18, Y+6	; 0x06
    44f0:	3f 81       	ldd	r19, Y+7	; 0x07
    44f2:	23 30       	cpi	r18, 0x03	; 3
    44f4:	31 05       	cpc	r19, r1
    44f6:	34 f4       	brge	.+12     	; 0x4504 <EXTI_u8SetSenseCtrl+0x112>
    44f8:	8e 81       	ldd	r24, Y+6	; 0x06
    44fa:	9f 81       	ldd	r25, Y+7	; 0x07
    44fc:	81 30       	cpi	r24, 0x01	; 1
    44fe:	91 05       	cpc	r25, r1
    4500:	61 f0       	breq	.+24     	; 0x451a <EXTI_u8SetSenseCtrl+0x128>
    4502:	47 c0       	rjmp	.+142    	; 0x4592 <EXTI_u8SetSenseCtrl+0x1a0>
    4504:	2e 81       	ldd	r18, Y+6	; 0x06
    4506:	3f 81       	ldd	r19, Y+7	; 0x07
    4508:	23 30       	cpi	r18, 0x03	; 3
    450a:	31 05       	cpc	r19, r1
    450c:	21 f1       	breq	.+72     	; 0x4556 <EXTI_u8SetSenseCtrl+0x164>
    450e:	8e 81       	ldd	r24, Y+6	; 0x06
    4510:	9f 81       	ldd	r25, Y+7	; 0x07
    4512:	84 30       	cpi	r24, 0x04	; 4
    4514:	91 05       	cpc	r25, r1
    4516:	71 f1       	breq	.+92     	; 0x4574 <EXTI_u8SetSenseCtrl+0x182>
    4518:	3c c0       	rjmp	.+120    	; 0x4592 <EXTI_u8SetSenseCtrl+0x1a0>
		{
		case LOW_LEVEL    : CLR_BIT ( MCUCR , MCUCR_ISC10 ) ; CLR_BIT ( MCUCR , MCUCR_ISC11 ) ; break ;
    451a:	a5 e5       	ldi	r26, 0x55	; 85
    451c:	b0 e0       	ldi	r27, 0x00	; 0
    451e:	e5 e5       	ldi	r30, 0x55	; 85
    4520:	f0 e0       	ldi	r31, 0x00	; 0
    4522:	80 81       	ld	r24, Z
    4524:	8b 7f       	andi	r24, 0xFB	; 251
    4526:	8c 93       	st	X, r24
    4528:	a5 e5       	ldi	r26, 0x55	; 85
    452a:	b0 e0       	ldi	r27, 0x00	; 0
    452c:	e5 e5       	ldi	r30, 0x55	; 85
    452e:	f0 e0       	ldi	r31, 0x00	; 0
    4530:	80 81       	ld	r24, Z
    4532:	87 7f       	andi	r24, 0xF7	; 247
    4534:	8c 93       	st	X, r24
    4536:	58 c0       	rjmp	.+176    	; 0x45e8 <EXTI_u8SetSenseCtrl+0x1f6>
		case ON_CHANGE 	  : SET_BIT ( MCUCR , MCUCR_ISC10 ) ; CLR_BIT ( MCUCR , MCUCR_ISC11 ) ; break ;
    4538:	a5 e5       	ldi	r26, 0x55	; 85
    453a:	b0 e0       	ldi	r27, 0x00	; 0
    453c:	e5 e5       	ldi	r30, 0x55	; 85
    453e:	f0 e0       	ldi	r31, 0x00	; 0
    4540:	80 81       	ld	r24, Z
    4542:	84 60       	ori	r24, 0x04	; 4
    4544:	8c 93       	st	X, r24
    4546:	a5 e5       	ldi	r26, 0x55	; 85
    4548:	b0 e0       	ldi	r27, 0x00	; 0
    454a:	e5 e5       	ldi	r30, 0x55	; 85
    454c:	f0 e0       	ldi	r31, 0x00	; 0
    454e:	80 81       	ld	r24, Z
    4550:	87 7f       	andi	r24, 0xF7	; 247
    4552:	8c 93       	st	X, r24
    4554:	49 c0       	rjmp	.+146    	; 0x45e8 <EXTI_u8SetSenseCtrl+0x1f6>
		case FALLING_EDGE : CLR_BIT ( MCUCR , MCUCR_ISC10 ) ; SET_BIT ( MCUCR , MCUCR_ISC11 ) ; break ;
    4556:	a5 e5       	ldi	r26, 0x55	; 85
    4558:	b0 e0       	ldi	r27, 0x00	; 0
    455a:	e5 e5       	ldi	r30, 0x55	; 85
    455c:	f0 e0       	ldi	r31, 0x00	; 0
    455e:	80 81       	ld	r24, Z
    4560:	8b 7f       	andi	r24, 0xFB	; 251
    4562:	8c 93       	st	X, r24
    4564:	a5 e5       	ldi	r26, 0x55	; 85
    4566:	b0 e0       	ldi	r27, 0x00	; 0
    4568:	e5 e5       	ldi	r30, 0x55	; 85
    456a:	f0 e0       	ldi	r31, 0x00	; 0
    456c:	80 81       	ld	r24, Z
    456e:	88 60       	ori	r24, 0x08	; 8
    4570:	8c 93       	st	X, r24
    4572:	3a c0       	rjmp	.+116    	; 0x45e8 <EXTI_u8SetSenseCtrl+0x1f6>
		case RISING_EDGE  : SET_BIT ( MCUCR , MCUCR_ISC10 ) ; SET_BIT ( MCUCR , MCUCR_ISC11 ) ; break ;
    4574:	a5 e5       	ldi	r26, 0x55	; 85
    4576:	b0 e0       	ldi	r27, 0x00	; 0
    4578:	e5 e5       	ldi	r30, 0x55	; 85
    457a:	f0 e0       	ldi	r31, 0x00	; 0
    457c:	80 81       	ld	r24, Z
    457e:	84 60       	ori	r24, 0x04	; 4
    4580:	8c 93       	st	X, r24
    4582:	a5 e5       	ldi	r26, 0x55	; 85
    4584:	b0 e0       	ldi	r27, 0x00	; 0
    4586:	e5 e5       	ldi	r30, 0x55	; 85
    4588:	f0 e0       	ldi	r31, 0x00	; 0
    458a:	80 81       	ld	r24, Z
    458c:	88 60       	ori	r24, 0x08	; 8
    458e:	8c 93       	st	X, r24
    4590:	2b c0       	rjmp	.+86     	; 0x45e8 <EXTI_u8SetSenseCtrl+0x1f6>
		default 		  : Local_u8ErrorState = NOK ; 										    break ;
    4592:	81 e0       	ldi	r24, 0x01	; 1
    4594:	89 83       	std	Y+1, r24	; 0x01
    4596:	28 c0       	rjmp	.+80     	; 0x45e8 <EXTI_u8SetSenseCtrl+0x1f6>
		}
	}
	else if ( copy_IntNum == INT2 )
    4598:	8a 81       	ldd	r24, Y+2	; 0x02
    459a:	82 30       	cpi	r24, 0x02	; 2
    459c:	19 f5       	brne	.+70     	; 0x45e4 <EXTI_u8SetSenseCtrl+0x1f2>
	{
		switch ( copy_u8SenseCtrl )
    459e:	8b 81       	ldd	r24, Y+3	; 0x03
    45a0:	28 2f       	mov	r18, r24
    45a2:	30 e0       	ldi	r19, 0x00	; 0
    45a4:	3d 83       	std	Y+5, r19	; 0x05
    45a6:	2c 83       	std	Y+4, r18	; 0x04
    45a8:	8c 81       	ldd	r24, Y+4	; 0x04
    45aa:	9d 81       	ldd	r25, Y+5	; 0x05
    45ac:	83 30       	cpi	r24, 0x03	; 3
    45ae:	91 05       	cpc	r25, r1
    45b0:	31 f0       	breq	.+12     	; 0x45be <EXTI_u8SetSenseCtrl+0x1cc>
    45b2:	2c 81       	ldd	r18, Y+4	; 0x04
    45b4:	3d 81       	ldd	r19, Y+5	; 0x05
    45b6:	24 30       	cpi	r18, 0x04	; 4
    45b8:	31 05       	cpc	r19, r1
    45ba:	49 f0       	breq	.+18     	; 0x45ce <EXTI_u8SetSenseCtrl+0x1dc>
    45bc:	10 c0       	rjmp	.+32     	; 0x45de <EXTI_u8SetSenseCtrl+0x1ec>
		{
		case FALLING_EDGE : CLR_BIT ( MCUCSR , MCUCSR_ISC2 ) ;  break ;
    45be:	a4 e5       	ldi	r26, 0x54	; 84
    45c0:	b0 e0       	ldi	r27, 0x00	; 0
    45c2:	e4 e5       	ldi	r30, 0x54	; 84
    45c4:	f0 e0       	ldi	r31, 0x00	; 0
    45c6:	80 81       	ld	r24, Z
    45c8:	8f 7b       	andi	r24, 0xBF	; 191
    45ca:	8c 93       	st	X, r24
    45cc:	0d c0       	rjmp	.+26     	; 0x45e8 <EXTI_u8SetSenseCtrl+0x1f6>
		case RISING_EDGE  : SET_BIT ( MCUCSR , MCUCSR_ISC2 ) ;  break ;
    45ce:	a4 e5       	ldi	r26, 0x54	; 84
    45d0:	b0 e0       	ldi	r27, 0x00	; 0
    45d2:	e4 e5       	ldi	r30, 0x54	; 84
    45d4:	f0 e0       	ldi	r31, 0x00	; 0
    45d6:	80 81       	ld	r24, Z
    45d8:	80 64       	ori	r24, 0x40	; 64
    45da:	8c 93       	st	X, r24
    45dc:	05 c0       	rjmp	.+10     	; 0x45e8 <EXTI_u8SetSenseCtrl+0x1f6>
		default 		  : Local_u8ErrorState = NOK ; 	       break ;
    45de:	81 e0       	ldi	r24, 0x01	; 1
    45e0:	89 83       	std	Y+1, r24	; 0x01
    45e2:	02 c0       	rjmp	.+4      	; 0x45e8 <EXTI_u8SetSenseCtrl+0x1f6>
		}
	}
	else
	{
		Local_u8ErrorState = NOK ;
    45e4:	81 e0       	ldi	r24, 0x01	; 1
    45e6:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState ;
    45e8:	89 81       	ldd	r24, Y+1	; 0x01
}
    45ea:	29 96       	adiw	r28, 0x09	; 9
    45ec:	0f b6       	in	r0, 0x3f	; 63
    45ee:	f8 94       	cli
    45f0:	de bf       	out	0x3e, r29	; 62
    45f2:	0f be       	out	0x3f, r0	; 63
    45f4:	cd bf       	out	0x3d, r28	; 61
    45f6:	cf 91       	pop	r28
    45f8:	df 91       	pop	r29
    45fa:	08 95       	ret

000045fc <EXTI_u8IntEnable>:

uint8 EXTI_u8IntEnable ( EXTI_IntNum_t copy_IntNum)
{
    45fc:	df 93       	push	r29
    45fe:	cf 93       	push	r28
    4600:	00 d0       	rcall	.+0      	; 0x4602 <EXTI_u8IntEnable+0x6>
    4602:	00 d0       	rcall	.+0      	; 0x4604 <EXTI_u8IntEnable+0x8>
    4604:	cd b7       	in	r28, 0x3d	; 61
    4606:	de b7       	in	r29, 0x3e	; 62
    4608:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8ErrorState = OK ;
    460a:	19 82       	std	Y+1, r1	; 0x01
	switch ( copy_IntNum )
    460c:	8a 81       	ldd	r24, Y+2	; 0x02
    460e:	28 2f       	mov	r18, r24
    4610:	30 e0       	ldi	r19, 0x00	; 0
    4612:	3c 83       	std	Y+4, r19	; 0x04
    4614:	2b 83       	std	Y+3, r18	; 0x03
    4616:	8b 81       	ldd	r24, Y+3	; 0x03
    4618:	9c 81       	ldd	r25, Y+4	; 0x04
    461a:	81 30       	cpi	r24, 0x01	; 1
    461c:	91 05       	cpc	r25, r1
    461e:	89 f0       	breq	.+34     	; 0x4642 <EXTI_u8IntEnable+0x46>
    4620:	2b 81       	ldd	r18, Y+3	; 0x03
    4622:	3c 81       	ldd	r19, Y+4	; 0x04
    4624:	22 30       	cpi	r18, 0x02	; 2
    4626:	31 05       	cpc	r19, r1
    4628:	a1 f0       	breq	.+40     	; 0x4652 <EXTI_u8IntEnable+0x56>
    462a:	8b 81       	ldd	r24, Y+3	; 0x03
    462c:	9c 81       	ldd	r25, Y+4	; 0x04
    462e:	00 97       	sbiw	r24, 0x00	; 0
    4630:	c1 f4       	brne	.+48     	; 0x4662 <EXTI_u8IntEnable+0x66>
	{
	case INT0 : SET_BIT(GICR,GICR_INT0); break ;
    4632:	ab e5       	ldi	r26, 0x5B	; 91
    4634:	b0 e0       	ldi	r27, 0x00	; 0
    4636:	eb e5       	ldi	r30, 0x5B	; 91
    4638:	f0 e0       	ldi	r31, 0x00	; 0
    463a:	80 81       	ld	r24, Z
    463c:	80 64       	ori	r24, 0x40	; 64
    463e:	8c 93       	st	X, r24
    4640:	12 c0       	rjmp	.+36     	; 0x4666 <EXTI_u8IntEnable+0x6a>
	case INT1 : SET_BIT(GICR,GICR_INT1); break ;
    4642:	ab e5       	ldi	r26, 0x5B	; 91
    4644:	b0 e0       	ldi	r27, 0x00	; 0
    4646:	eb e5       	ldi	r30, 0x5B	; 91
    4648:	f0 e0       	ldi	r31, 0x00	; 0
    464a:	80 81       	ld	r24, Z
    464c:	80 68       	ori	r24, 0x80	; 128
    464e:	8c 93       	st	X, r24
    4650:	0a c0       	rjmp	.+20     	; 0x4666 <EXTI_u8IntEnable+0x6a>
	case INT2 : SET_BIT(GICR,GICR_INT2); break ;
    4652:	ab e5       	ldi	r26, 0x5B	; 91
    4654:	b0 e0       	ldi	r27, 0x00	; 0
    4656:	eb e5       	ldi	r30, 0x5B	; 91
    4658:	f0 e0       	ldi	r31, 0x00	; 0
    465a:	80 81       	ld	r24, Z
    465c:	80 62       	ori	r24, 0x20	; 32
    465e:	8c 93       	st	X, r24
    4660:	02 c0       	rjmp	.+4      	; 0x4666 <EXTI_u8IntEnable+0x6a>
	default : Local_u8ErrorState = NOK ; break ;
    4662:	81 e0       	ldi	r24, 0x01	; 1
    4664:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState ;
    4666:	89 81       	ldd	r24, Y+1	; 0x01
}
    4668:	0f 90       	pop	r0
    466a:	0f 90       	pop	r0
    466c:	0f 90       	pop	r0
    466e:	0f 90       	pop	r0
    4670:	cf 91       	pop	r28
    4672:	df 91       	pop	r29
    4674:	08 95       	ret

00004676 <EXTI_u8IntDisable>:

uint8 EXTI_u8IntDisable ( EXTI_IntNum_t copy_IntNum)
{
    4676:	df 93       	push	r29
    4678:	cf 93       	push	r28
    467a:	00 d0       	rcall	.+0      	; 0x467c <EXTI_u8IntDisable+0x6>
    467c:	00 d0       	rcall	.+0      	; 0x467e <EXTI_u8IntDisable+0x8>
    467e:	cd b7       	in	r28, 0x3d	; 61
    4680:	de b7       	in	r29, 0x3e	; 62
    4682:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8ErrorState = OK ;
    4684:	19 82       	std	Y+1, r1	; 0x01
	switch ( copy_IntNum )
    4686:	8a 81       	ldd	r24, Y+2	; 0x02
    4688:	28 2f       	mov	r18, r24
    468a:	30 e0       	ldi	r19, 0x00	; 0
    468c:	3c 83       	std	Y+4, r19	; 0x04
    468e:	2b 83       	std	Y+3, r18	; 0x03
    4690:	8b 81       	ldd	r24, Y+3	; 0x03
    4692:	9c 81       	ldd	r25, Y+4	; 0x04
    4694:	81 30       	cpi	r24, 0x01	; 1
    4696:	91 05       	cpc	r25, r1
    4698:	89 f0       	breq	.+34     	; 0x46bc <EXTI_u8IntDisable+0x46>
    469a:	2b 81       	ldd	r18, Y+3	; 0x03
    469c:	3c 81       	ldd	r19, Y+4	; 0x04
    469e:	22 30       	cpi	r18, 0x02	; 2
    46a0:	31 05       	cpc	r19, r1
    46a2:	a1 f0       	breq	.+40     	; 0x46cc <EXTI_u8IntDisable+0x56>
    46a4:	8b 81       	ldd	r24, Y+3	; 0x03
    46a6:	9c 81       	ldd	r25, Y+4	; 0x04
    46a8:	00 97       	sbiw	r24, 0x00	; 0
    46aa:	c1 f4       	brne	.+48     	; 0x46dc <EXTI_u8IntDisable+0x66>
	{
	case INT0 : CLR_BIT(GICR,GICR_INT0); break ;
    46ac:	ab e5       	ldi	r26, 0x5B	; 91
    46ae:	b0 e0       	ldi	r27, 0x00	; 0
    46b0:	eb e5       	ldi	r30, 0x5B	; 91
    46b2:	f0 e0       	ldi	r31, 0x00	; 0
    46b4:	80 81       	ld	r24, Z
    46b6:	8f 7b       	andi	r24, 0xBF	; 191
    46b8:	8c 93       	st	X, r24
    46ba:	12 c0       	rjmp	.+36     	; 0x46e0 <EXTI_u8IntDisable+0x6a>
	case INT1 : CLR_BIT(GICR,GICR_INT1); break ;
    46bc:	ab e5       	ldi	r26, 0x5B	; 91
    46be:	b0 e0       	ldi	r27, 0x00	; 0
    46c0:	eb e5       	ldi	r30, 0x5B	; 91
    46c2:	f0 e0       	ldi	r31, 0x00	; 0
    46c4:	80 81       	ld	r24, Z
    46c6:	8f 77       	andi	r24, 0x7F	; 127
    46c8:	8c 93       	st	X, r24
    46ca:	0a c0       	rjmp	.+20     	; 0x46e0 <EXTI_u8IntDisable+0x6a>
	case INT2 : CLR_BIT(GICR,GICR_INT2); break ;
    46cc:	ab e5       	ldi	r26, 0x5B	; 91
    46ce:	b0 e0       	ldi	r27, 0x00	; 0
    46d0:	eb e5       	ldi	r30, 0x5B	; 91
    46d2:	f0 e0       	ldi	r31, 0x00	; 0
    46d4:	80 81       	ld	r24, Z
    46d6:	8f 7d       	andi	r24, 0xDF	; 223
    46d8:	8c 93       	st	X, r24
    46da:	02 c0       	rjmp	.+4      	; 0x46e0 <EXTI_u8IntDisable+0x6a>
	default : Local_u8ErrorState = NOK ; break ;
    46dc:	81 e0       	ldi	r24, 0x01	; 1
    46de:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState ;
    46e0:	89 81       	ldd	r24, Y+1	; 0x01
}
    46e2:	0f 90       	pop	r0
    46e4:	0f 90       	pop	r0
    46e6:	0f 90       	pop	r0
    46e8:	0f 90       	pop	r0
    46ea:	cf 91       	pop	r28
    46ec:	df 91       	pop	r29
    46ee:	08 95       	ret

000046f0 <EXTI_u8SetCallBack>:

uint8 EXTI_u8SetCallBack (EXTI_IntNum_t copy_IntNum , void(*copy_pvFuncPtr)(void))
{
    46f0:	df 93       	push	r29
    46f2:	cf 93       	push	r28
    46f4:	00 d0       	rcall	.+0      	; 0x46f6 <EXTI_u8SetCallBack+0x6>
    46f6:	00 d0       	rcall	.+0      	; 0x46f8 <EXTI_u8SetCallBack+0x8>
    46f8:	cd b7       	in	r28, 0x3d	; 61
    46fa:	de b7       	in	r29, 0x3e	; 62
    46fc:	8a 83       	std	Y+2, r24	; 0x02
    46fe:	7c 83       	std	Y+4, r23	; 0x04
    4700:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK ;
    4702:	19 82       	std	Y+1, r1	; 0x01

	if ( copy_pvFuncPtr != NULL )
    4704:	8b 81       	ldd	r24, Y+3	; 0x03
    4706:	9c 81       	ldd	r25, Y+4	; 0x04
    4708:	00 97       	sbiw	r24, 0x00	; 0
    470a:	99 f0       	breq	.+38     	; 0x4732 <EXTI_u8SetCallBack+0x42>
	{
		if ( (copy_IntNum >= INT0) && ( copy_IntNum <= INT2 ) )
    470c:	8a 81       	ldd	r24, Y+2	; 0x02
    470e:	83 30       	cpi	r24, 0x03	; 3
    4710:	68 f4       	brcc	.+26     	; 0x472c <EXTI_u8SetCallBack+0x3c>
		{
			EXTI_pfFuncPtr[copy_IntNum] = copy_pvFuncPtr ;
    4712:	8a 81       	ldd	r24, Y+2	; 0x02
    4714:	88 2f       	mov	r24, r24
    4716:	90 e0       	ldi	r25, 0x00	; 0
    4718:	88 0f       	add	r24, r24
    471a:	99 1f       	adc	r25, r25
    471c:	fc 01       	movw	r30, r24
    471e:	eb 5c       	subi	r30, 0xCB	; 203
    4720:	fe 4f       	sbci	r31, 0xFE	; 254
    4722:	8b 81       	ldd	r24, Y+3	; 0x03
    4724:	9c 81       	ldd	r25, Y+4	; 0x04
    4726:	91 83       	std	Z+1, r25	; 0x01
    4728:	80 83       	st	Z, r24
    472a:	05 c0       	rjmp	.+10     	; 0x4736 <EXTI_u8SetCallBack+0x46>
		}
		else
		{
			Local_u8ErrorState = NOK ;
    472c:	81 e0       	ldi	r24, 0x01	; 1
    472e:	89 83       	std	Y+1, r24	; 0x01
    4730:	02 c0       	rjmp	.+4      	; 0x4736 <EXTI_u8SetCallBack+0x46>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR ;
    4732:	82 e0       	ldi	r24, 0x02	; 2
    4734:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState ;
    4736:	89 81       	ldd	r24, Y+1	; 0x01
}
    4738:	0f 90       	pop	r0
    473a:	0f 90       	pop	r0
    473c:	0f 90       	pop	r0
    473e:	0f 90       	pop	r0
    4740:	cf 91       	pop	r28
    4742:	df 91       	pop	r29
    4744:	08 95       	ret

00004746 <EXTI_u8IntClearFlag>:

uint8 EXTI_u8IntClearFlag ( EXTI_IntNum_t copy_IntNum)
{
    4746:	df 93       	push	r29
    4748:	cf 93       	push	r28
    474a:	00 d0       	rcall	.+0      	; 0x474c <EXTI_u8IntClearFlag+0x6>
    474c:	00 d0       	rcall	.+0      	; 0x474e <EXTI_u8IntClearFlag+0x8>
    474e:	cd b7       	in	r28, 0x3d	; 61
    4750:	de b7       	in	r29, 0x3e	; 62
    4752:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8ErrorState = OK ;
    4754:	19 82       	std	Y+1, r1	; 0x01
	switch ( copy_IntNum )
    4756:	8a 81       	ldd	r24, Y+2	; 0x02
    4758:	28 2f       	mov	r18, r24
    475a:	30 e0       	ldi	r19, 0x00	; 0
    475c:	3c 83       	std	Y+4, r19	; 0x04
    475e:	2b 83       	std	Y+3, r18	; 0x03
    4760:	8b 81       	ldd	r24, Y+3	; 0x03
    4762:	9c 81       	ldd	r25, Y+4	; 0x04
    4764:	81 30       	cpi	r24, 0x01	; 1
    4766:	91 05       	cpc	r25, r1
    4768:	89 f0       	breq	.+34     	; 0x478c <EXTI_u8IntClearFlag+0x46>
    476a:	2b 81       	ldd	r18, Y+3	; 0x03
    476c:	3c 81       	ldd	r19, Y+4	; 0x04
    476e:	22 30       	cpi	r18, 0x02	; 2
    4770:	31 05       	cpc	r19, r1
    4772:	a1 f0       	breq	.+40     	; 0x479c <EXTI_u8IntClearFlag+0x56>
    4774:	8b 81       	ldd	r24, Y+3	; 0x03
    4776:	9c 81       	ldd	r25, Y+4	; 0x04
    4778:	00 97       	sbiw	r24, 0x00	; 0
    477a:	c1 f4       	brne	.+48     	; 0x47ac <EXTI_u8IntClearFlag+0x66>
	{
	case INT0 : SET_BIT(GIFR,GIFR_INTF0); break ;
    477c:	aa e5       	ldi	r26, 0x5A	; 90
    477e:	b0 e0       	ldi	r27, 0x00	; 0
    4780:	ea e5       	ldi	r30, 0x5A	; 90
    4782:	f0 e0       	ldi	r31, 0x00	; 0
    4784:	80 81       	ld	r24, Z
    4786:	80 64       	ori	r24, 0x40	; 64
    4788:	8c 93       	st	X, r24
    478a:	12 c0       	rjmp	.+36     	; 0x47b0 <EXTI_u8IntClearFlag+0x6a>
	case INT1 : SET_BIT(GIFR,GIFR_INTF1); break ;
    478c:	aa e5       	ldi	r26, 0x5A	; 90
    478e:	b0 e0       	ldi	r27, 0x00	; 0
    4790:	ea e5       	ldi	r30, 0x5A	; 90
    4792:	f0 e0       	ldi	r31, 0x00	; 0
    4794:	80 81       	ld	r24, Z
    4796:	80 68       	ori	r24, 0x80	; 128
    4798:	8c 93       	st	X, r24
    479a:	0a c0       	rjmp	.+20     	; 0x47b0 <EXTI_u8IntClearFlag+0x6a>
	case INT2 : SET_BIT(GIFR,GIFR_INTF2); break ;
    479c:	aa e5       	ldi	r26, 0x5A	; 90
    479e:	b0 e0       	ldi	r27, 0x00	; 0
    47a0:	ea e5       	ldi	r30, 0x5A	; 90
    47a2:	f0 e0       	ldi	r31, 0x00	; 0
    47a4:	80 81       	ld	r24, Z
    47a6:	80 62       	ori	r24, 0x20	; 32
    47a8:	8c 93       	st	X, r24
    47aa:	02 c0       	rjmp	.+4      	; 0x47b0 <EXTI_u8IntClearFlag+0x6a>
	default   : Local_u8ErrorState = NOK; break ;
    47ac:	81 e0       	ldi	r24, 0x01	; 1
    47ae:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState ;
    47b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    47b2:	0f 90       	pop	r0
    47b4:	0f 90       	pop	r0
    47b6:	0f 90       	pop	r0
    47b8:	0f 90       	pop	r0
    47ba:	cf 91       	pop	r28
    47bc:	df 91       	pop	r29
    47be:	08 95       	ret

000047c0 <__vector_1>:
											/* INT0 ISR */

void __vector_1 (void) __attribute__((signal));
void __vector_1 (void)
{
    47c0:	1f 92       	push	r1
    47c2:	0f 92       	push	r0
    47c4:	0f b6       	in	r0, 0x3f	; 63
    47c6:	0f 92       	push	r0
    47c8:	11 24       	eor	r1, r1
    47ca:	2f 93       	push	r18
    47cc:	3f 93       	push	r19
    47ce:	4f 93       	push	r20
    47d0:	5f 93       	push	r21
    47d2:	6f 93       	push	r22
    47d4:	7f 93       	push	r23
    47d6:	8f 93       	push	r24
    47d8:	9f 93       	push	r25
    47da:	af 93       	push	r26
    47dc:	bf 93       	push	r27
    47de:	ef 93       	push	r30
    47e0:	ff 93       	push	r31
    47e2:	df 93       	push	r29
    47e4:	cf 93       	push	r28
    47e6:	cd b7       	in	r28, 0x3d	; 61
    47e8:	de b7       	in	r29, 0x3e	; 62
	if ( EXTI_pfFuncPtr[INT0] != NULL )
    47ea:	80 91 35 01 	lds	r24, 0x0135
    47ee:	90 91 36 01 	lds	r25, 0x0136
    47f2:	00 97       	sbiw	r24, 0x00	; 0
    47f4:	29 f0       	breq	.+10     	; 0x4800 <__vector_1+0x40>
		{
			EXTI_pfFuncPtr[INT0]();
    47f6:	e0 91 35 01 	lds	r30, 0x0135
    47fa:	f0 91 36 01 	lds	r31, 0x0136
    47fe:	09 95       	icall
		}
	else
		{
			// DO NOTHING
		}
}
    4800:	cf 91       	pop	r28
    4802:	df 91       	pop	r29
    4804:	ff 91       	pop	r31
    4806:	ef 91       	pop	r30
    4808:	bf 91       	pop	r27
    480a:	af 91       	pop	r26
    480c:	9f 91       	pop	r25
    480e:	8f 91       	pop	r24
    4810:	7f 91       	pop	r23
    4812:	6f 91       	pop	r22
    4814:	5f 91       	pop	r21
    4816:	4f 91       	pop	r20
    4818:	3f 91       	pop	r19
    481a:	2f 91       	pop	r18
    481c:	0f 90       	pop	r0
    481e:	0f be       	out	0x3f, r0	; 63
    4820:	0f 90       	pop	r0
    4822:	1f 90       	pop	r1
    4824:	18 95       	reti

00004826 <__vector_2>:

											/* INT1 ISR */

void __vector_2 (void) __attribute__((signal));
void __vector_2 (void)
{
    4826:	1f 92       	push	r1
    4828:	0f 92       	push	r0
    482a:	0f b6       	in	r0, 0x3f	; 63
    482c:	0f 92       	push	r0
    482e:	11 24       	eor	r1, r1
    4830:	2f 93       	push	r18
    4832:	3f 93       	push	r19
    4834:	4f 93       	push	r20
    4836:	5f 93       	push	r21
    4838:	6f 93       	push	r22
    483a:	7f 93       	push	r23
    483c:	8f 93       	push	r24
    483e:	9f 93       	push	r25
    4840:	af 93       	push	r26
    4842:	bf 93       	push	r27
    4844:	ef 93       	push	r30
    4846:	ff 93       	push	r31
    4848:	df 93       	push	r29
    484a:	cf 93       	push	r28
    484c:	cd b7       	in	r28, 0x3d	; 61
    484e:	de b7       	in	r29, 0x3e	; 62
	if ( EXTI_pfFuncPtr[INT1] != NULL )
    4850:	80 91 37 01 	lds	r24, 0x0137
    4854:	90 91 38 01 	lds	r25, 0x0138
    4858:	00 97       	sbiw	r24, 0x00	; 0
    485a:	29 f0       	breq	.+10     	; 0x4866 <__vector_2+0x40>
		{
			EXTI_pfFuncPtr[INT1]();
    485c:	e0 91 37 01 	lds	r30, 0x0137
    4860:	f0 91 38 01 	lds	r31, 0x0138
    4864:	09 95       	icall
		}
	else
		{
			// DO NOTHING
		}
	}
    4866:	cf 91       	pop	r28
    4868:	df 91       	pop	r29
    486a:	ff 91       	pop	r31
    486c:	ef 91       	pop	r30
    486e:	bf 91       	pop	r27
    4870:	af 91       	pop	r26
    4872:	9f 91       	pop	r25
    4874:	8f 91       	pop	r24
    4876:	7f 91       	pop	r23
    4878:	6f 91       	pop	r22
    487a:	5f 91       	pop	r21
    487c:	4f 91       	pop	r20
    487e:	3f 91       	pop	r19
    4880:	2f 91       	pop	r18
    4882:	0f 90       	pop	r0
    4884:	0f be       	out	0x3f, r0	; 63
    4886:	0f 90       	pop	r0
    4888:	1f 90       	pop	r1
    488a:	18 95       	reti

0000488c <__vector_3>:
											/* INT2 ISR */

void __vector_3 (void) __attribute__((signal));
void __vector_3 (void)
{
    488c:	1f 92       	push	r1
    488e:	0f 92       	push	r0
    4890:	0f b6       	in	r0, 0x3f	; 63
    4892:	0f 92       	push	r0
    4894:	11 24       	eor	r1, r1
    4896:	2f 93       	push	r18
    4898:	3f 93       	push	r19
    489a:	4f 93       	push	r20
    489c:	5f 93       	push	r21
    489e:	6f 93       	push	r22
    48a0:	7f 93       	push	r23
    48a2:	8f 93       	push	r24
    48a4:	9f 93       	push	r25
    48a6:	af 93       	push	r26
    48a8:	bf 93       	push	r27
    48aa:	ef 93       	push	r30
    48ac:	ff 93       	push	r31
    48ae:	df 93       	push	r29
    48b0:	cf 93       	push	r28
    48b2:	cd b7       	in	r28, 0x3d	; 61
    48b4:	de b7       	in	r29, 0x3e	; 62
	if ( EXTI_pfFuncPtr[INT2] != NULL )
    48b6:	80 91 39 01 	lds	r24, 0x0139
    48ba:	90 91 3a 01 	lds	r25, 0x013A
    48be:	00 97       	sbiw	r24, 0x00	; 0
    48c0:	29 f0       	breq	.+10     	; 0x48cc <__vector_3+0x40>
		{
			EXTI_pfFuncPtr[INT2]();
    48c2:	e0 91 39 01 	lds	r30, 0x0139
    48c6:	f0 91 3a 01 	lds	r31, 0x013A
    48ca:	09 95       	icall
		}
	else
		{
			// DO NOTHING
		}
}
    48cc:	cf 91       	pop	r28
    48ce:	df 91       	pop	r29
    48d0:	ff 91       	pop	r31
    48d2:	ef 91       	pop	r30
    48d4:	bf 91       	pop	r27
    48d6:	af 91       	pop	r26
    48d8:	9f 91       	pop	r25
    48da:	8f 91       	pop	r24
    48dc:	7f 91       	pop	r23
    48de:	6f 91       	pop	r22
    48e0:	5f 91       	pop	r21
    48e2:	4f 91       	pop	r20
    48e4:	3f 91       	pop	r19
    48e6:	2f 91       	pop	r18
    48e8:	0f 90       	pop	r0
    48ea:	0f be       	out	0x3f, r0	; 63
    48ec:	0f 90       	pop	r0
    48ee:	1f 90       	pop	r1
    48f0:	18 95       	reti

000048f2 <GIE_voidEnableGlobal>:

#include "GIE_Interface.h"
#include "GIE_Reg.h"

	void GIE_voidEnableGlobal  ( void ) 
	{
    48f2:	df 93       	push	r29
    48f4:	cf 93       	push	r28
    48f6:	cd b7       	in	r28, 0x3d	; 61
    48f8:	de b7       	in	r29, 0x3e	; 62
		__asm volatile ("SEI"); 						// ASSEMBLY INSTRUCTION
    48fa:	78 94       	sei
		/* SET_BIT ( SREG , SREG_I ); ANOTHER WAY WITHOUT USING ASSEMBLY LANGUAGE*/
	}
    48fc:	cf 91       	pop	r28
    48fe:	df 91       	pop	r29
    4900:	08 95       	ret

00004902 <GIE_voidDisableGlobal>:
	
	void GIE_voidDisableGlobal ( void ) 
	{
    4902:	df 93       	push	r29
    4904:	cf 93       	push	r28
    4906:	cd b7       	in	r28, 0x3d	; 61
    4908:	de b7       	in	r29, 0x3e	; 62
		__asm volatile ("CLI"); 
    490a:	f8 94       	cli
		/* CLR_BIT ( SREG , SREG_I ); ANOTHER WAY WITHOUT USING ASSEMBLY LANGUAGE*/
    490c:	cf 91       	pop	r28
    490e:	df 91       	pop	r29
    4910:	08 95       	ret

00004912 <KPD_u8GetPressedKey>:
#include "KPD_Prv.h" 
#include "KPD_Cfg.h"

										/* Functions Initialization */
		uint8 KPD_u8GetPressedKey ( void ) 
		{
    4912:	df 93       	push	r29
    4914:	cf 93       	push	r28
    4916:	00 d0       	rcall	.+0      	; 0x4918 <KPD_u8GetPressedKey+0x6>
    4918:	00 d0       	rcall	.+0      	; 0x491a <KPD_u8GetPressedKey+0x8>
    491a:	0f 92       	push	r0
    491c:	cd b7       	in	r28, 0x3d	; 61
    491e:	de b7       	in	r29, 0x3e	; 62
			uint8 Local_u8RowCounter , Local_u8ColCounter , Local_u8KeyState , Local_u8PressedKey = KPD_u8NO_PRESSED_KEY_VAL  ;
    4920:	8f ef       	ldi	r24, 0xFF	; 255
    4922:	89 83       	std	Y+1, r24	; 0x01
			static uint8 Local_u8RowArr[ ROW_NUM ] = { KPD_u8RO_PIN , KPD_u8R1_PIN , KPD_u8R2_PIN , KPD_u8R3_PIN };
			static uint8 Local_u8KPDArr[ ROW_NUM ] [ COL_NUM ] = KPD_u8BUTTON_ARR ;
			
										/* Activate the Column PINS */

			for ( Local_u8ColCounter = 0U ; Local_u8ColCounter < COL_NUM ; Local_u8ColCounter ++ )
    4924:	1a 82       	std	Y+2, r1	; 0x02
    4926:	5e c0       	rjmp	.+188    	; 0x49e4 <KPD_u8GetPressedKey+0xd2>
			{
										/* Activate the current column */

				DIO_U8SetPinValue ( KPD_u8COL_PORT , Local_u8ColArr [ Local_u8ColCounter ] , DIO_PIN_LOW  ) ;
    4928:	8a 81       	ldd	r24, Y+2	; 0x02
    492a:	88 2f       	mov	r24, r24
    492c:	90 e0       	ldi	r25, 0x00	; 0
    492e:	fc 01       	movw	r30, r24
    4930:	e9 5e       	subi	r30, 0xE9	; 233
    4932:	fe 4f       	sbci	r31, 0xFE	; 254
    4934:	90 81       	ld	r25, Z
    4936:	83 e0       	ldi	r24, 0x03	; 3
    4938:	69 2f       	mov	r22, r25
    493a:	40 e0       	ldi	r20, 0x00	; 0
    493c:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>

										/* Read the Row PINS */

				for ( Local_u8RowCounter = 0U ; Local_u8RowCounter < ROW_NUM ; Local_u8RowCounter ++)
    4940:	1b 82       	std	Y+3, r1	; 0x03
    4942:	3d c0       	rjmp	.+122    	; 0x49be <KPD_u8GetPressedKey+0xac>
				{
										/* READ the current ROW */
					DIO_u8GetPinValue( KPD_u8ROW_PORT , Local_u8RowArr [ Local_u8RowCounter ] , &Local_u8KeyState ) ;
    4944:	8b 81       	ldd	r24, Y+3	; 0x03
    4946:	88 2f       	mov	r24, r24
    4948:	90 e0       	ldi	r25, 0x00	; 0
    494a:	fc 01       	movw	r30, r24
    494c:	ed 5e       	subi	r30, 0xED	; 237
    494e:	fe 4f       	sbci	r31, 0xFE	; 254
    4950:	90 81       	ld	r25, Z
    4952:	9e 01       	movw	r18, r28
    4954:	2c 5f       	subi	r18, 0xFC	; 252
    4956:	3f 4f       	sbci	r19, 0xFF	; 255
    4958:	81 e0       	ldi	r24, 0x01	; 1
    495a:	69 2f       	mov	r22, r25
    495c:	a9 01       	movw	r20, r18
    495e:	0e 94 94 20 	call	0x4128	; 0x4128 <DIO_u8GetPinValue>
					if ( Local_u8KeyState == DIO_PIN_LOW )
    4962:	8c 81       	ldd	r24, Y+4	; 0x04
    4964:	88 23       	and	r24, r24
    4966:	41 f5       	brne	.+80     	; 0x49b8 <KPD_u8GetPressedKey+0xa6>
					{
						Local_u8PressedKey = Local_u8KPDArr [ Local_u8RowCounter ] [ Local_u8ColCounter ] ;
    4968:	8b 81       	ldd	r24, Y+3	; 0x03
    496a:	48 2f       	mov	r20, r24
    496c:	50 e0       	ldi	r21, 0x00	; 0
    496e:	8a 81       	ldd	r24, Y+2	; 0x02
    4970:	28 2f       	mov	r18, r24
    4972:	30 e0       	ldi	r19, 0x00	; 0
    4974:	ca 01       	movw	r24, r20
    4976:	88 0f       	add	r24, r24
    4978:	99 1f       	adc	r25, r25
    497a:	88 0f       	add	r24, r24
    497c:	99 1f       	adc	r25, r25
    497e:	82 0f       	add	r24, r18
    4980:	93 1f       	adc	r25, r19
    4982:	fc 01       	movw	r30, r24
    4984:	ed 5f       	subi	r30, 0xFD	; 253
    4986:	fe 4f       	sbci	r31, 0xFE	; 254
    4988:	80 81       	ld	r24, Z
    498a:	89 83       	std	Y+1, r24	; 0x01
    498c:	0f c0       	rjmp	.+30     	; 0x49ac <KPD_u8GetPressedKey+0x9a>

										/* WAIT UNTIL KEY IS RELEASED ( POLLING WITH BLOCKING ON PIN READING ) */

						while ( Local_u8KeyState == DIO_PIN_LOW )
						{
							DIO_u8GetPinValue( KPD_u8ROW_PORT , Local_u8RowArr [ Local_u8RowCounter ] , &Local_u8KeyState ) ;
    498e:	8b 81       	ldd	r24, Y+3	; 0x03
    4990:	88 2f       	mov	r24, r24
    4992:	90 e0       	ldi	r25, 0x00	; 0
    4994:	fc 01       	movw	r30, r24
    4996:	ed 5e       	subi	r30, 0xED	; 237
    4998:	fe 4f       	sbci	r31, 0xFE	; 254
    499a:	90 81       	ld	r25, Z
    499c:	9e 01       	movw	r18, r28
    499e:	2c 5f       	subi	r18, 0xFC	; 252
    49a0:	3f 4f       	sbci	r19, 0xFF	; 255
    49a2:	81 e0       	ldi	r24, 0x01	; 1
    49a4:	69 2f       	mov	r22, r25
    49a6:	a9 01       	movw	r20, r18
    49a8:	0e 94 94 20 	call	0x4128	; 0x4128 <DIO_u8GetPinValue>
					{
						Local_u8PressedKey = Local_u8KPDArr [ Local_u8RowCounter ] [ Local_u8ColCounter ] ;

										/* WAIT UNTIL KEY IS RELEASED ( POLLING WITH BLOCKING ON PIN READING ) */

						while ( Local_u8KeyState == DIO_PIN_LOW )
    49ac:	8c 81       	ldd	r24, Y+4	; 0x04
    49ae:	88 23       	and	r24, r24
    49b0:	71 f3       	breq	.-36     	; 0x498e <KPD_u8GetPressedKey+0x7c>
						{
							DIO_u8GetPinValue( KPD_u8ROW_PORT , Local_u8RowArr [ Local_u8RowCounter ] , &Local_u8KeyState ) ;
						}
						return Local_u8PressedKey ;
    49b2:	89 81       	ldd	r24, Y+1	; 0x01
    49b4:	8d 83       	std	Y+5, r24	; 0x05
    49b6:	1c c0       	rjmp	.+56     	; 0x49f0 <KPD_u8GetPressedKey+0xde>

				DIO_U8SetPinValue ( KPD_u8COL_PORT , Local_u8ColArr [ Local_u8ColCounter ] , DIO_PIN_LOW  ) ;

										/* Read the Row PINS */

				for ( Local_u8RowCounter = 0U ; Local_u8RowCounter < ROW_NUM ; Local_u8RowCounter ++)
    49b8:	8b 81       	ldd	r24, Y+3	; 0x03
    49ba:	8f 5f       	subi	r24, 0xFF	; 255
    49bc:	8b 83       	std	Y+3, r24	; 0x03
    49be:	8b 81       	ldd	r24, Y+3	; 0x03
    49c0:	84 30       	cpi	r24, 0x04	; 4
    49c2:	08 f4       	brcc	.+2      	; 0x49c6 <KPD_u8GetPressedKey+0xb4>
    49c4:	bf cf       	rjmp	.-130    	; 0x4944 <KPD_u8GetPressedKey+0x32>
					}
				}

										/* DEACTIVATE THE CURRENT COLUMN */

				DIO_U8SetPinValue ( KPD_u8COL_PORT , Local_u8ColArr [ Local_u8ColCounter ] , DIO_PIN_HIGH  ) ;
    49c6:	8a 81       	ldd	r24, Y+2	; 0x02
    49c8:	88 2f       	mov	r24, r24
    49ca:	90 e0       	ldi	r25, 0x00	; 0
    49cc:	fc 01       	movw	r30, r24
    49ce:	e9 5e       	subi	r30, 0xE9	; 233
    49d0:	fe 4f       	sbci	r31, 0xFE	; 254
    49d2:	90 81       	ld	r25, Z
    49d4:	83 e0       	ldi	r24, 0x03	; 3
    49d6:	69 2f       	mov	r22, r25
    49d8:	41 e0       	ldi	r20, 0x01	; 1
    49da:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <DIO_U8SetPinValue>
			static uint8 Local_u8RowArr[ ROW_NUM ] = { KPD_u8RO_PIN , KPD_u8R1_PIN , KPD_u8R2_PIN , KPD_u8R3_PIN };
			static uint8 Local_u8KPDArr[ ROW_NUM ] [ COL_NUM ] = KPD_u8BUTTON_ARR ;
			
										/* Activate the Column PINS */

			for ( Local_u8ColCounter = 0U ; Local_u8ColCounter < COL_NUM ; Local_u8ColCounter ++ )
    49de:	8a 81       	ldd	r24, Y+2	; 0x02
    49e0:	8f 5f       	subi	r24, 0xFF	; 255
    49e2:	8a 83       	std	Y+2, r24	; 0x02
    49e4:	8a 81       	ldd	r24, Y+2	; 0x02
    49e6:	84 30       	cpi	r24, 0x04	; 4
    49e8:	08 f4       	brcc	.+2      	; 0x49ec <KPD_u8GetPressedKey+0xda>
    49ea:	9e cf       	rjmp	.-196    	; 0x4928 <KPD_u8GetPressedKey+0x16>
										/* DEACTIVATE THE CURRENT COLUMN */

				DIO_U8SetPinValue ( KPD_u8COL_PORT , Local_u8ColArr [ Local_u8ColCounter ] , DIO_PIN_HIGH  ) ;

			}
			return Local_u8PressedKey ;
    49ec:	89 81       	ldd	r24, Y+1	; 0x01
    49ee:	8d 83       	std	Y+5, r24	; 0x05
    49f0:	8d 81       	ldd	r24, Y+5	; 0x05
		}
    49f2:	0f 90       	pop	r0
    49f4:	0f 90       	pop	r0
    49f6:	0f 90       	pop	r0
    49f8:	0f 90       	pop	r0
    49fa:	0f 90       	pop	r0
    49fc:	cf 91       	pop	r28
    49fe:	df 91       	pop	r29
    4a00:	08 95       	ret

00004a02 <LDR_u16PreconfigGetLightLevel>:
#include "LDR_Cfg.h"

										/* Functions Initialization */

	uint16 LDR_u16PreconfigGetLightLevel ( void )
	{
    4a02:	df 93       	push	r29
    4a04:	cf 93       	push	r28
    4a06:	00 d0       	rcall	.+0      	; 0x4a08 <LDR_u16PreconfigGetLightLevel+0x6>
    4a08:	cd b7       	in	r28, 0x3d	; 61
    4a0a:	de b7       	in	r29, 0x3e	; 62
		uint16 Local_u16ChannelReading ;

		ADC_u8StartSingleConversionSynch(LDR_ADC_CHANNEL,&Local_u16ChannelReading);
    4a0c:	80 e0       	ldi	r24, 0x00	; 0
    4a0e:	9e 01       	movw	r18, r28
    4a10:	2f 5f       	subi	r18, 0xFF	; 255
    4a12:	3f 4f       	sbci	r19, 0xFF	; 255
    4a14:	b9 01       	movw	r22, r18
    4a16:	0e 94 d4 05 	call	0xba8	; 0xba8 <ADC_u8StartSingleConversionSynch>

		return Local_u16ChannelReading ;
    4a1a:	89 81       	ldd	r24, Y+1	; 0x01
    4a1c:	9a 81       	ldd	r25, Y+2	; 0x02

	}
    4a1e:	0f 90       	pop	r0
    4a20:	0f 90       	pop	r0
    4a22:	cf 91       	pop	r28
    4a24:	df 91       	pop	r29
    4a26:	08 95       	ret

00004a28 <LDR_u16PostconfigGetLightLevel>:

	uint16 LDR_u16PostconfigGetLightLevel ( uint8 Local_u8ADC_ChannelSelect )
	{
    4a28:	df 93       	push	r29
    4a2a:	cf 93       	push	r28
    4a2c:	00 d0       	rcall	.+0      	; 0x4a2e <LDR_u16PostconfigGetLightLevel+0x6>
    4a2e:	0f 92       	push	r0
    4a30:	cd b7       	in	r28, 0x3d	; 61
    4a32:	de b7       	in	r29, 0x3e	; 62
    4a34:	8b 83       	std	Y+3, r24	; 0x03
		uint16 Local_u16ChannelReading ;

		ADC_u8StartSingleConversionSynch(Local_u8ADC_ChannelSelect,&Local_u16ChannelReading);
    4a36:	8b 81       	ldd	r24, Y+3	; 0x03
    4a38:	9e 01       	movw	r18, r28
    4a3a:	2f 5f       	subi	r18, 0xFF	; 255
    4a3c:	3f 4f       	sbci	r19, 0xFF	; 255
    4a3e:	b9 01       	movw	r22, r18
    4a40:	0e 94 d4 05 	call	0xba8	; 0xba8 <ADC_u8StartSingleConversionSynch>

		return Local_u16ChannelReading ;
    4a44:	89 81       	ldd	r24, Y+1	; 0x01
    4a46:	9a 81       	ldd	r25, Y+2	; 0x02

	}
    4a48:	0f 90       	pop	r0
    4a4a:	0f 90       	pop	r0
    4a4c:	0f 90       	pop	r0
    4a4e:	cf 91       	pop	r28
    4a50:	df 91       	pop	r29
    4a52:	08 95       	ret

00004a54 <LM35_u8GetTemperature>:
#include "LM35_Cfg.h"

										/* Functions Initialization */

	uint8 LM35_u8GetTemperature ( void )
	{
    4a54:	df 93       	push	r29
    4a56:	cf 93       	push	r28
    4a58:	00 d0       	rcall	.+0      	; 0x4a5a <LM35_u8GetTemperature+0x6>
    4a5a:	0f 92       	push	r0
    4a5c:	cd b7       	in	r28, 0x3d	; 61
    4a5e:	de b7       	in	r29, 0x3e	; 62
		uint16 Local_u16ChannelReading ;

		volatile uint8 Local_u8TemperatureReading ;

		ADC_u8StartSingleConversionSynch(LM35_ADC_CHANNEL,&Local_u16ChannelReading);
    4a60:	87 e0       	ldi	r24, 0x07	; 7
    4a62:	9e 01       	movw	r18, r28
    4a64:	2f 5f       	subi	r18, 0xFF	; 255
    4a66:	3f 4f       	sbci	r19, 0xFF	; 255
    4a68:	b9 01       	movw	r22, r18
    4a6a:	0e 94 d4 05 	call	0xba8	; 0xba8 <ADC_u8StartSingleConversionSynch>

		Local_u8TemperatureReading = (uint8)((( uint32 )Local_u16ChannelReading*500UL)/256UL);        // TEMPERATURE EQUATION
    4a6e:	89 81       	ldd	r24, Y+1	; 0x01
    4a70:	9a 81       	ldd	r25, Y+2	; 0x02
    4a72:	cc 01       	movw	r24, r24
    4a74:	a0 e0       	ldi	r26, 0x00	; 0
    4a76:	b0 e0       	ldi	r27, 0x00	; 0
    4a78:	24 ef       	ldi	r18, 0xF4	; 244
    4a7a:	31 e0       	ldi	r19, 0x01	; 1
    4a7c:	40 e0       	ldi	r20, 0x00	; 0
    4a7e:	50 e0       	ldi	r21, 0x00	; 0
    4a80:	bc 01       	movw	r22, r24
    4a82:	cd 01       	movw	r24, r26
    4a84:	0e 94 64 26 	call	0x4cc8	; 0x4cc8 <__mulsi3>
    4a88:	dc 01       	movw	r26, r24
    4a8a:	cb 01       	movw	r24, r22
    4a8c:	89 2f       	mov	r24, r25
    4a8e:	9a 2f       	mov	r25, r26
    4a90:	ab 2f       	mov	r26, r27
    4a92:	bb 27       	eor	r27, r27
    4a94:	8b 83       	std	Y+3, r24	; 0x03

		return Local_u8TemperatureReading ;
    4a96:	8b 81       	ldd	r24, Y+3	; 0x03

	}
    4a98:	0f 90       	pop	r0
    4a9a:	0f 90       	pop	r0
    4a9c:	0f 90       	pop	r0
    4a9e:	cf 91       	pop	r28
    4aa0:	df 91       	pop	r29
    4aa2:	08 95       	ret

00004aa4 <MAP>:
#include "STD_TYPES.h"
#include "MAP.h"

sint32 MAP ( sint32 InputRangeMin , sint32 InputRangeMax ,  sint32 OutputRangeMin , sint32 OutPutRangeMax , sint32 InputValue )
{
    4aa4:	af 92       	push	r10
    4aa6:	bf 92       	push	r11
    4aa8:	cf 92       	push	r12
    4aaa:	df 92       	push	r13
    4aac:	ef 92       	push	r14
    4aae:	ff 92       	push	r15
    4ab0:	0f 93       	push	r16
    4ab2:	1f 93       	push	r17
    4ab4:	df 93       	push	r29
    4ab6:	cf 93       	push	r28
    4ab8:	cd b7       	in	r28, 0x3d	; 61
    4aba:	de b7       	in	r29, 0x3e	; 62
    4abc:	68 97       	sbiw	r28, 0x18	; 24
    4abe:	0f b6       	in	r0, 0x3f	; 63
    4ac0:	f8 94       	cli
    4ac2:	de bf       	out	0x3e, r29	; 62
    4ac4:	0f be       	out	0x3f, r0	; 63
    4ac6:	cd bf       	out	0x3d, r28	; 61
    4ac8:	69 87       	std	Y+9, r22	; 0x09
    4aca:	7a 87       	std	Y+10, r23	; 0x0a
    4acc:	8b 87       	std	Y+11, r24	; 0x0b
    4ace:	9c 87       	std	Y+12, r25	; 0x0c
    4ad0:	2d 87       	std	Y+13, r18	; 0x0d
    4ad2:	3e 87       	std	Y+14, r19	; 0x0e
    4ad4:	4f 87       	std	Y+15, r20	; 0x0f
    4ad6:	58 8b       	std	Y+16, r21	; 0x10
    4ad8:	e9 8a       	std	Y+17, r14	; 0x11
    4ada:	fa 8a       	std	Y+18, r15	; 0x12
    4adc:	0b 8b       	std	Y+19, r16	; 0x13
    4ade:	1c 8b       	std	Y+20, r17	; 0x14
    4ae0:	ad 8a       	std	Y+21, r10	; 0x15
    4ae2:	be 8a       	std	Y+22, r11	; 0x16
    4ae4:	cf 8a       	std	Y+23, r12	; 0x17
    4ae6:	d8 8e       	std	Y+24, r13	; 0x18
	sint32 Ratio ; 
	sint32 OutputValue ; 
	
										/* Calculate the ratio of the input value in the input range */
										
    Ratio = ((InputValue - InputRangeMin) * 100u ) / (InputRangeMax - InputRangeMin) ; 
    4ae8:	2d a1       	ldd	r18, Y+37	; 0x25
    4aea:	3e a1       	ldd	r19, Y+38	; 0x26
    4aec:	4f a1       	ldd	r20, Y+39	; 0x27
    4aee:	58 a5       	ldd	r21, Y+40	; 0x28
    4af0:	89 85       	ldd	r24, Y+9	; 0x09
    4af2:	9a 85       	ldd	r25, Y+10	; 0x0a
    4af4:	ab 85       	ldd	r26, Y+11	; 0x0b
    4af6:	bc 85       	ldd	r27, Y+12	; 0x0c
    4af8:	79 01       	movw	r14, r18
    4afa:	8a 01       	movw	r16, r20
    4afc:	e8 1a       	sub	r14, r24
    4afe:	f9 0a       	sbc	r15, r25
    4b00:	0a 0b       	sbc	r16, r26
    4b02:	1b 0b       	sbc	r17, r27
    4b04:	d8 01       	movw	r26, r16
    4b06:	c7 01       	movw	r24, r14
    4b08:	24 e6       	ldi	r18, 0x64	; 100
    4b0a:	30 e0       	ldi	r19, 0x00	; 0
    4b0c:	40 e0       	ldi	r20, 0x00	; 0
    4b0e:	50 e0       	ldi	r21, 0x00	; 0
    4b10:	bc 01       	movw	r22, r24
    4b12:	cd 01       	movw	r24, r26
    4b14:	0e 94 64 26 	call	0x4cc8	; 0x4cc8 <__mulsi3>
    4b18:	7b 01       	movw	r14, r22
    4b1a:	8c 01       	movw	r16, r24
    4b1c:	2d 85       	ldd	r18, Y+13	; 0x0d
    4b1e:	3e 85       	ldd	r19, Y+14	; 0x0e
    4b20:	4f 85       	ldd	r20, Y+15	; 0x0f
    4b22:	58 89       	ldd	r21, Y+16	; 0x10
    4b24:	89 85       	ldd	r24, Y+9	; 0x09
    4b26:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b28:	ab 85       	ldd	r26, Y+11	; 0x0b
    4b2a:	bc 85       	ldd	r27, Y+12	; 0x0c
    4b2c:	28 1b       	sub	r18, r24
    4b2e:	39 0b       	sbc	r19, r25
    4b30:	4a 0b       	sbc	r20, r26
    4b32:	5b 0b       	sbc	r21, r27
    4b34:	c8 01       	movw	r24, r16
    4b36:	b7 01       	movw	r22, r14
    4b38:	0e 94 83 26 	call	0x4d06	; 0x4d06 <__divmodsi4>
    4b3c:	da 01       	movw	r26, r20
    4b3e:	c9 01       	movw	r24, r18
    4b40:	8d 83       	std	Y+5, r24	; 0x05
    4b42:	9e 83       	std	Y+6, r25	; 0x06
    4b44:	af 83       	std	Y+7, r26	; 0x07
    4b46:	b8 87       	std	Y+8, r27	; 0x08
    
										/* Map the ratio to the output range */
										
    OutputValue = ( ( Ratio * (OutPutRangeMax - OutputRangeMin)) / 100u ) + OutputRangeMin ; 
    4b48:	2d 89       	ldd	r18, Y+21	; 0x15
    4b4a:	3e 89       	ldd	r19, Y+22	; 0x16
    4b4c:	4f 89       	ldd	r20, Y+23	; 0x17
    4b4e:	58 8d       	ldd	r21, Y+24	; 0x18
    4b50:	89 89       	ldd	r24, Y+17	; 0x11
    4b52:	9a 89       	ldd	r25, Y+18	; 0x12
    4b54:	ab 89       	ldd	r26, Y+19	; 0x13
    4b56:	bc 89       	ldd	r27, Y+20	; 0x14
    4b58:	79 01       	movw	r14, r18
    4b5a:	8a 01       	movw	r16, r20
    4b5c:	e8 1a       	sub	r14, r24
    4b5e:	f9 0a       	sbc	r15, r25
    4b60:	0a 0b       	sbc	r16, r26
    4b62:	1b 0b       	sbc	r17, r27
    4b64:	d8 01       	movw	r26, r16
    4b66:	c7 01       	movw	r24, r14
    4b68:	2d 81       	ldd	r18, Y+5	; 0x05
    4b6a:	3e 81       	ldd	r19, Y+6	; 0x06
    4b6c:	4f 81       	ldd	r20, Y+7	; 0x07
    4b6e:	58 85       	ldd	r21, Y+8	; 0x08
    4b70:	bc 01       	movw	r22, r24
    4b72:	cd 01       	movw	r24, r26
    4b74:	0e 94 64 26 	call	0x4cc8	; 0x4cc8 <__mulsi3>
    4b78:	dc 01       	movw	r26, r24
    4b7a:	cb 01       	movw	r24, r22
    4b7c:	24 e6       	ldi	r18, 0x64	; 100
    4b7e:	30 e0       	ldi	r19, 0x00	; 0
    4b80:	40 e0       	ldi	r20, 0x00	; 0
    4b82:	50 e0       	ldi	r21, 0x00	; 0
    4b84:	bc 01       	movw	r22, r24
    4b86:	cd 01       	movw	r24, r26
    4b88:	0e 94 83 26 	call	0x4d06	; 0x4d06 <__divmodsi4>
    4b8c:	da 01       	movw	r26, r20
    4b8e:	c9 01       	movw	r24, r18
    4b90:	9c 01       	movw	r18, r24
    4b92:	ad 01       	movw	r20, r26
    4b94:	89 89       	ldd	r24, Y+17	; 0x11
    4b96:	9a 89       	ldd	r25, Y+18	; 0x12
    4b98:	ab 89       	ldd	r26, Y+19	; 0x13
    4b9a:	bc 89       	ldd	r27, Y+20	; 0x14
    4b9c:	82 0f       	add	r24, r18
    4b9e:	93 1f       	adc	r25, r19
    4ba0:	a4 1f       	adc	r26, r20
    4ba2:	b5 1f       	adc	r27, r21
    4ba4:	89 83       	std	Y+1, r24	; 0x01
    4ba6:	9a 83       	std	Y+2, r25	; 0x02
    4ba8:	ab 83       	std	Y+3, r26	; 0x03
    4baa:	bc 83       	std	Y+4, r27	; 0x04
	
										/* Return the output value */
	
    return OutputValue ; 
    4bac:	89 81       	ldd	r24, Y+1	; 0x01
    4bae:	9a 81       	ldd	r25, Y+2	; 0x02
    4bb0:	ab 81       	ldd	r26, Y+3	; 0x03
    4bb2:	bc 81       	ldd	r27, Y+4	; 0x04
    4bb4:	bc 01       	movw	r22, r24
    4bb6:	cd 01       	movw	r24, r26
    4bb8:	68 96       	adiw	r28, 0x18	; 24
    4bba:	0f b6       	in	r0, 0x3f	; 63
    4bbc:	f8 94       	cli
    4bbe:	de bf       	out	0x3e, r29	; 62
    4bc0:	0f be       	out	0x3f, r0	; 63
    4bc2:	cd bf       	out	0x3d, r28	; 61
    4bc4:	cf 91       	pop	r28
    4bc6:	df 91       	pop	r29
    4bc8:	1f 91       	pop	r17
    4bca:	0f 91       	pop	r16
    4bcc:	ff 90       	pop	r15
    4bce:	ef 90       	pop	r14
    4bd0:	df 90       	pop	r13
    4bd2:	cf 90       	pop	r12
    4bd4:	bf 90       	pop	r11
    4bd6:	af 90       	pop	r10
    4bd8:	08 95       	ret

00004bda <PORT_voidInit>:
#include "PORT_Prv.h"
#include "PORT_Reg.h"
#include "PORT_Interface.h"

	void PORT_voidInit ( void ) 
	{
    4bda:	df 93       	push	r29
    4bdc:	cf 93       	push	r28
    4bde:	cd b7       	in	r28, 0x3d	; 61
    4be0:	de b7       	in	r29, 0x3e	; 62
		DDRA  = PORTA_DIR     ; 
    4be2:	ea e3       	ldi	r30, 0x3A	; 58
    4be4:	f0 e0       	ldi	r31, 0x00	; 0
    4be6:	8e e7       	ldi	r24, 0x7E	; 126
    4be8:	80 83       	st	Z, r24
		DDRB  = PORTB_DIR     ;
    4bea:	e7 e3       	ldi	r30, 0x37	; 55
    4bec:	f0 e0       	ldi	r31, 0x00	; 0
    4bee:	81 e0       	ldi	r24, 0x01	; 1
    4bf0:	80 83       	st	Z, r24
		DDRC  = PORTC_DIR     ;
    4bf2:	e4 e3       	ldi	r30, 0x34	; 52
    4bf4:	f0 e0       	ldi	r31, 0x00	; 0
    4bf6:	8f ef       	ldi	r24, 0xFF	; 255
    4bf8:	80 83       	st	Z, r24
		DDRD  = PORTD_DIR     ;
    4bfa:	e1 e3       	ldi	r30, 0x31	; 49
    4bfc:	f0 e0       	ldi	r31, 0x00	; 0
    4bfe:	10 82       	st	Z, r1
		
		PORTA = PORTA_INITVAL ; 
    4c00:	eb e3       	ldi	r30, 0x3B	; 59
    4c02:	f0 e0       	ldi	r31, 0x00	; 0
    4c04:	10 82       	st	Z, r1
		PORTB = PORTB_INITVAL ; 
    4c06:	e8 e3       	ldi	r30, 0x38	; 56
    4c08:	f0 e0       	ldi	r31, 0x00	; 0
    4c0a:	10 82       	st	Z, r1
		PORTC = PORTC_INITVAL ; 
    4c0c:	e5 e3       	ldi	r30, 0x35	; 53
    4c0e:	f0 e0       	ldi	r31, 0x00	; 0
    4c10:	10 82       	st	Z, r1
		PORTD = PORTD_INITVAL ; 
    4c12:	e2 e3       	ldi	r30, 0x32	; 50
    4c14:	f0 e0       	ldi	r31, 0x00	; 0
    4c16:	8c e3       	ldi	r24, 0x3C	; 60
    4c18:	80 83       	st	Z, r24
    4c1a:	cf 91       	pop	r28
    4c1c:	df 91       	pop	r29
    4c1e:	08 95       	ret

00004c20 <main>:
							/* THIS APPLICATION WORKED EFFECTIVELY */
void INT0ISR ( void ) ;
volatile uint8 u8Flag = 0 ;

void main (void)
{
    4c20:	df 93       	push	r29
    4c22:	cf 93       	push	r28
    4c24:	cd b7       	in	r28, 0x3d	; 61
    4c26:	de b7       	in	r29, 0x3e	; 62
	PORT_voidInit();
    4c28:	0e 94 ed 25 	call	0x4bda	; 0x4bda <PORT_voidInit>

	ADC_voidInit() ;
    4c2c:	0e 94 a3 05 	call	0xb46	; 0xb46 <ADC_voidInit>

	CLCD_voidInit();
    4c30:	0e 94 aa 1b 	call	0x3754	; 0x3754 <CLCD_voidInit>

	EXTI_voidInit();
    4c34:	0e 94 ba 21 	call	0x4374	; 0x4374 <EXTI_voidInit>

	//EXTI_u8SetSenseCtrl( INT0 , FALLING_EDGE );

				//EXTI_u8IntEnable( INT0 );
	EXTI_u8SetCallBack ( INT0 , &INT0ISR);
    4c38:	22 e3       	ldi	r18, 0x32	; 50
    4c3a:	36 e2       	ldi	r19, 0x26	; 38
    4c3c:	80 e0       	ldi	r24, 0x00	; 0
    4c3e:	b9 01       	movw	r22, r18
    4c40:	0e 94 78 23 	call	0x46f0	; 0x46f0 <EXTI_u8SetCallBack>

	GIE_voidEnableGlobal();
    4c44:	0e 94 79 24 	call	0x48f2	; 0x48f2 <GIE_voidEnableGlobal>

	while (1)
	{
		if (u8Flag == 1 )
    4c48:	80 91 3b 01 	lds	r24, 0x013B
    4c4c:	81 30       	cpi	r24, 0x01	; 1
    4c4e:	e1 f7       	brne	.-8      	; 0x4c48 <main+0x28>
		{
			EXTI_u8IntDisable(INT0);
    4c50:	80 e0       	ldi	r24, 0x00	; 0
    4c52:	0e 94 3b 23 	call	0x4676	; 0x4676 <EXTI_u8IntDisable>
			//GIE_voidDisableGlobal();
			OpenSound2();
    4c56:	0e 94 02 16 	call	0x2c04	; 0x2c04 <OpenSound2>
			Hamoksha_voidWelcome();
    4c5a:	0e 94 c3 07 	call	0xf86	; 0xf86 <Hamoksha_voidWelcome>
			CLCD_voidID();
    4c5e:	0e 94 3d 09 	call	0x127a	; 0x127a <CLCD_voidID>
    4c62:	f2 cf       	rjmp	.-28     	; 0x4c48 <main+0x28>

00004c64 <INT0ISR>:
		}
	}
}

void INT0ISR ( void )
{
    4c64:	df 93       	push	r29
    4c66:	cf 93       	push	r28
    4c68:	00 d0       	rcall	.+0      	; 0x4c6a <INT0ISR+0x6>
    4c6a:	cd b7       	in	r28, 0x3d	; 61
    4c6c:	de b7       	in	r29, 0x3e	; 62

	switch (u8Flag)
    4c6e:	80 91 3b 01 	lds	r24, 0x013B
    4c72:	28 2f       	mov	r18, r24
    4c74:	30 e0       	ldi	r19, 0x00	; 0
    4c76:	3a 83       	std	Y+2, r19	; 0x02
    4c78:	29 83       	std	Y+1, r18	; 0x01
    4c7a:	89 81       	ldd	r24, Y+1	; 0x01
    4c7c:	9a 81       	ldd	r25, Y+2	; 0x02
    4c7e:	00 97       	sbiw	r24, 0x00	; 0
    4c80:	31 f0       	breq	.+12     	; 0x4c8e <INT0ISR+0x2a>
    4c82:	29 81       	ldd	r18, Y+1	; 0x01
    4c84:	3a 81       	ldd	r19, Y+2	; 0x02
    4c86:	21 30       	cpi	r18, 0x01	; 1
    4c88:	31 05       	cpc	r19, r1
    4c8a:	51 f0       	breq	.+20     	; 0x4ca0 <INT0ISR+0x3c>
    4c8c:	14 c0       	rjmp	.+40     	; 0x4cb6 <INT0ISR+0x52>
	{
	case 0 : u8Flag ++ ;EXTI_u8IntClearFlag ( INT0 ) ; break ;
    4c8e:	80 91 3b 01 	lds	r24, 0x013B
    4c92:	8f 5f       	subi	r24, 0xFF	; 255
    4c94:	80 93 3b 01 	sts	0x013B, r24
    4c98:	80 e0       	ldi	r24, 0x00	; 0
    4c9a:	0e 94 a3 23 	call	0x4746	; 0x4746 <EXTI_u8IntClearFlag>
    4c9e:	0f c0       	rjmp	.+30     	; 0x4cbe <INT0ISR+0x5a>
	case 1 : u8Flag -- ; SystemOFF() ; EXTI_u8IntClearFlag ( INT0 ) ; break ;
    4ca0:	80 91 3b 01 	lds	r24, 0x013B
    4ca4:	81 50       	subi	r24, 0x01	; 1
    4ca6:	80 93 3b 01 	sts	0x013B, r24
    4caa:	0e 94 91 16 	call	0x2d22	; 0x2d22 <SystemOFF>
    4cae:	80 e0       	ldi	r24, 0x00	; 0
    4cb0:	0e 94 a3 23 	call	0x4746	; 0x4746 <EXTI_u8IntClearFlag>
    4cb4:	04 c0       	rjmp	.+8      	; 0x4cbe <INT0ISR+0x5a>
	default : voidSendString("default") ; break ;
    4cb6:	83 ef       	ldi	r24, 0xF3	; 243
    4cb8:	90 e0       	ldi	r25, 0x00	; 0
    4cba:	0e 94 44 1c 	call	0x3888	; 0x3888 <voidSendString>
	}


}
    4cbe:	0f 90       	pop	r0
    4cc0:	0f 90       	pop	r0
    4cc2:	cf 91       	pop	r28
    4cc4:	df 91       	pop	r29
    4cc6:	08 95       	ret

00004cc8 <__mulsi3>:
    4cc8:	62 9f       	mul	r22, r18
    4cca:	d0 01       	movw	r26, r0
    4ccc:	73 9f       	mul	r23, r19
    4cce:	f0 01       	movw	r30, r0
    4cd0:	82 9f       	mul	r24, r18
    4cd2:	e0 0d       	add	r30, r0
    4cd4:	f1 1d       	adc	r31, r1
    4cd6:	64 9f       	mul	r22, r20
    4cd8:	e0 0d       	add	r30, r0
    4cda:	f1 1d       	adc	r31, r1
    4cdc:	92 9f       	mul	r25, r18
    4cde:	f0 0d       	add	r31, r0
    4ce0:	83 9f       	mul	r24, r19
    4ce2:	f0 0d       	add	r31, r0
    4ce4:	74 9f       	mul	r23, r20
    4ce6:	f0 0d       	add	r31, r0
    4ce8:	65 9f       	mul	r22, r21
    4cea:	f0 0d       	add	r31, r0
    4cec:	99 27       	eor	r25, r25
    4cee:	72 9f       	mul	r23, r18
    4cf0:	b0 0d       	add	r27, r0
    4cf2:	e1 1d       	adc	r30, r1
    4cf4:	f9 1f       	adc	r31, r25
    4cf6:	63 9f       	mul	r22, r19
    4cf8:	b0 0d       	add	r27, r0
    4cfa:	e1 1d       	adc	r30, r1
    4cfc:	f9 1f       	adc	r31, r25
    4cfe:	bd 01       	movw	r22, r26
    4d00:	cf 01       	movw	r24, r30
    4d02:	11 24       	eor	r1, r1
    4d04:	08 95       	ret

00004d06 <__divmodsi4>:
    4d06:	97 fb       	bst	r25, 7
    4d08:	09 2e       	mov	r0, r25
    4d0a:	05 26       	eor	r0, r21
    4d0c:	0e d0       	rcall	.+28     	; 0x4d2a <__divmodsi4_neg1>
    4d0e:	57 fd       	sbrc	r21, 7
    4d10:	04 d0       	rcall	.+8      	; 0x4d1a <__divmodsi4_neg2>
    4d12:	14 d0       	rcall	.+40     	; 0x4d3c <__udivmodsi4>
    4d14:	0a d0       	rcall	.+20     	; 0x4d2a <__divmodsi4_neg1>
    4d16:	00 1c       	adc	r0, r0
    4d18:	38 f4       	brcc	.+14     	; 0x4d28 <__divmodsi4_exit>

00004d1a <__divmodsi4_neg2>:
    4d1a:	50 95       	com	r21
    4d1c:	40 95       	com	r20
    4d1e:	30 95       	com	r19
    4d20:	21 95       	neg	r18
    4d22:	3f 4f       	sbci	r19, 0xFF	; 255
    4d24:	4f 4f       	sbci	r20, 0xFF	; 255
    4d26:	5f 4f       	sbci	r21, 0xFF	; 255

00004d28 <__divmodsi4_exit>:
    4d28:	08 95       	ret

00004d2a <__divmodsi4_neg1>:
    4d2a:	f6 f7       	brtc	.-4      	; 0x4d28 <__divmodsi4_exit>
    4d2c:	90 95       	com	r25
    4d2e:	80 95       	com	r24
    4d30:	70 95       	com	r23
    4d32:	61 95       	neg	r22
    4d34:	7f 4f       	sbci	r23, 0xFF	; 255
    4d36:	8f 4f       	sbci	r24, 0xFF	; 255
    4d38:	9f 4f       	sbci	r25, 0xFF	; 255
    4d3a:	08 95       	ret

00004d3c <__udivmodsi4>:
    4d3c:	a1 e2       	ldi	r26, 0x21	; 33
    4d3e:	1a 2e       	mov	r1, r26
    4d40:	aa 1b       	sub	r26, r26
    4d42:	bb 1b       	sub	r27, r27
    4d44:	fd 01       	movw	r30, r26
    4d46:	0d c0       	rjmp	.+26     	; 0x4d62 <__udivmodsi4_ep>

00004d48 <__udivmodsi4_loop>:
    4d48:	aa 1f       	adc	r26, r26
    4d4a:	bb 1f       	adc	r27, r27
    4d4c:	ee 1f       	adc	r30, r30
    4d4e:	ff 1f       	adc	r31, r31
    4d50:	a2 17       	cp	r26, r18
    4d52:	b3 07       	cpc	r27, r19
    4d54:	e4 07       	cpc	r30, r20
    4d56:	f5 07       	cpc	r31, r21
    4d58:	20 f0       	brcs	.+8      	; 0x4d62 <__udivmodsi4_ep>
    4d5a:	a2 1b       	sub	r26, r18
    4d5c:	b3 0b       	sbc	r27, r19
    4d5e:	e4 0b       	sbc	r30, r20
    4d60:	f5 0b       	sbc	r31, r21

00004d62 <__udivmodsi4_ep>:
    4d62:	66 1f       	adc	r22, r22
    4d64:	77 1f       	adc	r23, r23
    4d66:	88 1f       	adc	r24, r24
    4d68:	99 1f       	adc	r25, r25
    4d6a:	1a 94       	dec	r1
    4d6c:	69 f7       	brne	.-38     	; 0x4d48 <__udivmodsi4_loop>
    4d6e:	60 95       	com	r22
    4d70:	70 95       	com	r23
    4d72:	80 95       	com	r24
    4d74:	90 95       	com	r25
    4d76:	9b 01       	movw	r18, r22
    4d78:	ac 01       	movw	r20, r24
    4d7a:	bd 01       	movw	r22, r26
    4d7c:	cf 01       	movw	r24, r30
    4d7e:	08 95       	ret

00004d80 <__prologue_saves__>:
    4d80:	2f 92       	push	r2
    4d82:	3f 92       	push	r3
    4d84:	4f 92       	push	r4
    4d86:	5f 92       	push	r5
    4d88:	6f 92       	push	r6
    4d8a:	7f 92       	push	r7
    4d8c:	8f 92       	push	r8
    4d8e:	9f 92       	push	r9
    4d90:	af 92       	push	r10
    4d92:	bf 92       	push	r11
    4d94:	cf 92       	push	r12
    4d96:	df 92       	push	r13
    4d98:	ef 92       	push	r14
    4d9a:	ff 92       	push	r15
    4d9c:	0f 93       	push	r16
    4d9e:	1f 93       	push	r17
    4da0:	cf 93       	push	r28
    4da2:	df 93       	push	r29
    4da4:	cd b7       	in	r28, 0x3d	; 61
    4da6:	de b7       	in	r29, 0x3e	; 62
    4da8:	ca 1b       	sub	r28, r26
    4daa:	db 0b       	sbc	r29, r27
    4dac:	0f b6       	in	r0, 0x3f	; 63
    4dae:	f8 94       	cli
    4db0:	de bf       	out	0x3e, r29	; 62
    4db2:	0f be       	out	0x3f, r0	; 63
    4db4:	cd bf       	out	0x3d, r28	; 61
    4db6:	09 94       	ijmp

00004db8 <__epilogue_restores__>:
    4db8:	2a 88       	ldd	r2, Y+18	; 0x12
    4dba:	39 88       	ldd	r3, Y+17	; 0x11
    4dbc:	48 88       	ldd	r4, Y+16	; 0x10
    4dbe:	5f 84       	ldd	r5, Y+15	; 0x0f
    4dc0:	6e 84       	ldd	r6, Y+14	; 0x0e
    4dc2:	7d 84       	ldd	r7, Y+13	; 0x0d
    4dc4:	8c 84       	ldd	r8, Y+12	; 0x0c
    4dc6:	9b 84       	ldd	r9, Y+11	; 0x0b
    4dc8:	aa 84       	ldd	r10, Y+10	; 0x0a
    4dca:	b9 84       	ldd	r11, Y+9	; 0x09
    4dcc:	c8 84       	ldd	r12, Y+8	; 0x08
    4dce:	df 80       	ldd	r13, Y+7	; 0x07
    4dd0:	ee 80       	ldd	r14, Y+6	; 0x06
    4dd2:	fd 80       	ldd	r15, Y+5	; 0x05
    4dd4:	0c 81       	ldd	r16, Y+4	; 0x04
    4dd6:	1b 81       	ldd	r17, Y+3	; 0x03
    4dd8:	aa 81       	ldd	r26, Y+2	; 0x02
    4dda:	b9 81       	ldd	r27, Y+1	; 0x01
    4ddc:	ce 0f       	add	r28, r30
    4dde:	d1 1d       	adc	r29, r1
    4de0:	0f b6       	in	r0, 0x3f	; 63
    4de2:	f8 94       	cli
    4de4:	de bf       	out	0x3e, r29	; 62
    4de6:	0f be       	out	0x3f, r0	; 63
    4de8:	cd bf       	out	0x3d, r28	; 61
    4dea:	ed 01       	movw	r28, r26
    4dec:	08 95       	ret

00004dee <_exit>:
    4dee:	f8 94       	cli

00004df0 <__stop_program>:
    4df0:	ff cf       	rjmp	.-2      	; 0x4df0 <__stop_program>
