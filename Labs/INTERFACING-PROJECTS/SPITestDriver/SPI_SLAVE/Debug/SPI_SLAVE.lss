
SPI_SLAVE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c9c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000003  00800060  00800060  00000d10  2**0
                  ALLOC
  2 .stab         00001278  00000000  00000000  00000d10  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c38  00000000  00000000  00001f88  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 93 05 	jmp	0xb26	; 0xb26 <__vector_12>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 36       	cpi	r26, 0x63	; 99
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 c6 05 	call	0xb8c	; 0xb8c <main>
  74:	0c 94 4c 06 	jmp	0xc98	; 0xc98 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_U8SetPinDirection>:

#include "DIO_Reg.h"
#include "DIO_Interface.h"

uint8 DIO_U8SetPinDirection	    (DIO_Port_t copy_Port,	 DIO_Pin_t copy_PinNum,		DIO_PinDir_t copy_Dir)
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
  84:	28 97       	sbiw	r28, 0x08	; 8
  86:	0f b6       	in	r0, 0x3f	; 63
  88:	f8 94       	cli
  8a:	de bf       	out	0x3e, r29	; 62
  8c:	0f be       	out	0x3f, r0	; 63
  8e:	cd bf       	out	0x3d, r28	; 61
  90:	8a 83       	std	Y+2, r24	; 0x02
  92:	6b 83       	std	Y+3, r22	; 0x03
  94:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK ;
  96:	19 82       	std	Y+1, r1	; 0x01
	if ( (copy_PinNum >= DIO_PIN0) && (copy_PinNum <= DIO_PIN7) )
  98:	8b 81       	ldd	r24, Y+3	; 0x03
  9a:	88 30       	cpi	r24, 0x08	; 8
  9c:	08 f0       	brcs	.+2      	; 0xa0 <DIO_U8SetPinDirection+0x24>
  9e:	f4 c0       	rjmp	.+488    	; 0x288 <DIO_U8SetPinDirection+0x20c>
	{
		if (copy_Dir==DIO_PIN_INPUT)
  a0:	8c 81       	ldd	r24, Y+4	; 0x04
  a2:	88 23       	and	r24, r24
  a4:	09 f0       	breq	.+2      	; 0xa8 <DIO_U8SetPinDirection+0x2c>
  a6:	77 c0       	rjmp	.+238    	; 0x196 <DIO_U8SetPinDirection+0x11a>
		{
			switch (copy_Port)
  a8:	8a 81       	ldd	r24, Y+2	; 0x02
  aa:	28 2f       	mov	r18, r24
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	38 87       	std	Y+8, r19	; 0x08
  b0:	2f 83       	std	Y+7, r18	; 0x07
  b2:	8f 81       	ldd	r24, Y+7	; 0x07
  b4:	98 85       	ldd	r25, Y+8	; 0x08
  b6:	81 30       	cpi	r24, 0x01	; 1
  b8:	91 05       	cpc	r25, r1
  ba:	59 f1       	breq	.+86     	; 0x112 <DIO_U8SetPinDirection+0x96>
  bc:	2f 81       	ldd	r18, Y+7	; 0x07
  be:	38 85       	ldd	r19, Y+8	; 0x08
  c0:	22 30       	cpi	r18, 0x02	; 2
  c2:	31 05       	cpc	r19, r1
  c4:	2c f4       	brge	.+10     	; 0xd0 <DIO_U8SetPinDirection+0x54>
  c6:	8f 81       	ldd	r24, Y+7	; 0x07
  c8:	98 85       	ldd	r25, Y+8	; 0x08
  ca:	00 97       	sbiw	r24, 0x00	; 0
  cc:	69 f0       	breq	.+26     	; 0xe8 <DIO_U8SetPinDirection+0x6c>
  ce:	60 c0       	rjmp	.+192    	; 0x190 <DIO_U8SetPinDirection+0x114>
  d0:	2f 81       	ldd	r18, Y+7	; 0x07
  d2:	38 85       	ldd	r19, Y+8	; 0x08
  d4:	22 30       	cpi	r18, 0x02	; 2
  d6:	31 05       	cpc	r19, r1
  d8:	89 f1       	breq	.+98     	; 0x13c <DIO_U8SetPinDirection+0xc0>
  da:	8f 81       	ldd	r24, Y+7	; 0x07
  dc:	98 85       	ldd	r25, Y+8	; 0x08
  de:	83 30       	cpi	r24, 0x03	; 3
  e0:	91 05       	cpc	r25, r1
  e2:	09 f4       	brne	.+2      	; 0xe6 <DIO_U8SetPinDirection+0x6a>
  e4:	40 c0       	rjmp	.+128    	; 0x166 <DIO_U8SetPinDirection+0xea>
  e6:	54 c0       	rjmp	.+168    	; 0x190 <DIO_U8SetPinDirection+0x114>
			{
			case DIO_PORTA : CLR_BIT(DDRA,copy_PinNum); break ;
  e8:	aa e3       	ldi	r26, 0x3A	; 58
  ea:	b0 e0       	ldi	r27, 0x00	; 0
  ec:	ea e3       	ldi	r30, 0x3A	; 58
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	48 2f       	mov	r20, r24
  f4:	8b 81       	ldd	r24, Y+3	; 0x03
  f6:	28 2f       	mov	r18, r24
  f8:	30 e0       	ldi	r19, 0x00	; 0
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	02 2e       	mov	r0, r18
 100:	02 c0       	rjmp	.+4      	; 0x106 <DIO_U8SetPinDirection+0x8a>
 102:	88 0f       	add	r24, r24
 104:	99 1f       	adc	r25, r25
 106:	0a 94       	dec	r0
 108:	e2 f7       	brpl	.-8      	; 0x102 <DIO_U8SetPinDirection+0x86>
 10a:	80 95       	com	r24
 10c:	84 23       	and	r24, r20
 10e:	8c 93       	st	X, r24
 110:	bd c0       	rjmp	.+378    	; 0x28c <DIO_U8SetPinDirection+0x210>
			case DIO_PORTB : CLR_BIT(DDRB,copy_PinNum); break ;
 112:	a7 e3       	ldi	r26, 0x37	; 55
 114:	b0 e0       	ldi	r27, 0x00	; 0
 116:	e7 e3       	ldi	r30, 0x37	; 55
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	80 81       	ld	r24, Z
 11c:	48 2f       	mov	r20, r24
 11e:	8b 81       	ldd	r24, Y+3	; 0x03
 120:	28 2f       	mov	r18, r24
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	02 2e       	mov	r0, r18
 12a:	02 c0       	rjmp	.+4      	; 0x130 <DIO_U8SetPinDirection+0xb4>
 12c:	88 0f       	add	r24, r24
 12e:	99 1f       	adc	r25, r25
 130:	0a 94       	dec	r0
 132:	e2 f7       	brpl	.-8      	; 0x12c <DIO_U8SetPinDirection+0xb0>
 134:	80 95       	com	r24
 136:	84 23       	and	r24, r20
 138:	8c 93       	st	X, r24
 13a:	a8 c0       	rjmp	.+336    	; 0x28c <DIO_U8SetPinDirection+0x210>
			case DIO_PORTC : CLR_BIT(DDRC,copy_PinNum); break ;
 13c:	a4 e3       	ldi	r26, 0x34	; 52
 13e:	b0 e0       	ldi	r27, 0x00	; 0
 140:	e4 e3       	ldi	r30, 0x34	; 52
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	80 81       	ld	r24, Z
 146:	48 2f       	mov	r20, r24
 148:	8b 81       	ldd	r24, Y+3	; 0x03
 14a:	28 2f       	mov	r18, r24
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	02 2e       	mov	r0, r18
 154:	02 c0       	rjmp	.+4      	; 0x15a <DIO_U8SetPinDirection+0xde>
 156:	88 0f       	add	r24, r24
 158:	99 1f       	adc	r25, r25
 15a:	0a 94       	dec	r0
 15c:	e2 f7       	brpl	.-8      	; 0x156 <DIO_U8SetPinDirection+0xda>
 15e:	80 95       	com	r24
 160:	84 23       	and	r24, r20
 162:	8c 93       	st	X, r24
 164:	93 c0       	rjmp	.+294    	; 0x28c <DIO_U8SetPinDirection+0x210>
			case DIO_PORTD : CLR_BIT(DDRD,copy_PinNum); break ;
 166:	a1 e3       	ldi	r26, 0x31	; 49
 168:	b0 e0       	ldi	r27, 0x00	; 0
 16a:	e1 e3       	ldi	r30, 0x31	; 49
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	80 81       	ld	r24, Z
 170:	48 2f       	mov	r20, r24
 172:	8b 81       	ldd	r24, Y+3	; 0x03
 174:	28 2f       	mov	r18, r24
 176:	30 e0       	ldi	r19, 0x00	; 0
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	02 2e       	mov	r0, r18
 17e:	02 c0       	rjmp	.+4      	; 0x184 <DIO_U8SetPinDirection+0x108>
 180:	88 0f       	add	r24, r24
 182:	99 1f       	adc	r25, r25
 184:	0a 94       	dec	r0
 186:	e2 f7       	brpl	.-8      	; 0x180 <DIO_U8SetPinDirection+0x104>
 188:	80 95       	com	r24
 18a:	84 23       	and	r24, r20
 18c:	8c 93       	st	X, r24
 18e:	7e c0       	rjmp	.+252    	; 0x28c <DIO_U8SetPinDirection+0x210>
			default : Local_u8ErrorState = NOK ; break ;
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	89 83       	std	Y+1, r24	; 0x01
 194:	7b c0       	rjmp	.+246    	; 0x28c <DIO_U8SetPinDirection+0x210>
			}
		}
		else if (copy_Dir==DIO_PIN_OUTPUT)
 196:	8c 81       	ldd	r24, Y+4	; 0x04
 198:	81 30       	cpi	r24, 0x01	; 1
 19a:	09 f0       	breq	.+2      	; 0x19e <DIO_U8SetPinDirection+0x122>
 19c:	72 c0       	rjmp	.+228    	; 0x282 <DIO_U8SetPinDirection+0x206>
		{
			switch (copy_Port)
 19e:	8a 81       	ldd	r24, Y+2	; 0x02
 1a0:	28 2f       	mov	r18, r24
 1a2:	30 e0       	ldi	r19, 0x00	; 0
 1a4:	3e 83       	std	Y+6, r19	; 0x06
 1a6:	2d 83       	std	Y+5, r18	; 0x05
 1a8:	8d 81       	ldd	r24, Y+5	; 0x05
 1aa:	9e 81       	ldd	r25, Y+6	; 0x06
 1ac:	81 30       	cpi	r24, 0x01	; 1
 1ae:	91 05       	cpc	r25, r1
 1b0:	49 f1       	breq	.+82     	; 0x204 <DIO_U8SetPinDirection+0x188>
 1b2:	2d 81       	ldd	r18, Y+5	; 0x05
 1b4:	3e 81       	ldd	r19, Y+6	; 0x06
 1b6:	22 30       	cpi	r18, 0x02	; 2
 1b8:	31 05       	cpc	r19, r1
 1ba:	2c f4       	brge	.+10     	; 0x1c6 <DIO_U8SetPinDirection+0x14a>
 1bc:	8d 81       	ldd	r24, Y+5	; 0x05
 1be:	9e 81       	ldd	r25, Y+6	; 0x06
 1c0:	00 97       	sbiw	r24, 0x00	; 0
 1c2:	61 f0       	breq	.+24     	; 0x1dc <DIO_U8SetPinDirection+0x160>
 1c4:	5b c0       	rjmp	.+182    	; 0x27c <DIO_U8SetPinDirection+0x200>
 1c6:	2d 81       	ldd	r18, Y+5	; 0x05
 1c8:	3e 81       	ldd	r19, Y+6	; 0x06
 1ca:	22 30       	cpi	r18, 0x02	; 2
 1cc:	31 05       	cpc	r19, r1
 1ce:	71 f1       	breq	.+92     	; 0x22c <DIO_U8SetPinDirection+0x1b0>
 1d0:	8d 81       	ldd	r24, Y+5	; 0x05
 1d2:	9e 81       	ldd	r25, Y+6	; 0x06
 1d4:	83 30       	cpi	r24, 0x03	; 3
 1d6:	91 05       	cpc	r25, r1
 1d8:	e9 f1       	breq	.+122    	; 0x254 <DIO_U8SetPinDirection+0x1d8>
 1da:	50 c0       	rjmp	.+160    	; 0x27c <DIO_U8SetPinDirection+0x200>
			{
			case DIO_PORTA : SET_BIT(DDRA,copy_PinNum); break ;
 1dc:	aa e3       	ldi	r26, 0x3A	; 58
 1de:	b0 e0       	ldi	r27, 0x00	; 0
 1e0:	ea e3       	ldi	r30, 0x3A	; 58
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	80 81       	ld	r24, Z
 1e6:	48 2f       	mov	r20, r24
 1e8:	8b 81       	ldd	r24, Y+3	; 0x03
 1ea:	28 2f       	mov	r18, r24
 1ec:	30 e0       	ldi	r19, 0x00	; 0
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	02 2e       	mov	r0, r18
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <DIO_U8SetPinDirection+0x17e>
 1f6:	88 0f       	add	r24, r24
 1f8:	99 1f       	adc	r25, r25
 1fa:	0a 94       	dec	r0
 1fc:	e2 f7       	brpl	.-8      	; 0x1f6 <DIO_U8SetPinDirection+0x17a>
 1fe:	84 2b       	or	r24, r20
 200:	8c 93       	st	X, r24
 202:	44 c0       	rjmp	.+136    	; 0x28c <DIO_U8SetPinDirection+0x210>
			case DIO_PORTB : SET_BIT(DDRB,copy_PinNum); break ;
 204:	a7 e3       	ldi	r26, 0x37	; 55
 206:	b0 e0       	ldi	r27, 0x00	; 0
 208:	e7 e3       	ldi	r30, 0x37	; 55
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	80 81       	ld	r24, Z
 20e:	48 2f       	mov	r20, r24
 210:	8b 81       	ldd	r24, Y+3	; 0x03
 212:	28 2f       	mov	r18, r24
 214:	30 e0       	ldi	r19, 0x00	; 0
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	02 2e       	mov	r0, r18
 21c:	02 c0       	rjmp	.+4      	; 0x222 <DIO_U8SetPinDirection+0x1a6>
 21e:	88 0f       	add	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	0a 94       	dec	r0
 224:	e2 f7       	brpl	.-8      	; 0x21e <DIO_U8SetPinDirection+0x1a2>
 226:	84 2b       	or	r24, r20
 228:	8c 93       	st	X, r24
 22a:	30 c0       	rjmp	.+96     	; 0x28c <DIO_U8SetPinDirection+0x210>
			case DIO_PORTC : SET_BIT(DDRC,copy_PinNum); break ;
 22c:	a4 e3       	ldi	r26, 0x34	; 52
 22e:	b0 e0       	ldi	r27, 0x00	; 0
 230:	e4 e3       	ldi	r30, 0x34	; 52
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	80 81       	ld	r24, Z
 236:	48 2f       	mov	r20, r24
 238:	8b 81       	ldd	r24, Y+3	; 0x03
 23a:	28 2f       	mov	r18, r24
 23c:	30 e0       	ldi	r19, 0x00	; 0
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	02 2e       	mov	r0, r18
 244:	02 c0       	rjmp	.+4      	; 0x24a <DIO_U8SetPinDirection+0x1ce>
 246:	88 0f       	add	r24, r24
 248:	99 1f       	adc	r25, r25
 24a:	0a 94       	dec	r0
 24c:	e2 f7       	brpl	.-8      	; 0x246 <DIO_U8SetPinDirection+0x1ca>
 24e:	84 2b       	or	r24, r20
 250:	8c 93       	st	X, r24
 252:	1c c0       	rjmp	.+56     	; 0x28c <DIO_U8SetPinDirection+0x210>
			case DIO_PORTD : SET_BIT(DDRD,copy_PinNum); break ;
 254:	a1 e3       	ldi	r26, 0x31	; 49
 256:	b0 e0       	ldi	r27, 0x00	; 0
 258:	e1 e3       	ldi	r30, 0x31	; 49
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	80 81       	ld	r24, Z
 25e:	48 2f       	mov	r20, r24
 260:	8b 81       	ldd	r24, Y+3	; 0x03
 262:	28 2f       	mov	r18, r24
 264:	30 e0       	ldi	r19, 0x00	; 0
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	02 2e       	mov	r0, r18
 26c:	02 c0       	rjmp	.+4      	; 0x272 <DIO_U8SetPinDirection+0x1f6>
 26e:	88 0f       	add	r24, r24
 270:	99 1f       	adc	r25, r25
 272:	0a 94       	dec	r0
 274:	e2 f7       	brpl	.-8      	; 0x26e <DIO_U8SetPinDirection+0x1f2>
 276:	84 2b       	or	r24, r20
 278:	8c 93       	st	X, r24
 27a:	08 c0       	rjmp	.+16     	; 0x28c <DIO_U8SetPinDirection+0x210>
			default : Local_u8ErrorState = NOK ; break ;
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	89 83       	std	Y+1, r24	; 0x01
 280:	05 c0       	rjmp	.+10     	; 0x28c <DIO_U8SetPinDirection+0x210>
			}
		}
		else
		{
			Local_u8ErrorState = NOK ;
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	89 83       	std	Y+1, r24	; 0x01
 286:	02 c0       	rjmp	.+4      	; 0x28c <DIO_U8SetPinDirection+0x210>
		}
	}
	else
	{
		Local_u8ErrorState = NOK ;
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
 28c:	89 81       	ldd	r24, Y+1	; 0x01
}
 28e:	28 96       	adiw	r28, 0x08	; 8
 290:	0f b6       	in	r0, 0x3f	; 63
 292:	f8 94       	cli
 294:	de bf       	out	0x3e, r29	; 62
 296:	0f be       	out	0x3f, r0	; 63
 298:	cd bf       	out	0x3d, r28	; 61
 29a:	cf 91       	pop	r28
 29c:	df 91       	pop	r29
 29e:	08 95       	ret

000002a0 <DIO_U8SetPortDirection>:
uint8 DIO_U8SetPortDirection	(DIO_Port_t copy_Port,	 uint8 copy_u8PortDir)
{
 2a0:	df 93       	push	r29
 2a2:	cf 93       	push	r28
 2a4:	00 d0       	rcall	.+0      	; 0x2a6 <DIO_U8SetPortDirection+0x6>
 2a6:	00 d0       	rcall	.+0      	; 0x2a8 <DIO_U8SetPortDirection+0x8>
 2a8:	0f 92       	push	r0
 2aa:	cd b7       	in	r28, 0x3d	; 61
 2ac:	de b7       	in	r29, 0x3e	; 62
 2ae:	8a 83       	std	Y+2, r24	; 0x02
 2b0:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK ;
 2b2:	19 82       	std	Y+1, r1	; 0x01
	switch (copy_Port)
 2b4:	8a 81       	ldd	r24, Y+2	; 0x02
 2b6:	28 2f       	mov	r18, r24
 2b8:	30 e0       	ldi	r19, 0x00	; 0
 2ba:	3d 83       	std	Y+5, r19	; 0x05
 2bc:	2c 83       	std	Y+4, r18	; 0x04
 2be:	8c 81       	ldd	r24, Y+4	; 0x04
 2c0:	9d 81       	ldd	r25, Y+5	; 0x05
 2c2:	81 30       	cpi	r24, 0x01	; 1
 2c4:	91 05       	cpc	r25, r1
 2c6:	d1 f0       	breq	.+52     	; 0x2fc <DIO_U8SetPortDirection+0x5c>
 2c8:	2c 81       	ldd	r18, Y+4	; 0x04
 2ca:	3d 81       	ldd	r19, Y+5	; 0x05
 2cc:	22 30       	cpi	r18, 0x02	; 2
 2ce:	31 05       	cpc	r19, r1
 2d0:	2c f4       	brge	.+10     	; 0x2dc <DIO_U8SetPortDirection+0x3c>
 2d2:	8c 81       	ldd	r24, Y+4	; 0x04
 2d4:	9d 81       	ldd	r25, Y+5	; 0x05
 2d6:	00 97       	sbiw	r24, 0x00	; 0
 2d8:	61 f0       	breq	.+24     	; 0x2f2 <DIO_U8SetPortDirection+0x52>
 2da:	1f c0       	rjmp	.+62     	; 0x31a <DIO_U8SetPortDirection+0x7a>
 2dc:	2c 81       	ldd	r18, Y+4	; 0x04
 2de:	3d 81       	ldd	r19, Y+5	; 0x05
 2e0:	22 30       	cpi	r18, 0x02	; 2
 2e2:	31 05       	cpc	r19, r1
 2e4:	81 f0       	breq	.+32     	; 0x306 <DIO_U8SetPortDirection+0x66>
 2e6:	8c 81       	ldd	r24, Y+4	; 0x04
 2e8:	9d 81       	ldd	r25, Y+5	; 0x05
 2ea:	83 30       	cpi	r24, 0x03	; 3
 2ec:	91 05       	cpc	r25, r1
 2ee:	81 f0       	breq	.+32     	; 0x310 <DIO_U8SetPortDirection+0x70>
 2f0:	14 c0       	rjmp	.+40     	; 0x31a <DIO_U8SetPortDirection+0x7a>
	{
	case DIO_PORTA : DDRA = copy_u8PortDir ; break ;
 2f2:	ea e3       	ldi	r30, 0x3A	; 58
 2f4:	f0 e0       	ldi	r31, 0x00	; 0
 2f6:	8b 81       	ldd	r24, Y+3	; 0x03
 2f8:	80 83       	st	Z, r24
 2fa:	11 c0       	rjmp	.+34     	; 0x31e <DIO_U8SetPortDirection+0x7e>
	case DIO_PORTB : DDRB = copy_u8PortDir ; break ;
 2fc:	e7 e3       	ldi	r30, 0x37	; 55
 2fe:	f0 e0       	ldi	r31, 0x00	; 0
 300:	8b 81       	ldd	r24, Y+3	; 0x03
 302:	80 83       	st	Z, r24
 304:	0c c0       	rjmp	.+24     	; 0x31e <DIO_U8SetPortDirection+0x7e>
	case DIO_PORTC : DDRC = copy_u8PortDir ; break ;
 306:	e4 e3       	ldi	r30, 0x34	; 52
 308:	f0 e0       	ldi	r31, 0x00	; 0
 30a:	8b 81       	ldd	r24, Y+3	; 0x03
 30c:	80 83       	st	Z, r24
 30e:	07 c0       	rjmp	.+14     	; 0x31e <DIO_U8SetPortDirection+0x7e>
	case DIO_PORTD : DDRD = copy_u8PortDir ; break ;
 310:	e1 e3       	ldi	r30, 0x31	; 49
 312:	f0 e0       	ldi	r31, 0x00	; 0
 314:	8b 81       	ldd	r24, Y+3	; 0x03
 316:	80 83       	st	Z, r24
 318:	02 c0       	rjmp	.+4      	; 0x31e <DIO_U8SetPortDirection+0x7e>
	default : Local_u8ErrorState = NOK     ; break ;
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
 31e:	89 81       	ldd	r24, Y+1	; 0x01
}
 320:	0f 90       	pop	r0
 322:	0f 90       	pop	r0
 324:	0f 90       	pop	r0
 326:	0f 90       	pop	r0
 328:	0f 90       	pop	r0
 32a:	cf 91       	pop	r28
 32c:	df 91       	pop	r29
 32e:	08 95       	ret

00000330 <DIO_U8SetPinValue>:

uint8 DIO_U8SetPinValue	        (DIO_Port_t copy_Port,	 DIO_Pin_t copy_PinNum,		DIO_PinVal_t copy_Val)
{
 330:	df 93       	push	r29
 332:	cf 93       	push	r28
 334:	cd b7       	in	r28, 0x3d	; 61
 336:	de b7       	in	r29, 0x3e	; 62
 338:	28 97       	sbiw	r28, 0x08	; 8
 33a:	0f b6       	in	r0, 0x3f	; 63
 33c:	f8 94       	cli
 33e:	de bf       	out	0x3e, r29	; 62
 340:	0f be       	out	0x3f, r0	; 63
 342:	cd bf       	out	0x3d, r28	; 61
 344:	8a 83       	std	Y+2, r24	; 0x02
 346:	6b 83       	std	Y+3, r22	; 0x03
 348:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK ;
 34a:	19 82       	std	Y+1, r1	; 0x01
	if ( (copy_PinNum >= DIO_PIN0) && (copy_PinNum <= DIO_PIN7) )
 34c:	8b 81       	ldd	r24, Y+3	; 0x03
 34e:	88 30       	cpi	r24, 0x08	; 8
 350:	08 f0       	brcs	.+2      	; 0x354 <DIO_U8SetPinValue+0x24>
 352:	f4 c0       	rjmp	.+488    	; 0x53c <DIO_U8SetPinValue+0x20c>
	{
		if (copy_Val==DIO_PIN_LOW)
 354:	8c 81       	ldd	r24, Y+4	; 0x04
 356:	88 23       	and	r24, r24
 358:	09 f0       	breq	.+2      	; 0x35c <DIO_U8SetPinValue+0x2c>
 35a:	77 c0       	rjmp	.+238    	; 0x44a <DIO_U8SetPinValue+0x11a>
		{
			switch (copy_Port)
 35c:	8a 81       	ldd	r24, Y+2	; 0x02
 35e:	28 2f       	mov	r18, r24
 360:	30 e0       	ldi	r19, 0x00	; 0
 362:	38 87       	std	Y+8, r19	; 0x08
 364:	2f 83       	std	Y+7, r18	; 0x07
 366:	8f 81       	ldd	r24, Y+7	; 0x07
 368:	98 85       	ldd	r25, Y+8	; 0x08
 36a:	81 30       	cpi	r24, 0x01	; 1
 36c:	91 05       	cpc	r25, r1
 36e:	59 f1       	breq	.+86     	; 0x3c6 <DIO_U8SetPinValue+0x96>
 370:	2f 81       	ldd	r18, Y+7	; 0x07
 372:	38 85       	ldd	r19, Y+8	; 0x08
 374:	22 30       	cpi	r18, 0x02	; 2
 376:	31 05       	cpc	r19, r1
 378:	2c f4       	brge	.+10     	; 0x384 <DIO_U8SetPinValue+0x54>
 37a:	8f 81       	ldd	r24, Y+7	; 0x07
 37c:	98 85       	ldd	r25, Y+8	; 0x08
 37e:	00 97       	sbiw	r24, 0x00	; 0
 380:	69 f0       	breq	.+26     	; 0x39c <DIO_U8SetPinValue+0x6c>
 382:	60 c0       	rjmp	.+192    	; 0x444 <DIO_U8SetPinValue+0x114>
 384:	2f 81       	ldd	r18, Y+7	; 0x07
 386:	38 85       	ldd	r19, Y+8	; 0x08
 388:	22 30       	cpi	r18, 0x02	; 2
 38a:	31 05       	cpc	r19, r1
 38c:	89 f1       	breq	.+98     	; 0x3f0 <DIO_U8SetPinValue+0xc0>
 38e:	8f 81       	ldd	r24, Y+7	; 0x07
 390:	98 85       	ldd	r25, Y+8	; 0x08
 392:	83 30       	cpi	r24, 0x03	; 3
 394:	91 05       	cpc	r25, r1
 396:	09 f4       	brne	.+2      	; 0x39a <DIO_U8SetPinValue+0x6a>
 398:	40 c0       	rjmp	.+128    	; 0x41a <DIO_U8SetPinValue+0xea>
 39a:	54 c0       	rjmp	.+168    	; 0x444 <DIO_U8SetPinValue+0x114>
			{
			case DIO_PORTA : CLR_BIT(PORTA,copy_PinNum); break ;
 39c:	ab e3       	ldi	r26, 0x3B	; 59
 39e:	b0 e0       	ldi	r27, 0x00	; 0
 3a0:	eb e3       	ldi	r30, 0x3B	; 59
 3a2:	f0 e0       	ldi	r31, 0x00	; 0
 3a4:	80 81       	ld	r24, Z
 3a6:	48 2f       	mov	r20, r24
 3a8:	8b 81       	ldd	r24, Y+3	; 0x03
 3aa:	28 2f       	mov	r18, r24
 3ac:	30 e0       	ldi	r19, 0x00	; 0
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	02 2e       	mov	r0, r18
 3b4:	02 c0       	rjmp	.+4      	; 0x3ba <DIO_U8SetPinValue+0x8a>
 3b6:	88 0f       	add	r24, r24
 3b8:	99 1f       	adc	r25, r25
 3ba:	0a 94       	dec	r0
 3bc:	e2 f7       	brpl	.-8      	; 0x3b6 <DIO_U8SetPinValue+0x86>
 3be:	80 95       	com	r24
 3c0:	84 23       	and	r24, r20
 3c2:	8c 93       	st	X, r24
 3c4:	bd c0       	rjmp	.+378    	; 0x540 <DIO_U8SetPinValue+0x210>
			case DIO_PORTB : CLR_BIT(PORTB,copy_PinNum); break ;
 3c6:	a8 e3       	ldi	r26, 0x38	; 56
 3c8:	b0 e0       	ldi	r27, 0x00	; 0
 3ca:	e8 e3       	ldi	r30, 0x38	; 56
 3cc:	f0 e0       	ldi	r31, 0x00	; 0
 3ce:	80 81       	ld	r24, Z
 3d0:	48 2f       	mov	r20, r24
 3d2:	8b 81       	ldd	r24, Y+3	; 0x03
 3d4:	28 2f       	mov	r18, r24
 3d6:	30 e0       	ldi	r19, 0x00	; 0
 3d8:	81 e0       	ldi	r24, 0x01	; 1
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	02 2e       	mov	r0, r18
 3de:	02 c0       	rjmp	.+4      	; 0x3e4 <DIO_U8SetPinValue+0xb4>
 3e0:	88 0f       	add	r24, r24
 3e2:	99 1f       	adc	r25, r25
 3e4:	0a 94       	dec	r0
 3e6:	e2 f7       	brpl	.-8      	; 0x3e0 <DIO_U8SetPinValue+0xb0>
 3e8:	80 95       	com	r24
 3ea:	84 23       	and	r24, r20
 3ec:	8c 93       	st	X, r24
 3ee:	a8 c0       	rjmp	.+336    	; 0x540 <DIO_U8SetPinValue+0x210>
			case DIO_PORTC : CLR_BIT(PORTC,copy_PinNum); break ;
 3f0:	a5 e3       	ldi	r26, 0x35	; 53
 3f2:	b0 e0       	ldi	r27, 0x00	; 0
 3f4:	e5 e3       	ldi	r30, 0x35	; 53
 3f6:	f0 e0       	ldi	r31, 0x00	; 0
 3f8:	80 81       	ld	r24, Z
 3fa:	48 2f       	mov	r20, r24
 3fc:	8b 81       	ldd	r24, Y+3	; 0x03
 3fe:	28 2f       	mov	r18, r24
 400:	30 e0       	ldi	r19, 0x00	; 0
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	02 2e       	mov	r0, r18
 408:	02 c0       	rjmp	.+4      	; 0x40e <DIO_U8SetPinValue+0xde>
 40a:	88 0f       	add	r24, r24
 40c:	99 1f       	adc	r25, r25
 40e:	0a 94       	dec	r0
 410:	e2 f7       	brpl	.-8      	; 0x40a <DIO_U8SetPinValue+0xda>
 412:	80 95       	com	r24
 414:	84 23       	and	r24, r20
 416:	8c 93       	st	X, r24
 418:	93 c0       	rjmp	.+294    	; 0x540 <DIO_U8SetPinValue+0x210>
			case DIO_PORTD : CLR_BIT(PORTD,copy_PinNum); break ;
 41a:	a2 e3       	ldi	r26, 0x32	; 50
 41c:	b0 e0       	ldi	r27, 0x00	; 0
 41e:	e2 e3       	ldi	r30, 0x32	; 50
 420:	f0 e0       	ldi	r31, 0x00	; 0
 422:	80 81       	ld	r24, Z
 424:	48 2f       	mov	r20, r24
 426:	8b 81       	ldd	r24, Y+3	; 0x03
 428:	28 2f       	mov	r18, r24
 42a:	30 e0       	ldi	r19, 0x00	; 0
 42c:	81 e0       	ldi	r24, 0x01	; 1
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	02 2e       	mov	r0, r18
 432:	02 c0       	rjmp	.+4      	; 0x438 <DIO_U8SetPinValue+0x108>
 434:	88 0f       	add	r24, r24
 436:	99 1f       	adc	r25, r25
 438:	0a 94       	dec	r0
 43a:	e2 f7       	brpl	.-8      	; 0x434 <DIO_U8SetPinValue+0x104>
 43c:	80 95       	com	r24
 43e:	84 23       	and	r24, r20
 440:	8c 93       	st	X, r24
 442:	7e c0       	rjmp	.+252    	; 0x540 <DIO_U8SetPinValue+0x210>
			default : Local_u8ErrorState = NOK ; break ;
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	89 83       	std	Y+1, r24	; 0x01
 448:	7b c0       	rjmp	.+246    	; 0x540 <DIO_U8SetPinValue+0x210>
			}
		}
		else if (copy_Val==DIO_PIN_HIGH)
 44a:	8c 81       	ldd	r24, Y+4	; 0x04
 44c:	81 30       	cpi	r24, 0x01	; 1
 44e:	09 f0       	breq	.+2      	; 0x452 <DIO_U8SetPinValue+0x122>
 450:	72 c0       	rjmp	.+228    	; 0x536 <DIO_U8SetPinValue+0x206>
		{
			switch (copy_Port)
 452:	8a 81       	ldd	r24, Y+2	; 0x02
 454:	28 2f       	mov	r18, r24
 456:	30 e0       	ldi	r19, 0x00	; 0
 458:	3e 83       	std	Y+6, r19	; 0x06
 45a:	2d 83       	std	Y+5, r18	; 0x05
 45c:	8d 81       	ldd	r24, Y+5	; 0x05
 45e:	9e 81       	ldd	r25, Y+6	; 0x06
 460:	81 30       	cpi	r24, 0x01	; 1
 462:	91 05       	cpc	r25, r1
 464:	49 f1       	breq	.+82     	; 0x4b8 <DIO_U8SetPinValue+0x188>
 466:	2d 81       	ldd	r18, Y+5	; 0x05
 468:	3e 81       	ldd	r19, Y+6	; 0x06
 46a:	22 30       	cpi	r18, 0x02	; 2
 46c:	31 05       	cpc	r19, r1
 46e:	2c f4       	brge	.+10     	; 0x47a <DIO_U8SetPinValue+0x14a>
 470:	8d 81       	ldd	r24, Y+5	; 0x05
 472:	9e 81       	ldd	r25, Y+6	; 0x06
 474:	00 97       	sbiw	r24, 0x00	; 0
 476:	61 f0       	breq	.+24     	; 0x490 <DIO_U8SetPinValue+0x160>
 478:	5b c0       	rjmp	.+182    	; 0x530 <DIO_U8SetPinValue+0x200>
 47a:	2d 81       	ldd	r18, Y+5	; 0x05
 47c:	3e 81       	ldd	r19, Y+6	; 0x06
 47e:	22 30       	cpi	r18, 0x02	; 2
 480:	31 05       	cpc	r19, r1
 482:	71 f1       	breq	.+92     	; 0x4e0 <DIO_U8SetPinValue+0x1b0>
 484:	8d 81       	ldd	r24, Y+5	; 0x05
 486:	9e 81       	ldd	r25, Y+6	; 0x06
 488:	83 30       	cpi	r24, 0x03	; 3
 48a:	91 05       	cpc	r25, r1
 48c:	e9 f1       	breq	.+122    	; 0x508 <DIO_U8SetPinValue+0x1d8>
 48e:	50 c0       	rjmp	.+160    	; 0x530 <DIO_U8SetPinValue+0x200>
			{
			case DIO_PORTA : SET_BIT(PORTA,copy_PinNum); break ;
 490:	ab e3       	ldi	r26, 0x3B	; 59
 492:	b0 e0       	ldi	r27, 0x00	; 0
 494:	eb e3       	ldi	r30, 0x3B	; 59
 496:	f0 e0       	ldi	r31, 0x00	; 0
 498:	80 81       	ld	r24, Z
 49a:	48 2f       	mov	r20, r24
 49c:	8b 81       	ldd	r24, Y+3	; 0x03
 49e:	28 2f       	mov	r18, r24
 4a0:	30 e0       	ldi	r19, 0x00	; 0
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	02 2e       	mov	r0, r18
 4a8:	02 c0       	rjmp	.+4      	; 0x4ae <DIO_U8SetPinValue+0x17e>
 4aa:	88 0f       	add	r24, r24
 4ac:	99 1f       	adc	r25, r25
 4ae:	0a 94       	dec	r0
 4b0:	e2 f7       	brpl	.-8      	; 0x4aa <DIO_U8SetPinValue+0x17a>
 4b2:	84 2b       	or	r24, r20
 4b4:	8c 93       	st	X, r24
 4b6:	44 c0       	rjmp	.+136    	; 0x540 <DIO_U8SetPinValue+0x210>
			case DIO_PORTB : SET_BIT(PORTB,copy_PinNum); break ;
 4b8:	a8 e3       	ldi	r26, 0x38	; 56
 4ba:	b0 e0       	ldi	r27, 0x00	; 0
 4bc:	e8 e3       	ldi	r30, 0x38	; 56
 4be:	f0 e0       	ldi	r31, 0x00	; 0
 4c0:	80 81       	ld	r24, Z
 4c2:	48 2f       	mov	r20, r24
 4c4:	8b 81       	ldd	r24, Y+3	; 0x03
 4c6:	28 2f       	mov	r18, r24
 4c8:	30 e0       	ldi	r19, 0x00	; 0
 4ca:	81 e0       	ldi	r24, 0x01	; 1
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	02 2e       	mov	r0, r18
 4d0:	02 c0       	rjmp	.+4      	; 0x4d6 <DIO_U8SetPinValue+0x1a6>
 4d2:	88 0f       	add	r24, r24
 4d4:	99 1f       	adc	r25, r25
 4d6:	0a 94       	dec	r0
 4d8:	e2 f7       	brpl	.-8      	; 0x4d2 <DIO_U8SetPinValue+0x1a2>
 4da:	84 2b       	or	r24, r20
 4dc:	8c 93       	st	X, r24
 4de:	30 c0       	rjmp	.+96     	; 0x540 <DIO_U8SetPinValue+0x210>
			case DIO_PORTC : SET_BIT(PORTC,copy_PinNum); break ;
 4e0:	a5 e3       	ldi	r26, 0x35	; 53
 4e2:	b0 e0       	ldi	r27, 0x00	; 0
 4e4:	e5 e3       	ldi	r30, 0x35	; 53
 4e6:	f0 e0       	ldi	r31, 0x00	; 0
 4e8:	80 81       	ld	r24, Z
 4ea:	48 2f       	mov	r20, r24
 4ec:	8b 81       	ldd	r24, Y+3	; 0x03
 4ee:	28 2f       	mov	r18, r24
 4f0:	30 e0       	ldi	r19, 0x00	; 0
 4f2:	81 e0       	ldi	r24, 0x01	; 1
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	02 2e       	mov	r0, r18
 4f8:	02 c0       	rjmp	.+4      	; 0x4fe <DIO_U8SetPinValue+0x1ce>
 4fa:	88 0f       	add	r24, r24
 4fc:	99 1f       	adc	r25, r25
 4fe:	0a 94       	dec	r0
 500:	e2 f7       	brpl	.-8      	; 0x4fa <DIO_U8SetPinValue+0x1ca>
 502:	84 2b       	or	r24, r20
 504:	8c 93       	st	X, r24
 506:	1c c0       	rjmp	.+56     	; 0x540 <DIO_U8SetPinValue+0x210>
			case DIO_PORTD : SET_BIT(PORTD,copy_PinNum); break ;
 508:	a2 e3       	ldi	r26, 0x32	; 50
 50a:	b0 e0       	ldi	r27, 0x00	; 0
 50c:	e2 e3       	ldi	r30, 0x32	; 50
 50e:	f0 e0       	ldi	r31, 0x00	; 0
 510:	80 81       	ld	r24, Z
 512:	48 2f       	mov	r20, r24
 514:	8b 81       	ldd	r24, Y+3	; 0x03
 516:	28 2f       	mov	r18, r24
 518:	30 e0       	ldi	r19, 0x00	; 0
 51a:	81 e0       	ldi	r24, 0x01	; 1
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	02 2e       	mov	r0, r18
 520:	02 c0       	rjmp	.+4      	; 0x526 <DIO_U8SetPinValue+0x1f6>
 522:	88 0f       	add	r24, r24
 524:	99 1f       	adc	r25, r25
 526:	0a 94       	dec	r0
 528:	e2 f7       	brpl	.-8      	; 0x522 <DIO_U8SetPinValue+0x1f2>
 52a:	84 2b       	or	r24, r20
 52c:	8c 93       	st	X, r24
 52e:	08 c0       	rjmp	.+16     	; 0x540 <DIO_U8SetPinValue+0x210>
			default : Local_u8ErrorState = NOK ; break ;
 530:	81 e0       	ldi	r24, 0x01	; 1
 532:	89 83       	std	Y+1, r24	; 0x01
 534:	05 c0       	rjmp	.+10     	; 0x540 <DIO_U8SetPinValue+0x210>
			}
		}
		else
		{
			Local_u8ErrorState = NOK ;
 536:	81 e0       	ldi	r24, 0x01	; 1
 538:	89 83       	std	Y+1, r24	; 0x01
 53a:	02 c0       	rjmp	.+4      	; 0x540 <DIO_U8SetPinValue+0x210>
		}
	}
	else
	{
		Local_u8ErrorState = NOK ;
 53c:	81 e0       	ldi	r24, 0x01	; 1
 53e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
 540:	89 81       	ldd	r24, Y+1	; 0x01
}
 542:	28 96       	adiw	r28, 0x08	; 8
 544:	0f b6       	in	r0, 0x3f	; 63
 546:	f8 94       	cli
 548:	de bf       	out	0x3e, r29	; 62
 54a:	0f be       	out	0x3f, r0	; 63
 54c:	cd bf       	out	0x3d, r28	; 61
 54e:	cf 91       	pop	r28
 550:	df 91       	pop	r29
 552:	08 95       	ret

00000554 <DIO_U8SetPortValue>:
uint8 DIO_U8SetPortValue    	(DIO_Port_t copy_Port,	 uint8 copy_u8PortVal)
{
 554:	df 93       	push	r29
 556:	cf 93       	push	r28
 558:	00 d0       	rcall	.+0      	; 0x55a <DIO_U8SetPortValue+0x6>
 55a:	00 d0       	rcall	.+0      	; 0x55c <DIO_U8SetPortValue+0x8>
 55c:	0f 92       	push	r0
 55e:	cd b7       	in	r28, 0x3d	; 61
 560:	de b7       	in	r29, 0x3e	; 62
 562:	8a 83       	std	Y+2, r24	; 0x02
 564:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK ;
 566:	19 82       	std	Y+1, r1	; 0x01
	switch (copy_Port)
 568:	8a 81       	ldd	r24, Y+2	; 0x02
 56a:	28 2f       	mov	r18, r24
 56c:	30 e0       	ldi	r19, 0x00	; 0
 56e:	3d 83       	std	Y+5, r19	; 0x05
 570:	2c 83       	std	Y+4, r18	; 0x04
 572:	8c 81       	ldd	r24, Y+4	; 0x04
 574:	9d 81       	ldd	r25, Y+5	; 0x05
 576:	81 30       	cpi	r24, 0x01	; 1
 578:	91 05       	cpc	r25, r1
 57a:	d1 f0       	breq	.+52     	; 0x5b0 <DIO_U8SetPortValue+0x5c>
 57c:	2c 81       	ldd	r18, Y+4	; 0x04
 57e:	3d 81       	ldd	r19, Y+5	; 0x05
 580:	22 30       	cpi	r18, 0x02	; 2
 582:	31 05       	cpc	r19, r1
 584:	2c f4       	brge	.+10     	; 0x590 <DIO_U8SetPortValue+0x3c>
 586:	8c 81       	ldd	r24, Y+4	; 0x04
 588:	9d 81       	ldd	r25, Y+5	; 0x05
 58a:	00 97       	sbiw	r24, 0x00	; 0
 58c:	61 f0       	breq	.+24     	; 0x5a6 <DIO_U8SetPortValue+0x52>
 58e:	1f c0       	rjmp	.+62     	; 0x5ce <DIO_U8SetPortValue+0x7a>
 590:	2c 81       	ldd	r18, Y+4	; 0x04
 592:	3d 81       	ldd	r19, Y+5	; 0x05
 594:	22 30       	cpi	r18, 0x02	; 2
 596:	31 05       	cpc	r19, r1
 598:	81 f0       	breq	.+32     	; 0x5ba <DIO_U8SetPortValue+0x66>
 59a:	8c 81       	ldd	r24, Y+4	; 0x04
 59c:	9d 81       	ldd	r25, Y+5	; 0x05
 59e:	83 30       	cpi	r24, 0x03	; 3
 5a0:	91 05       	cpc	r25, r1
 5a2:	81 f0       	breq	.+32     	; 0x5c4 <DIO_U8SetPortValue+0x70>
 5a4:	14 c0       	rjmp	.+40     	; 0x5ce <DIO_U8SetPortValue+0x7a>
	{
	case DIO_PORTA : PORTA = copy_u8PortVal ; break ;
 5a6:	eb e3       	ldi	r30, 0x3B	; 59
 5a8:	f0 e0       	ldi	r31, 0x00	; 0
 5aa:	8b 81       	ldd	r24, Y+3	; 0x03
 5ac:	80 83       	st	Z, r24
 5ae:	11 c0       	rjmp	.+34     	; 0x5d2 <DIO_U8SetPortValue+0x7e>
	case DIO_PORTB : PORTB = copy_u8PortVal ; break ;
 5b0:	e8 e3       	ldi	r30, 0x38	; 56
 5b2:	f0 e0       	ldi	r31, 0x00	; 0
 5b4:	8b 81       	ldd	r24, Y+3	; 0x03
 5b6:	80 83       	st	Z, r24
 5b8:	0c c0       	rjmp	.+24     	; 0x5d2 <DIO_U8SetPortValue+0x7e>
	case DIO_PORTC : PORTC = copy_u8PortVal ; break ;
 5ba:	e5 e3       	ldi	r30, 0x35	; 53
 5bc:	f0 e0       	ldi	r31, 0x00	; 0
 5be:	8b 81       	ldd	r24, Y+3	; 0x03
 5c0:	80 83       	st	Z, r24
 5c2:	07 c0       	rjmp	.+14     	; 0x5d2 <DIO_U8SetPortValue+0x7e>
	case DIO_PORTD : PORTD = copy_u8PortVal ; break ;
 5c4:	e2 e3       	ldi	r30, 0x32	; 50
 5c6:	f0 e0       	ldi	r31, 0x00	; 0
 5c8:	8b 81       	ldd	r24, Y+3	; 0x03
 5ca:	80 83       	st	Z, r24
 5cc:	02 c0       	rjmp	.+4      	; 0x5d2 <DIO_U8SetPortValue+0x7e>
	default : Local_u8ErrorState = NOK      ; break ;
 5ce:	81 e0       	ldi	r24, 0x01	; 1
 5d0:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
 5d2:	89 81       	ldd	r24, Y+1	; 0x01
}
 5d4:	0f 90       	pop	r0
 5d6:	0f 90       	pop	r0
 5d8:	0f 90       	pop	r0
 5da:	0f 90       	pop	r0
 5dc:	0f 90       	pop	r0
 5de:	cf 91       	pop	r28
 5e0:	df 91       	pop	r29
 5e2:	08 95       	ret

000005e4 <DIO_u8GetPinValue>:

uint8 DIO_u8GetPinValue 		(DIO_Port_t copy_port,   DIO_Pin_t copy_PinNum, 	DIO_PinVal_t* copy_pVal )
{
 5e4:	df 93       	push	r29
 5e6:	cf 93       	push	r28
 5e8:	cd b7       	in	r28, 0x3d	; 61
 5ea:	de b7       	in	r29, 0x3e	; 62
 5ec:	27 97       	sbiw	r28, 0x07	; 7
 5ee:	0f b6       	in	r0, 0x3f	; 63
 5f0:	f8 94       	cli
 5f2:	de bf       	out	0x3e, r29	; 62
 5f4:	0f be       	out	0x3f, r0	; 63
 5f6:	cd bf       	out	0x3d, r28	; 61
 5f8:	8a 83       	std	Y+2, r24	; 0x02
 5fa:	6b 83       	std	Y+3, r22	; 0x03
 5fc:	5d 83       	std	Y+5, r21	; 0x05
 5fe:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK ;
 600:	19 82       	std	Y+1, r1	; 0x01
	if (copy_pVal != NULL)
 602:	8c 81       	ldd	r24, Y+4	; 0x04
 604:	9d 81       	ldd	r25, Y+5	; 0x05
 606:	00 97       	sbiw	r24, 0x00	; 0
 608:	09 f4       	brne	.+2      	; 0x60c <DIO_u8GetPinValue+0x28>
 60a:	7b c0       	rjmp	.+246    	; 0x702 <DIO_u8GetPinValue+0x11e>
	{
		if ( (copy_PinNum >= DIO_PIN0) && (copy_PinNum <= DIO_PIN7) )
 60c:	8b 81       	ldd	r24, Y+3	; 0x03
 60e:	88 30       	cpi	r24, 0x08	; 8
 610:	08 f0       	brcs	.+2      	; 0x614 <DIO_u8GetPinValue+0x30>
 612:	74 c0       	rjmp	.+232    	; 0x6fc <DIO_u8GetPinValue+0x118>
		{
			switch (copy_port)
 614:	8a 81       	ldd	r24, Y+2	; 0x02
 616:	28 2f       	mov	r18, r24
 618:	30 e0       	ldi	r19, 0x00	; 0
 61a:	3f 83       	std	Y+7, r19	; 0x07
 61c:	2e 83       	std	Y+6, r18	; 0x06
 61e:	4e 81       	ldd	r20, Y+6	; 0x06
 620:	5f 81       	ldd	r21, Y+7	; 0x07
 622:	41 30       	cpi	r20, 0x01	; 1
 624:	51 05       	cpc	r21, r1
 626:	59 f1       	breq	.+86     	; 0x67e <DIO_u8GetPinValue+0x9a>
 628:	8e 81       	ldd	r24, Y+6	; 0x06
 62a:	9f 81       	ldd	r25, Y+7	; 0x07
 62c:	82 30       	cpi	r24, 0x02	; 2
 62e:	91 05       	cpc	r25, r1
 630:	34 f4       	brge	.+12     	; 0x63e <DIO_u8GetPinValue+0x5a>
 632:	2e 81       	ldd	r18, Y+6	; 0x06
 634:	3f 81       	ldd	r19, Y+7	; 0x07
 636:	21 15       	cp	r18, r1
 638:	31 05       	cpc	r19, r1
 63a:	69 f0       	breq	.+26     	; 0x656 <DIO_u8GetPinValue+0x72>
 63c:	5c c0       	rjmp	.+184    	; 0x6f6 <DIO_u8GetPinValue+0x112>
 63e:	4e 81       	ldd	r20, Y+6	; 0x06
 640:	5f 81       	ldd	r21, Y+7	; 0x07
 642:	42 30       	cpi	r20, 0x02	; 2
 644:	51 05       	cpc	r21, r1
 646:	79 f1       	breq	.+94     	; 0x6a6 <DIO_u8GetPinValue+0xc2>
 648:	8e 81       	ldd	r24, Y+6	; 0x06
 64a:	9f 81       	ldd	r25, Y+7	; 0x07
 64c:	83 30       	cpi	r24, 0x03	; 3
 64e:	91 05       	cpc	r25, r1
 650:	09 f4       	brne	.+2      	; 0x654 <DIO_u8GetPinValue+0x70>
 652:	3d c0       	rjmp	.+122    	; 0x6ce <DIO_u8GetPinValue+0xea>
 654:	50 c0       	rjmp	.+160    	; 0x6f6 <DIO_u8GetPinValue+0x112>
			{
			case DIO_PORTA : *copy_pVal = GET_BIT(PINA , copy_PinNum) ; break ;
 656:	e9 e3       	ldi	r30, 0x39	; 57
 658:	f0 e0       	ldi	r31, 0x00	; 0
 65a:	80 81       	ld	r24, Z
 65c:	28 2f       	mov	r18, r24
 65e:	30 e0       	ldi	r19, 0x00	; 0
 660:	8b 81       	ldd	r24, Y+3	; 0x03
 662:	88 2f       	mov	r24, r24
 664:	90 e0       	ldi	r25, 0x00	; 0
 666:	a9 01       	movw	r20, r18
 668:	02 c0       	rjmp	.+4      	; 0x66e <DIO_u8GetPinValue+0x8a>
 66a:	55 95       	asr	r21
 66c:	47 95       	ror	r20
 66e:	8a 95       	dec	r24
 670:	e2 f7       	brpl	.-8      	; 0x66a <DIO_u8GetPinValue+0x86>
 672:	ca 01       	movw	r24, r20
 674:	81 70       	andi	r24, 0x01	; 1
 676:	ec 81       	ldd	r30, Y+4	; 0x04
 678:	fd 81       	ldd	r31, Y+5	; 0x05
 67a:	80 83       	st	Z, r24
 67c:	44 c0       	rjmp	.+136    	; 0x706 <DIO_u8GetPinValue+0x122>
			case DIO_PORTB : *copy_pVal = GET_BIT(PINB , copy_PinNum) ; break ;
 67e:	e6 e3       	ldi	r30, 0x36	; 54
 680:	f0 e0       	ldi	r31, 0x00	; 0
 682:	80 81       	ld	r24, Z
 684:	28 2f       	mov	r18, r24
 686:	30 e0       	ldi	r19, 0x00	; 0
 688:	8b 81       	ldd	r24, Y+3	; 0x03
 68a:	88 2f       	mov	r24, r24
 68c:	90 e0       	ldi	r25, 0x00	; 0
 68e:	a9 01       	movw	r20, r18
 690:	02 c0       	rjmp	.+4      	; 0x696 <DIO_u8GetPinValue+0xb2>
 692:	55 95       	asr	r21
 694:	47 95       	ror	r20
 696:	8a 95       	dec	r24
 698:	e2 f7       	brpl	.-8      	; 0x692 <DIO_u8GetPinValue+0xae>
 69a:	ca 01       	movw	r24, r20
 69c:	81 70       	andi	r24, 0x01	; 1
 69e:	ec 81       	ldd	r30, Y+4	; 0x04
 6a0:	fd 81       	ldd	r31, Y+5	; 0x05
 6a2:	80 83       	st	Z, r24
 6a4:	30 c0       	rjmp	.+96     	; 0x706 <DIO_u8GetPinValue+0x122>
			case DIO_PORTC : *copy_pVal = GET_BIT(PINC , copy_PinNum) ; break ;
 6a6:	e3 e3       	ldi	r30, 0x33	; 51
 6a8:	f0 e0       	ldi	r31, 0x00	; 0
 6aa:	80 81       	ld	r24, Z
 6ac:	28 2f       	mov	r18, r24
 6ae:	30 e0       	ldi	r19, 0x00	; 0
 6b0:	8b 81       	ldd	r24, Y+3	; 0x03
 6b2:	88 2f       	mov	r24, r24
 6b4:	90 e0       	ldi	r25, 0x00	; 0
 6b6:	a9 01       	movw	r20, r18
 6b8:	02 c0       	rjmp	.+4      	; 0x6be <DIO_u8GetPinValue+0xda>
 6ba:	55 95       	asr	r21
 6bc:	47 95       	ror	r20
 6be:	8a 95       	dec	r24
 6c0:	e2 f7       	brpl	.-8      	; 0x6ba <DIO_u8GetPinValue+0xd6>
 6c2:	ca 01       	movw	r24, r20
 6c4:	81 70       	andi	r24, 0x01	; 1
 6c6:	ec 81       	ldd	r30, Y+4	; 0x04
 6c8:	fd 81       	ldd	r31, Y+5	; 0x05
 6ca:	80 83       	st	Z, r24
 6cc:	1c c0       	rjmp	.+56     	; 0x706 <DIO_u8GetPinValue+0x122>
			case DIO_PORTD : *copy_pVal = GET_BIT(PIND , copy_PinNum) ; break ;
 6ce:	e0 e3       	ldi	r30, 0x30	; 48
 6d0:	f0 e0       	ldi	r31, 0x00	; 0
 6d2:	80 81       	ld	r24, Z
 6d4:	28 2f       	mov	r18, r24
 6d6:	30 e0       	ldi	r19, 0x00	; 0
 6d8:	8b 81       	ldd	r24, Y+3	; 0x03
 6da:	88 2f       	mov	r24, r24
 6dc:	90 e0       	ldi	r25, 0x00	; 0
 6de:	a9 01       	movw	r20, r18
 6e0:	02 c0       	rjmp	.+4      	; 0x6e6 <DIO_u8GetPinValue+0x102>
 6e2:	55 95       	asr	r21
 6e4:	47 95       	ror	r20
 6e6:	8a 95       	dec	r24
 6e8:	e2 f7       	brpl	.-8      	; 0x6e2 <DIO_u8GetPinValue+0xfe>
 6ea:	ca 01       	movw	r24, r20
 6ec:	81 70       	andi	r24, 0x01	; 1
 6ee:	ec 81       	ldd	r30, Y+4	; 0x04
 6f0:	fd 81       	ldd	r31, Y+5	; 0x05
 6f2:	80 83       	st	Z, r24
 6f4:	08 c0       	rjmp	.+16     	; 0x706 <DIO_u8GetPinValue+0x122>
			default : Local_u8ErrorState = NOK ; break ;
 6f6:	81 e0       	ldi	r24, 0x01	; 1
 6f8:	89 83       	std	Y+1, r24	; 0x01
 6fa:	05 c0       	rjmp	.+10     	; 0x706 <DIO_u8GetPinValue+0x122>
			}
		}
		else
		{
			Local_u8ErrorState = NOK ;
 6fc:	81 e0       	ldi	r24, 0x01	; 1
 6fe:	89 83       	std	Y+1, r24	; 0x01
 700:	02 c0       	rjmp	.+4      	; 0x706 <DIO_u8GetPinValue+0x122>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR ;
 702:	82 e0       	ldi	r24, 0x02	; 2
 704:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
 706:	89 81       	ldd	r24, Y+1	; 0x01
}
 708:	27 96       	adiw	r28, 0x07	; 7
 70a:	0f b6       	in	r0, 0x3f	; 63
 70c:	f8 94       	cli
 70e:	de bf       	out	0x3e, r29	; 62
 710:	0f be       	out	0x3f, r0	; 63
 712:	cd bf       	out	0x3d, r28	; 61
 714:	cf 91       	pop	r28
 716:	df 91       	pop	r29
 718:	08 95       	ret

0000071a <DIO_u8TogglePinValue>:

uint8 DIO_u8TogglePinValue		(DIO_Port_t copy_Port,	 DIO_Pin_t copy_PinNum)
{
 71a:	df 93       	push	r29
 71c:	cf 93       	push	r28
 71e:	00 d0       	rcall	.+0      	; 0x720 <DIO_u8TogglePinValue+0x6>
 720:	00 d0       	rcall	.+0      	; 0x722 <DIO_u8TogglePinValue+0x8>
 722:	0f 92       	push	r0
 724:	cd b7       	in	r28, 0x3d	; 61
 726:	de b7       	in	r29, 0x3e	; 62
 728:	8a 83       	std	Y+2, r24	; 0x02
 72a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK ;
 72c:	19 82       	std	Y+1, r1	; 0x01
	if ( (copy_PinNum >= DIO_PIN0 ) && (copy_PinNum <= DIO_PIN7 ) )
 72e:	8b 81       	ldd	r24, Y+3	; 0x03
 730:	88 30       	cpi	r24, 0x08	; 8
 732:	08 f0       	brcs	.+2      	; 0x736 <DIO_u8TogglePinValue+0x1c>
 734:	72 c0       	rjmp	.+228    	; 0x81a <DIO_u8TogglePinValue+0x100>
	{
		switch (copy_Port)
 736:	8a 81       	ldd	r24, Y+2	; 0x02
 738:	28 2f       	mov	r18, r24
 73a:	30 e0       	ldi	r19, 0x00	; 0
 73c:	3d 83       	std	Y+5, r19	; 0x05
 73e:	2c 83       	std	Y+4, r18	; 0x04
 740:	8c 81       	ldd	r24, Y+4	; 0x04
 742:	9d 81       	ldd	r25, Y+5	; 0x05
 744:	81 30       	cpi	r24, 0x01	; 1
 746:	91 05       	cpc	r25, r1
 748:	49 f1       	breq	.+82     	; 0x79c <DIO_u8TogglePinValue+0x82>
 74a:	2c 81       	ldd	r18, Y+4	; 0x04
 74c:	3d 81       	ldd	r19, Y+5	; 0x05
 74e:	22 30       	cpi	r18, 0x02	; 2
 750:	31 05       	cpc	r19, r1
 752:	2c f4       	brge	.+10     	; 0x75e <DIO_u8TogglePinValue+0x44>
 754:	8c 81       	ldd	r24, Y+4	; 0x04
 756:	9d 81       	ldd	r25, Y+5	; 0x05
 758:	00 97       	sbiw	r24, 0x00	; 0
 75a:	61 f0       	breq	.+24     	; 0x774 <DIO_u8TogglePinValue+0x5a>
 75c:	5b c0       	rjmp	.+182    	; 0x814 <DIO_u8TogglePinValue+0xfa>
 75e:	2c 81       	ldd	r18, Y+4	; 0x04
 760:	3d 81       	ldd	r19, Y+5	; 0x05
 762:	22 30       	cpi	r18, 0x02	; 2
 764:	31 05       	cpc	r19, r1
 766:	71 f1       	breq	.+92     	; 0x7c4 <DIO_u8TogglePinValue+0xaa>
 768:	8c 81       	ldd	r24, Y+4	; 0x04
 76a:	9d 81       	ldd	r25, Y+5	; 0x05
 76c:	83 30       	cpi	r24, 0x03	; 3
 76e:	91 05       	cpc	r25, r1
 770:	e9 f1       	breq	.+122    	; 0x7ec <DIO_u8TogglePinValue+0xd2>
 772:	50 c0       	rjmp	.+160    	; 0x814 <DIO_u8TogglePinValue+0xfa>
					{
					case DIO_PORTA : TOG_BIT(PORTA,copy_PinNum); break ;
 774:	ab e3       	ldi	r26, 0x3B	; 59
 776:	b0 e0       	ldi	r27, 0x00	; 0
 778:	eb e3       	ldi	r30, 0x3B	; 59
 77a:	f0 e0       	ldi	r31, 0x00	; 0
 77c:	80 81       	ld	r24, Z
 77e:	48 2f       	mov	r20, r24
 780:	8b 81       	ldd	r24, Y+3	; 0x03
 782:	28 2f       	mov	r18, r24
 784:	30 e0       	ldi	r19, 0x00	; 0
 786:	81 e0       	ldi	r24, 0x01	; 1
 788:	90 e0       	ldi	r25, 0x00	; 0
 78a:	02 2e       	mov	r0, r18
 78c:	02 c0       	rjmp	.+4      	; 0x792 <DIO_u8TogglePinValue+0x78>
 78e:	88 0f       	add	r24, r24
 790:	99 1f       	adc	r25, r25
 792:	0a 94       	dec	r0
 794:	e2 f7       	brpl	.-8      	; 0x78e <DIO_u8TogglePinValue+0x74>
 796:	84 27       	eor	r24, r20
 798:	8c 93       	st	X, r24
 79a:	41 c0       	rjmp	.+130    	; 0x81e <DIO_u8TogglePinValue+0x104>
					case DIO_PORTB : TOG_BIT(PORTB,copy_PinNum); break ;
 79c:	a8 e3       	ldi	r26, 0x38	; 56
 79e:	b0 e0       	ldi	r27, 0x00	; 0
 7a0:	e8 e3       	ldi	r30, 0x38	; 56
 7a2:	f0 e0       	ldi	r31, 0x00	; 0
 7a4:	80 81       	ld	r24, Z
 7a6:	48 2f       	mov	r20, r24
 7a8:	8b 81       	ldd	r24, Y+3	; 0x03
 7aa:	28 2f       	mov	r18, r24
 7ac:	30 e0       	ldi	r19, 0x00	; 0
 7ae:	81 e0       	ldi	r24, 0x01	; 1
 7b0:	90 e0       	ldi	r25, 0x00	; 0
 7b2:	02 2e       	mov	r0, r18
 7b4:	02 c0       	rjmp	.+4      	; 0x7ba <DIO_u8TogglePinValue+0xa0>
 7b6:	88 0f       	add	r24, r24
 7b8:	99 1f       	adc	r25, r25
 7ba:	0a 94       	dec	r0
 7bc:	e2 f7       	brpl	.-8      	; 0x7b6 <DIO_u8TogglePinValue+0x9c>
 7be:	84 27       	eor	r24, r20
 7c0:	8c 93       	st	X, r24
 7c2:	2d c0       	rjmp	.+90     	; 0x81e <DIO_u8TogglePinValue+0x104>
					case DIO_PORTC : TOG_BIT(PORTC,copy_PinNum); break ;
 7c4:	a5 e3       	ldi	r26, 0x35	; 53
 7c6:	b0 e0       	ldi	r27, 0x00	; 0
 7c8:	e5 e3       	ldi	r30, 0x35	; 53
 7ca:	f0 e0       	ldi	r31, 0x00	; 0
 7cc:	80 81       	ld	r24, Z
 7ce:	48 2f       	mov	r20, r24
 7d0:	8b 81       	ldd	r24, Y+3	; 0x03
 7d2:	28 2f       	mov	r18, r24
 7d4:	30 e0       	ldi	r19, 0x00	; 0
 7d6:	81 e0       	ldi	r24, 0x01	; 1
 7d8:	90 e0       	ldi	r25, 0x00	; 0
 7da:	02 2e       	mov	r0, r18
 7dc:	02 c0       	rjmp	.+4      	; 0x7e2 <DIO_u8TogglePinValue+0xc8>
 7de:	88 0f       	add	r24, r24
 7e0:	99 1f       	adc	r25, r25
 7e2:	0a 94       	dec	r0
 7e4:	e2 f7       	brpl	.-8      	; 0x7de <DIO_u8TogglePinValue+0xc4>
 7e6:	84 27       	eor	r24, r20
 7e8:	8c 93       	st	X, r24
 7ea:	19 c0       	rjmp	.+50     	; 0x81e <DIO_u8TogglePinValue+0x104>
					case DIO_PORTD : TOG_BIT(PORTD,copy_PinNum); break ;
 7ec:	a2 e3       	ldi	r26, 0x32	; 50
 7ee:	b0 e0       	ldi	r27, 0x00	; 0
 7f0:	e2 e3       	ldi	r30, 0x32	; 50
 7f2:	f0 e0       	ldi	r31, 0x00	; 0
 7f4:	80 81       	ld	r24, Z
 7f6:	48 2f       	mov	r20, r24
 7f8:	8b 81       	ldd	r24, Y+3	; 0x03
 7fa:	28 2f       	mov	r18, r24
 7fc:	30 e0       	ldi	r19, 0x00	; 0
 7fe:	81 e0       	ldi	r24, 0x01	; 1
 800:	90 e0       	ldi	r25, 0x00	; 0
 802:	02 2e       	mov	r0, r18
 804:	02 c0       	rjmp	.+4      	; 0x80a <DIO_u8TogglePinValue+0xf0>
 806:	88 0f       	add	r24, r24
 808:	99 1f       	adc	r25, r25
 80a:	0a 94       	dec	r0
 80c:	e2 f7       	brpl	.-8      	; 0x806 <DIO_u8TogglePinValue+0xec>
 80e:	84 27       	eor	r24, r20
 810:	8c 93       	st	X, r24
 812:	05 c0       	rjmp	.+10     	; 0x81e <DIO_u8TogglePinValue+0x104>
					default : Local_u8ErrorState = NOK ; 		 break ;
 814:	81 e0       	ldi	r24, 0x01	; 1
 816:	89 83       	std	Y+1, r24	; 0x01
 818:	02 c0       	rjmp	.+4      	; 0x81e <DIO_u8TogglePinValue+0x104>
					}
	}
	else
	{
		Local_u8ErrorState = NOK ;
 81a:	81 e0       	ldi	r24, 0x01	; 1
 81c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState ;
 81e:	89 81       	ldd	r24, Y+1	; 0x01
}
 820:	0f 90       	pop	r0
 822:	0f 90       	pop	r0
 824:	0f 90       	pop	r0
 826:	0f 90       	pop	r0
 828:	0f 90       	pop	r0
 82a:	cf 91       	pop	r28
 82c:	df 91       	pop	r29
 82e:	08 95       	ret

00000830 <GIE_voidEnableGlobal>:

#include "GIE_Interface.h"
#include "GIE_Reg.h"

	void GIE_voidEnableGlobal  ( void ) 
	{
 830:	df 93       	push	r29
 832:	cf 93       	push	r28
 834:	cd b7       	in	r28, 0x3d	; 61
 836:	de b7       	in	r29, 0x3e	; 62
		__asm volatile ("SEI"); 						// ASSEMBLY INSTRUCTION
 838:	78 94       	sei
		/* SET_BIT ( SREG , SREG_I ); ANOTHER WAY WITHOUT USING ASSEMBLY LANGUAGE*/
	}
 83a:	cf 91       	pop	r28
 83c:	df 91       	pop	r29
 83e:	08 95       	ret

00000840 <GIE_voidDisableGlobal>:
	
	void GIE_voidDisableGlobal ( void ) 
	{
 840:	df 93       	push	r29
 842:	cf 93       	push	r28
 844:	cd b7       	in	r28, 0x3d	; 61
 846:	de b7       	in	r29, 0x3e	; 62
		__asm volatile ("CLI"); 
 848:	f8 94       	cli
		/* CLR_BIT ( SREG , SREG_I ); ANOTHER WAY WITHOUT USING ASSEMBLY LANGUAGE*/
 84a:	cf 91       	pop	r28
 84c:	df 91       	pop	r29
 84e:	08 95       	ret

00000850 <MAP>:
#include "STD_TYPES.h"
#include "MAP.h"

sint32 MAP ( sint32 InputRangeMin , sint32 InputRangeMax ,  sint32 OutputRangeMin , sint32 OutPutRangeMax , sint32 InputValue )
{
 850:	af 92       	push	r10
 852:	bf 92       	push	r11
 854:	cf 92       	push	r12
 856:	df 92       	push	r13
 858:	ef 92       	push	r14
 85a:	ff 92       	push	r15
 85c:	0f 93       	push	r16
 85e:	1f 93       	push	r17
 860:	df 93       	push	r29
 862:	cf 93       	push	r28
 864:	cd b7       	in	r28, 0x3d	; 61
 866:	de b7       	in	r29, 0x3e	; 62
 868:	68 97       	sbiw	r28, 0x18	; 24
 86a:	0f b6       	in	r0, 0x3f	; 63
 86c:	f8 94       	cli
 86e:	de bf       	out	0x3e, r29	; 62
 870:	0f be       	out	0x3f, r0	; 63
 872:	cd bf       	out	0x3d, r28	; 61
 874:	69 87       	std	Y+9, r22	; 0x09
 876:	7a 87       	std	Y+10, r23	; 0x0a
 878:	8b 87       	std	Y+11, r24	; 0x0b
 87a:	9c 87       	std	Y+12, r25	; 0x0c
 87c:	2d 87       	std	Y+13, r18	; 0x0d
 87e:	3e 87       	std	Y+14, r19	; 0x0e
 880:	4f 87       	std	Y+15, r20	; 0x0f
 882:	58 8b       	std	Y+16, r21	; 0x10
 884:	e9 8a       	std	Y+17, r14	; 0x11
 886:	fa 8a       	std	Y+18, r15	; 0x12
 888:	0b 8b       	std	Y+19, r16	; 0x13
 88a:	1c 8b       	std	Y+20, r17	; 0x14
 88c:	ad 8a       	std	Y+21, r10	; 0x15
 88e:	be 8a       	std	Y+22, r11	; 0x16
 890:	cf 8a       	std	Y+23, r12	; 0x17
 892:	d8 8e       	std	Y+24, r13	; 0x18
	sint32 Ratio ; 
	sint32 OutputValue ; 
	
										/* Calculate the ratio of the input value in the input range */
										
    Ratio = ((InputValue - InputRangeMin) * 100u ) / (InputRangeMax - InputRangeMin) ; 
 894:	2d a1       	ldd	r18, Y+37	; 0x25
 896:	3e a1       	ldd	r19, Y+38	; 0x26
 898:	4f a1       	ldd	r20, Y+39	; 0x27
 89a:	58 a5       	ldd	r21, Y+40	; 0x28
 89c:	89 85       	ldd	r24, Y+9	; 0x09
 89e:	9a 85       	ldd	r25, Y+10	; 0x0a
 8a0:	ab 85       	ldd	r26, Y+11	; 0x0b
 8a2:	bc 85       	ldd	r27, Y+12	; 0x0c
 8a4:	79 01       	movw	r14, r18
 8a6:	8a 01       	movw	r16, r20
 8a8:	e8 1a       	sub	r14, r24
 8aa:	f9 0a       	sbc	r15, r25
 8ac:	0a 0b       	sbc	r16, r26
 8ae:	1b 0b       	sbc	r17, r27
 8b0:	d8 01       	movw	r26, r16
 8b2:	c7 01       	movw	r24, r14
 8b4:	24 e6       	ldi	r18, 0x64	; 100
 8b6:	30 e0       	ldi	r19, 0x00	; 0
 8b8:	40 e0       	ldi	r20, 0x00	; 0
 8ba:	50 e0       	ldi	r21, 0x00	; 0
 8bc:	bc 01       	movw	r22, r24
 8be:	cd 01       	movw	r24, r26
 8c0:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <__mulsi3>
 8c4:	7b 01       	movw	r14, r22
 8c6:	8c 01       	movw	r16, r24
 8c8:	2d 85       	ldd	r18, Y+13	; 0x0d
 8ca:	3e 85       	ldd	r19, Y+14	; 0x0e
 8cc:	4f 85       	ldd	r20, Y+15	; 0x0f
 8ce:	58 89       	ldd	r21, Y+16	; 0x10
 8d0:	89 85       	ldd	r24, Y+9	; 0x09
 8d2:	9a 85       	ldd	r25, Y+10	; 0x0a
 8d4:	ab 85       	ldd	r26, Y+11	; 0x0b
 8d6:	bc 85       	ldd	r27, Y+12	; 0x0c
 8d8:	28 1b       	sub	r18, r24
 8da:	39 0b       	sbc	r19, r25
 8dc:	4a 0b       	sbc	r20, r26
 8de:	5b 0b       	sbc	r21, r27
 8e0:	c8 01       	movw	r24, r16
 8e2:	b7 01       	movw	r22, r14
 8e4:	0e 94 0f 06 	call	0xc1e	; 0xc1e <__divmodsi4>
 8e8:	da 01       	movw	r26, r20
 8ea:	c9 01       	movw	r24, r18
 8ec:	8d 83       	std	Y+5, r24	; 0x05
 8ee:	9e 83       	std	Y+6, r25	; 0x06
 8f0:	af 83       	std	Y+7, r26	; 0x07
 8f2:	b8 87       	std	Y+8, r27	; 0x08
    
										/* Map the ratio to the output range */
										
    OutputValue = ( ( Ratio * (OutPutRangeMax - OutputRangeMin)) / 100u ) + OutputRangeMin ; 
 8f4:	2d 89       	ldd	r18, Y+21	; 0x15
 8f6:	3e 89       	ldd	r19, Y+22	; 0x16
 8f8:	4f 89       	ldd	r20, Y+23	; 0x17
 8fa:	58 8d       	ldd	r21, Y+24	; 0x18
 8fc:	89 89       	ldd	r24, Y+17	; 0x11
 8fe:	9a 89       	ldd	r25, Y+18	; 0x12
 900:	ab 89       	ldd	r26, Y+19	; 0x13
 902:	bc 89       	ldd	r27, Y+20	; 0x14
 904:	79 01       	movw	r14, r18
 906:	8a 01       	movw	r16, r20
 908:	e8 1a       	sub	r14, r24
 90a:	f9 0a       	sbc	r15, r25
 90c:	0a 0b       	sbc	r16, r26
 90e:	1b 0b       	sbc	r17, r27
 910:	d8 01       	movw	r26, r16
 912:	c7 01       	movw	r24, r14
 914:	2d 81       	ldd	r18, Y+5	; 0x05
 916:	3e 81       	ldd	r19, Y+6	; 0x06
 918:	4f 81       	ldd	r20, Y+7	; 0x07
 91a:	58 85       	ldd	r21, Y+8	; 0x08
 91c:	bc 01       	movw	r22, r24
 91e:	cd 01       	movw	r24, r26
 920:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <__mulsi3>
 924:	dc 01       	movw	r26, r24
 926:	cb 01       	movw	r24, r22
 928:	24 e6       	ldi	r18, 0x64	; 100
 92a:	30 e0       	ldi	r19, 0x00	; 0
 92c:	40 e0       	ldi	r20, 0x00	; 0
 92e:	50 e0       	ldi	r21, 0x00	; 0
 930:	bc 01       	movw	r22, r24
 932:	cd 01       	movw	r24, r26
 934:	0e 94 0f 06 	call	0xc1e	; 0xc1e <__divmodsi4>
 938:	da 01       	movw	r26, r20
 93a:	c9 01       	movw	r24, r18
 93c:	9c 01       	movw	r18, r24
 93e:	ad 01       	movw	r20, r26
 940:	89 89       	ldd	r24, Y+17	; 0x11
 942:	9a 89       	ldd	r25, Y+18	; 0x12
 944:	ab 89       	ldd	r26, Y+19	; 0x13
 946:	bc 89       	ldd	r27, Y+20	; 0x14
 948:	82 0f       	add	r24, r18
 94a:	93 1f       	adc	r25, r19
 94c:	a4 1f       	adc	r26, r20
 94e:	b5 1f       	adc	r27, r21
 950:	89 83       	std	Y+1, r24	; 0x01
 952:	9a 83       	std	Y+2, r25	; 0x02
 954:	ab 83       	std	Y+3, r26	; 0x03
 956:	bc 83       	std	Y+4, r27	; 0x04
	
										/* Return the output value */
	
    return OutputValue ; 
 958:	89 81       	ldd	r24, Y+1	; 0x01
 95a:	9a 81       	ldd	r25, Y+2	; 0x02
 95c:	ab 81       	ldd	r26, Y+3	; 0x03
 95e:	bc 81       	ldd	r27, Y+4	; 0x04
 960:	bc 01       	movw	r22, r24
 962:	cd 01       	movw	r24, r26
 964:	68 96       	adiw	r28, 0x18	; 24
 966:	0f b6       	in	r0, 0x3f	; 63
 968:	f8 94       	cli
 96a:	de bf       	out	0x3e, r29	; 62
 96c:	0f be       	out	0x3f, r0	; 63
 96e:	cd bf       	out	0x3d, r28	; 61
 970:	cf 91       	pop	r28
 972:	df 91       	pop	r29
 974:	1f 91       	pop	r17
 976:	0f 91       	pop	r16
 978:	ff 90       	pop	r15
 97a:	ef 90       	pop	r14
 97c:	df 90       	pop	r13
 97e:	cf 90       	pop	r12
 980:	bf 90       	pop	r11
 982:	af 90       	pop	r10
 984:	08 95       	ret

00000986 <PORT_voidInit>:
#include "PORT_Prv.h"
#include "PORT_Reg.h"
#include "PORT_Interface.h"

	void PORT_voidInit ( void ) 
	{
 986:	df 93       	push	r29
 988:	cf 93       	push	r28
 98a:	cd b7       	in	r28, 0x3d	; 61
 98c:	de b7       	in	r29, 0x3e	; 62
		DDRA  = PORTA_DIR     ; 
 98e:	ea e3       	ldi	r30, 0x3A	; 58
 990:	f0 e0       	ldi	r31, 0x00	; 0
 992:	10 82       	st	Z, r1
		DDRB  = PORTB_DIR     ;
 994:	e7 e3       	ldi	r30, 0x37	; 55
 996:	f0 e0       	ldi	r31, 0x00	; 0
 998:	80 e4       	ldi	r24, 0x40	; 64
 99a:	80 83       	st	Z, r24
		DDRC  = PORTC_DIR     ;
 99c:	e4 e3       	ldi	r30, 0x34	; 52
 99e:	f0 e0       	ldi	r31, 0x00	; 0
 9a0:	83 e0       	ldi	r24, 0x03	; 3
 9a2:	80 83       	st	Z, r24
		DDRD  = PORTD_DIR     ;
 9a4:	e1 e3       	ldi	r30, 0x31	; 49
 9a6:	f0 e0       	ldi	r31, 0x00	; 0
 9a8:	10 82       	st	Z, r1
		
		PORTA = PORTA_INITVAL ; 
 9aa:	eb e3       	ldi	r30, 0x3B	; 59
 9ac:	f0 e0       	ldi	r31, 0x00	; 0
 9ae:	10 82       	st	Z, r1
		PORTB = PORTB_INITVAL ; 
 9b0:	e8 e3       	ldi	r30, 0x38	; 56
 9b2:	f0 e0       	ldi	r31, 0x00	; 0
 9b4:	10 82       	st	Z, r1
		PORTC = PORTC_INITVAL ; 
 9b6:	e5 e3       	ldi	r30, 0x35	; 53
 9b8:	f0 e0       	ldi	r31, 0x00	; 0
 9ba:	10 82       	st	Z, r1
		PORTD = PORTD_INITVAL ; 
 9bc:	e2 e3       	ldi	r30, 0x32	; 50
 9be:	f0 e0       	ldi	r31, 0x00	; 0
 9c0:	10 82       	st	Z, r1
 9c2:	cf 91       	pop	r28
 9c4:	df 91       	pop	r29
 9c6:	08 95       	ret

000009c8 <SPI_voidInitial>:
#include "SPI_Interface.h"

static void (*SPI_pvNotificationFunc)(void) = NULL ;

	void SPI_voidInitial 		( void )
	{
 9c8:	df 93       	push	r29
 9ca:	cf 93       	push	r28
 9cc:	cd b7       	in	r28, 0x3d	; 61
 9ce:	de b7       	in	r29, 0x3e	; 62
					#error Wrong SPI_u8ClockRate Configuration Value

				#endif
		#elif 				SPI_u8ROLE == SLAVE

		CLR_BIT(SPCR,SPCR_MSTR) ;		// SLAVE SELECTION
 9d0:	ad e2       	ldi	r26, 0x2D	; 45
 9d2:	b0 e0       	ldi	r27, 0x00	; 0
 9d4:	ed e2       	ldi	r30, 0x2D	; 45
 9d6:	f0 e0       	ldi	r31, 0x00	; 0
 9d8:	80 81       	ld	r24, Z
 9da:	8f 7e       	andi	r24, 0xEF	; 239
 9dc:	8c 93       	st	X, r24

		#endif

		#if 				SPI_u8InterruptEnable == ENABLE

		SET_BIT(SPCR,SPCR_SPIE) ;   	// ENABLE INTERRUPT
 9de:	ad e2       	ldi	r26, 0x2D	; 45
 9e0:	b0 e0       	ldi	r27, 0x00	; 0
 9e2:	ed e2       	ldi	r30, 0x2D	; 45
 9e4:	f0 e0       	ldi	r31, 0x00	; 0
 9e6:	80 81       	ld	r24, Z
 9e8:	80 68       	ori	r24, 0x80	; 128
 9ea:	8c 93       	st	X, r24

		SET_BIT(SPCR,SPCR_DORD) ;   	// LSB FIRST

		#elif 				SPI_u8DataOrder == MSB_FIRST

		CLR_BIT(SPCR,SPCR_DORD) ;		// MSB FIRST
 9ec:	ad e2       	ldi	r26, 0x2D	; 45
 9ee:	b0 e0       	ldi	r27, 0x00	; 0
 9f0:	ed e2       	ldi	r30, 0x2D	; 45
 9f2:	f0 e0       	ldi	r31, 0x00	; 0
 9f4:	80 81       	ld	r24, Z
 9f6:	8f 7d       	andi	r24, 0xDF	; 223
 9f8:	8c 93       	st	X, r24

		SET_BIT(SPCR,SPCR_CPOL) ;   	// IDLE HIGH

		#elif 				SPI_u8ClockPolarity == IDLE_LOW

		CLR_BIT(SPCR,SPCR_CPOL) ;		// IDLE LOW
 9fa:	ad e2       	ldi	r26, 0x2D	; 45
 9fc:	b0 e0       	ldi	r27, 0x00	; 0
 9fe:	ed e2       	ldi	r30, 0x2D	; 45
 a00:	f0 e0       	ldi	r31, 0x00	; 0
 a02:	80 81       	ld	r24, Z
 a04:	87 7f       	andi	r24, 0xF7	; 247
 a06:	8c 93       	st	X, r24

		#endif

		#if 				SPI_u8ClockPhase == SAMPLE_FIRST

		CLR_BIT(SPCR,SPCR_CPHA) ;   	// SAMPLE FIRST
 a08:	ad e2       	ldi	r26, 0x2D	; 45
 a0a:	b0 e0       	ldi	r27, 0x00	; 0
 a0c:	ed e2       	ldi	r30, 0x2D	; 45
 a0e:	f0 e0       	ldi	r31, 0x00	; 0
 a10:	80 81       	ld	r24, Z
 a12:	8b 7f       	andi	r24, 0xFB	; 251
 a14:	8c 93       	st	X, r24

		#endif

											/* SPI ENABLE */
		#if 	SPI_u8Enable == ENABLE
		SET_BIT(SPCR,SPCR_SPE) ;
 a16:	ad e2       	ldi	r26, 0x2D	; 45
 a18:	b0 e0       	ldi	r27, 0x00	; 0
 a1a:	ed e2       	ldi	r30, 0x2D	; 45
 a1c:	f0 e0       	ldi	r31, 0x00	; 0
 a1e:	80 81       	ld	r24, Z
 a20:	80 64       	ori	r24, 0x40	; 64
 a22:	8c 93       	st	X, r24
		#else
		#error "Wrong SPI_u8Enable Configuration Value"
		#endif


	}
 a24:	cf 91       	pop	r28
 a26:	df 91       	pop	r29
 a28:	08 95       	ret

00000a2a <SPI_voidInit>:

	void SPI_voidInit		   	( uint8 copy_u8Role )
	{
 a2a:	df 93       	push	r29
 a2c:	cf 93       	push	r28
 a2e:	0f 92       	push	r0
 a30:	cd b7       	in	r28, 0x3d	; 61
 a32:	de b7       	in	r29, 0x3e	; 62
 a34:	89 83       	std	Y+1, r24	; 0x01

												/* DATA ORDER */

		CLR_BIT(SPCR,SPCR_DORD) ;     			// the MSB of the data word is transmitted first.
 a36:	ad e2       	ldi	r26, 0x2D	; 45
 a38:	b0 e0       	ldi	r27, 0x00	; 0
 a3a:	ed e2       	ldi	r30, 0x2D	; 45
 a3c:	f0 e0       	ldi	r31, 0x00	; 0
 a3e:	80 81       	ld	r24, Z
 a40:	8f 7d       	andi	r24, 0xDF	; 223
 a42:	8c 93       	st	X, r24

												/* MASTER / SLAVE SELECT */

		if ( ( copy_u8Role == 'M' ) || ( copy_u8Role == 'm' ) )
 a44:	89 81       	ldd	r24, Y+1	; 0x01
 a46:	8d 34       	cpi	r24, 0x4D	; 77
 a48:	19 f0       	breq	.+6      	; 0xa50 <SPI_voidInit+0x26>
 a4a:	89 81       	ldd	r24, Y+1	; 0x01
 a4c:	8d 36       	cpi	r24, 0x6D	; 109
 a4e:	e9 f4       	brne	.+58     	; 0xa8a <SPI_voidInit+0x60>
		{
			SET_BIT(SPCR,SPCR_MSTR) ;   		// MASTER SELECTION
 a50:	ad e2       	ldi	r26, 0x2D	; 45
 a52:	b0 e0       	ldi	r27, 0x00	; 0
 a54:	ed e2       	ldi	r30, 0x2D	; 45
 a56:	f0 e0       	ldi	r31, 0x00	; 0
 a58:	80 81       	ld	r24, Z
 a5a:	80 61       	ori	r24, 0x10	; 16
 a5c:	8c 93       	st	X, r24

												/* CLOCK RATE SELECT */

			CLR_BIT(SPCR,SPCR_SPR0) ; 			// MAXIMUM SPEED
 a5e:	ad e2       	ldi	r26, 0x2D	; 45
 a60:	b0 e0       	ldi	r27, 0x00	; 0
 a62:	ed e2       	ldi	r30, 0x2D	; 45
 a64:	f0 e0       	ldi	r31, 0x00	; 0
 a66:	80 81       	ld	r24, Z
 a68:	8e 7f       	andi	r24, 0xFE	; 254
 a6a:	8c 93       	st	X, r24
			CLR_BIT(SPCR,SPCR_SPR1) ; 			// MAXIMUM SPEED
 a6c:	ad e2       	ldi	r26, 0x2D	; 45
 a6e:	b0 e0       	ldi	r27, 0x00	; 0
 a70:	ed e2       	ldi	r30, 0x2D	; 45
 a72:	f0 e0       	ldi	r31, 0x00	; 0
 a74:	80 81       	ld	r24, Z
 a76:	8d 7f       	andi	r24, 0xFD	; 253
 a78:	8c 93       	st	X, r24
			SET_BIT(SPSR,SPSR_SPI2X) ; 			// MAXIMUM SPEED
 a7a:	ae e2       	ldi	r26, 0x2E	; 46
 a7c:	b0 e0       	ldi	r27, 0x00	; 0
 a7e:	ee e2       	ldi	r30, 0x2E	; 46
 a80:	f0 e0       	ldi	r31, 0x00	; 0
 a82:	80 81       	ld	r24, Z
 a84:	81 60       	ori	r24, 0x01	; 1
 a86:	8c 93       	st	X, r24
 a88:	0d c0       	rjmp	.+26     	; 0xaa4 <SPI_voidInit+0x7a>

		}
		else if ( ( copy_u8Role == 'S' ) || ( copy_u8Role == 's' ) )
 a8a:	89 81       	ldd	r24, Y+1	; 0x01
 a8c:	83 35       	cpi	r24, 0x53	; 83
 a8e:	19 f0       	breq	.+6      	; 0xa96 <SPI_voidInit+0x6c>
 a90:	89 81       	ldd	r24, Y+1	; 0x01
 a92:	83 37       	cpi	r24, 0x73	; 115
 a94:	39 f4       	brne	.+14     	; 0xaa4 <SPI_voidInit+0x7a>
		{
			CLR_BIT(SPCR,SPCR_MSTR) ;		// SLAVE SELECTION
 a96:	ad e2       	ldi	r26, 0x2D	; 45
 a98:	b0 e0       	ldi	r27, 0x00	; 0
 a9a:	ed e2       	ldi	r30, 0x2D	; 45
 a9c:	f0 e0       	ldi	r31, 0x00	; 0
 a9e:	80 81       	ld	r24, Z
 aa0:	8f 7e       	andi	r24, 0xEF	; 239
 aa2:	8c 93       	st	X, r24
			// DO NOTHING
		}

												/* SPI ENABLE */

		SET_BIT(SPCR,SPCR_SPE) ;
 aa4:	ad e2       	ldi	r26, 0x2D	; 45
 aa6:	b0 e0       	ldi	r27, 0x00	; 0
 aa8:	ed e2       	ldi	r30, 0x2D	; 45
 aaa:	f0 e0       	ldi	r31, 0x00	; 0
 aac:	80 81       	ld	r24, Z
 aae:	80 64       	ori	r24, 0x40	; 64
 ab0:	8c 93       	st	X, r24

	}
 ab2:	0f 90       	pop	r0
 ab4:	cf 91       	pop	r28
 ab6:	df 91       	pop	r29
 ab8:	08 95       	ret

00000aba <SPI_u8Transceive>:

	uint8 SPI_u8Transceive 		( uint8 copy_u8Data)
	{
 aba:	df 93       	push	r29
 abc:	cf 93       	push	r28
 abe:	0f 92       	push	r0
 ac0:	cd b7       	in	r28, 0x3d	; 61
 ac2:	de b7       	in	r29, 0x3e	; 62
 ac4:	89 83       	std	Y+1, r24	; 0x01
												/* PUT DATA ON SPDR */
		SPDR = copy_u8Data ;
 ac6:	ef e2       	ldi	r30, 0x2F	; 47
 ac8:	f0 e0       	ldi	r31, 0x00	; 0
 aca:	89 81       	ldd	r24, Y+1	; 0x01
 acc:	80 83       	st	Z, r24

												/* WAIT FOR SPIF TO BE RAISED */

		while ( (GET_BIT(SPSR,SPSR_SPIF)) != 1 ) ;
 ace:	ee e2       	ldi	r30, 0x2E	; 46
 ad0:	f0 e0       	ldi	r31, 0x00	; 0
 ad2:	80 81       	ld	r24, Z
 ad4:	88 1f       	adc	r24, r24
 ad6:	88 27       	eor	r24, r24
 ad8:	88 1f       	adc	r24, r24
 ada:	81 30       	cpi	r24, 0x01	; 1
 adc:	c1 f7       	brne	.-16     	; 0xace <SPI_u8Transceive+0x14>

												/* RETURN SPDR */

		return SPDR ;
 ade:	ef e2       	ldi	r30, 0x2F	; 47
 ae0:	f0 e0       	ldi	r31, 0x00	; 0
 ae2:	80 81       	ld	r24, Z
	}
 ae4:	0f 90       	pop	r0
 ae6:	cf 91       	pop	r28
 ae8:	df 91       	pop	r29
 aea:	08 95       	ret

00000aec <SPI_u8SetCallBack>:

	uint8 SPI_u8SetCallBack (  void(*copy_pvNotification)(void) )

		{
 aec:	df 93       	push	r29
 aee:	cf 93       	push	r28
 af0:	00 d0       	rcall	.+0      	; 0xaf2 <SPI_u8SetCallBack+0x6>
 af2:	0f 92       	push	r0
 af4:	cd b7       	in	r28, 0x3d	; 61
 af6:	de b7       	in	r29, 0x3e	; 62
 af8:	9b 83       	std	Y+3, r25	; 0x03
 afa:	8a 83       	std	Y+2, r24	; 0x02
			uint8 Local_u8ErrorState = OK ;
 afc:	19 82       	std	Y+1, r1	; 0x01
			if (  copy_pvNotification != NULL  )
 afe:	8a 81       	ldd	r24, Y+2	; 0x02
 b00:	9b 81       	ldd	r25, Y+3	; 0x03
 b02:	00 97       	sbiw	r24, 0x00	; 0
 b04:	39 f0       	breq	.+14     	; 0xb14 <SPI_u8SetCallBack+0x28>
			{
						/* CONVERT THE NOTIFICATION FUNCTION LOCAL VARIABLES TO GLOBAL */

				SPI_pvNotificationFunc = copy_pvNotification ;
 b06:	8a 81       	ldd	r24, Y+2	; 0x02
 b08:	9b 81       	ldd	r25, Y+3	; 0x03
 b0a:	90 93 61 00 	sts	0x0061, r25
 b0e:	80 93 60 00 	sts	0x0060, r24
 b12:	02 c0       	rjmp	.+4      	; 0xb18 <SPI_u8SetCallBack+0x2c>
			}
			else
			{
				Local_u8ErrorState = NULL_PTR ;
 b14:	82 e0       	ldi	r24, 0x02	; 2
 b16:	89 83       	std	Y+1, r24	; 0x01
			}

			return Local_u8ErrorState ;
 b18:	89 81       	ldd	r24, Y+1	; 0x01
		}
 b1a:	0f 90       	pop	r0
 b1c:	0f 90       	pop	r0
 b1e:	0f 90       	pop	r0
 b20:	cf 91       	pop	r28
 b22:	df 91       	pop	r29
 b24:	08 95       	ret

00000b26 <__vector_12>:
								/* Serial Transfer Complete ISR */

	void __vector_12 ( void )			__attribute__((signal)) ;
	void __vector_12 ( void )
	{
 b26:	1f 92       	push	r1
 b28:	0f 92       	push	r0
 b2a:	0f b6       	in	r0, 0x3f	; 63
 b2c:	0f 92       	push	r0
 b2e:	11 24       	eor	r1, r1
 b30:	2f 93       	push	r18
 b32:	3f 93       	push	r19
 b34:	4f 93       	push	r20
 b36:	5f 93       	push	r21
 b38:	6f 93       	push	r22
 b3a:	7f 93       	push	r23
 b3c:	8f 93       	push	r24
 b3e:	9f 93       	push	r25
 b40:	af 93       	push	r26
 b42:	bf 93       	push	r27
 b44:	ef 93       	push	r30
 b46:	ff 93       	push	r31
 b48:	df 93       	push	r29
 b4a:	cf 93       	push	r28
 b4c:	cd b7       	in	r28, 0x3d	; 61
 b4e:	de b7       	in	r29, 0x3e	; 62

	if ( SPI_pvNotificationFunc != NULL )
 b50:	80 91 60 00 	lds	r24, 0x0060
 b54:	90 91 61 00 	lds	r25, 0x0061
 b58:	00 97       	sbiw	r24, 0x00	; 0
 b5a:	29 f0       	breq	.+10     	; 0xb66 <__vector_12+0x40>
	{
	SPI_pvNotificationFunc() ;
 b5c:	e0 91 60 00 	lds	r30, 0x0060
 b60:	f0 91 61 00 	lds	r31, 0x0061
 b64:	09 95       	icall
	else
	{
	// DO NOTHING
	}

	}
 b66:	cf 91       	pop	r28
 b68:	df 91       	pop	r29
 b6a:	ff 91       	pop	r31
 b6c:	ef 91       	pop	r30
 b6e:	bf 91       	pop	r27
 b70:	af 91       	pop	r26
 b72:	9f 91       	pop	r25
 b74:	8f 91       	pop	r24
 b76:	7f 91       	pop	r23
 b78:	6f 91       	pop	r22
 b7a:	5f 91       	pop	r21
 b7c:	4f 91       	pop	r20
 b7e:	3f 91       	pop	r19
 b80:	2f 91       	pop	r18
 b82:	0f 90       	pop	r0
 b84:	0f be       	out	0x3f, r0	; 63
 b86:	0f 90       	pop	r0
 b88:	1f 90       	pop	r1
 b8a:	18 95       	reti

00000b8c <main>:

void ISR ( void ) ;
uint8 local_u8Data ;
							/* THIS PROGRAM FOR TESTING THAT DATA SENT FROM MASTER USING SPI PROTOCOL HAS BEEN RECEIVED TO SLAVE SUCCESSFULLY */
void main ()
{
 b8c:	df 93       	push	r29
 b8e:	cf 93       	push	r28
 b90:	cd b7       	in	r28, 0x3d	; 61
 b92:	de b7       	in	r29, 0x3e	; 62
	PORT_voidInit() ;
 b94:	0e 94 c3 04 	call	0x986	; 0x986 <PORT_voidInit>

	SPI_voidInitial() ;
 b98:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <SPI_voidInitial>

	SPI_u8SetCallBack( &ISR ) ;
 b9c:	85 ed       	ldi	r24, 0xD5	; 213
 b9e:	95 e0       	ldi	r25, 0x05	; 5
 ba0:	0e 94 76 05 	call	0xaec	; 0xaec <SPI_u8SetCallBack>

	GIE_voidEnableGlobal();
 ba4:	0e 94 18 04 	call	0x830	; 0x830 <GIE_voidEnableGlobal>
 ba8:	ff cf       	rjmp	.-2      	; 0xba8 <main+0x1c>

00000baa <ISR>:

	}
}

void ISR ( void )
{
 baa:	df 93       	push	r29
 bac:	cf 93       	push	r28
 bae:	cd b7       	in	r28, 0x3d	; 61
 bb0:	de b7       	in	r29, 0x3e	; 62

	local_u8Data = SPI_u8Transceive('6') ;
 bb2:	86 e3       	ldi	r24, 0x36	; 54
 bb4:	0e 94 5d 05 	call	0xaba	; 0xaba <SPI_u8Transceive>
 bb8:	80 93 62 00 	sts	0x0062, r24

	if (local_u8Data == '9')
 bbc:	80 91 62 00 	lds	r24, 0x0062
 bc0:	89 33       	cpi	r24, 0x39	; 57
 bc2:	31 f4       	brne	.+12     	; 0xbd0 <ISR+0x26>
	{
		DIO_U8SetPinValue(DIO_PORTC,DIO_PIN0,DIO_PIN_HIGH);
 bc4:	82 e0       	ldi	r24, 0x02	; 2
 bc6:	60 e0       	ldi	r22, 0x00	; 0
 bc8:	41 e0       	ldi	r20, 0x01	; 1
 bca:	0e 94 98 01 	call	0x330	; 0x330 <DIO_U8SetPinValue>
 bce:	05 c0       	rjmp	.+10     	; 0xbda <ISR+0x30>
	}
	else
	{
		DIO_U8SetPinValue(DIO_PORTC,DIO_PIN1,DIO_PIN_HIGH);
 bd0:	82 e0       	ldi	r24, 0x02	; 2
 bd2:	61 e0       	ldi	r22, 0x01	; 1
 bd4:	41 e0       	ldi	r20, 0x01	; 1
 bd6:	0e 94 98 01 	call	0x330	; 0x330 <DIO_U8SetPinValue>
	}
}
 bda:	cf 91       	pop	r28
 bdc:	df 91       	pop	r29
 bde:	08 95       	ret

00000be0 <__mulsi3>:
 be0:	62 9f       	mul	r22, r18
 be2:	d0 01       	movw	r26, r0
 be4:	73 9f       	mul	r23, r19
 be6:	f0 01       	movw	r30, r0
 be8:	82 9f       	mul	r24, r18
 bea:	e0 0d       	add	r30, r0
 bec:	f1 1d       	adc	r31, r1
 bee:	64 9f       	mul	r22, r20
 bf0:	e0 0d       	add	r30, r0
 bf2:	f1 1d       	adc	r31, r1
 bf4:	92 9f       	mul	r25, r18
 bf6:	f0 0d       	add	r31, r0
 bf8:	83 9f       	mul	r24, r19
 bfa:	f0 0d       	add	r31, r0
 bfc:	74 9f       	mul	r23, r20
 bfe:	f0 0d       	add	r31, r0
 c00:	65 9f       	mul	r22, r21
 c02:	f0 0d       	add	r31, r0
 c04:	99 27       	eor	r25, r25
 c06:	72 9f       	mul	r23, r18
 c08:	b0 0d       	add	r27, r0
 c0a:	e1 1d       	adc	r30, r1
 c0c:	f9 1f       	adc	r31, r25
 c0e:	63 9f       	mul	r22, r19
 c10:	b0 0d       	add	r27, r0
 c12:	e1 1d       	adc	r30, r1
 c14:	f9 1f       	adc	r31, r25
 c16:	bd 01       	movw	r22, r26
 c18:	cf 01       	movw	r24, r30
 c1a:	11 24       	eor	r1, r1
 c1c:	08 95       	ret

00000c1e <__divmodsi4>:
 c1e:	97 fb       	bst	r25, 7
 c20:	09 2e       	mov	r0, r25
 c22:	05 26       	eor	r0, r21
 c24:	0e d0       	rcall	.+28     	; 0xc42 <__divmodsi4_neg1>
 c26:	57 fd       	sbrc	r21, 7
 c28:	04 d0       	rcall	.+8      	; 0xc32 <__divmodsi4_neg2>
 c2a:	14 d0       	rcall	.+40     	; 0xc54 <__udivmodsi4>
 c2c:	0a d0       	rcall	.+20     	; 0xc42 <__divmodsi4_neg1>
 c2e:	00 1c       	adc	r0, r0
 c30:	38 f4       	brcc	.+14     	; 0xc40 <__divmodsi4_exit>

00000c32 <__divmodsi4_neg2>:
 c32:	50 95       	com	r21
 c34:	40 95       	com	r20
 c36:	30 95       	com	r19
 c38:	21 95       	neg	r18
 c3a:	3f 4f       	sbci	r19, 0xFF	; 255
 c3c:	4f 4f       	sbci	r20, 0xFF	; 255
 c3e:	5f 4f       	sbci	r21, 0xFF	; 255

00000c40 <__divmodsi4_exit>:
 c40:	08 95       	ret

00000c42 <__divmodsi4_neg1>:
 c42:	f6 f7       	brtc	.-4      	; 0xc40 <__divmodsi4_exit>
 c44:	90 95       	com	r25
 c46:	80 95       	com	r24
 c48:	70 95       	com	r23
 c4a:	61 95       	neg	r22
 c4c:	7f 4f       	sbci	r23, 0xFF	; 255
 c4e:	8f 4f       	sbci	r24, 0xFF	; 255
 c50:	9f 4f       	sbci	r25, 0xFF	; 255
 c52:	08 95       	ret

00000c54 <__udivmodsi4>:
 c54:	a1 e2       	ldi	r26, 0x21	; 33
 c56:	1a 2e       	mov	r1, r26
 c58:	aa 1b       	sub	r26, r26
 c5a:	bb 1b       	sub	r27, r27
 c5c:	fd 01       	movw	r30, r26
 c5e:	0d c0       	rjmp	.+26     	; 0xc7a <__udivmodsi4_ep>

00000c60 <__udivmodsi4_loop>:
 c60:	aa 1f       	adc	r26, r26
 c62:	bb 1f       	adc	r27, r27
 c64:	ee 1f       	adc	r30, r30
 c66:	ff 1f       	adc	r31, r31
 c68:	a2 17       	cp	r26, r18
 c6a:	b3 07       	cpc	r27, r19
 c6c:	e4 07       	cpc	r30, r20
 c6e:	f5 07       	cpc	r31, r21
 c70:	20 f0       	brcs	.+8      	; 0xc7a <__udivmodsi4_ep>
 c72:	a2 1b       	sub	r26, r18
 c74:	b3 0b       	sbc	r27, r19
 c76:	e4 0b       	sbc	r30, r20
 c78:	f5 0b       	sbc	r31, r21

00000c7a <__udivmodsi4_ep>:
 c7a:	66 1f       	adc	r22, r22
 c7c:	77 1f       	adc	r23, r23
 c7e:	88 1f       	adc	r24, r24
 c80:	99 1f       	adc	r25, r25
 c82:	1a 94       	dec	r1
 c84:	69 f7       	brne	.-38     	; 0xc60 <__udivmodsi4_loop>
 c86:	60 95       	com	r22
 c88:	70 95       	com	r23
 c8a:	80 95       	com	r24
 c8c:	90 95       	com	r25
 c8e:	9b 01       	movw	r18, r22
 c90:	ac 01       	movw	r20, r24
 c92:	bd 01       	movw	r22, r26
 c94:	cf 01       	movw	r24, r30
 c96:	08 95       	ret

00000c98 <_exit>:
 c98:	f8 94       	cli

00000c9a <__stop_program>:
 c9a:	ff cf       	rjmp	.-2      	; 0xc9a <__stop_program>
