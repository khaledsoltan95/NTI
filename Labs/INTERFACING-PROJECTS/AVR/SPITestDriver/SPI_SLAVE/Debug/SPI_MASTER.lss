
SPI_MASTER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b30  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000f84  00000000  00000000  00000b84  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000b00  00000000  00000000  00001b08  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 2d 05 	call	0xa5a	; 0xa5a <main>
  64:	0c 94 96 05 	jmp	0xb2c	; 0xb2c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_U8SetPinDirection>:

#include "DIO_Reg.h"
#include "DIO_Interface.h"

uint8 DIO_U8SetPinDirection	    (DIO_Port_t copy_Port,	 DIO_Pin_t copy_PinNum,		DIO_PinDir_t copy_Dir)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
  74:	28 97       	sbiw	r28, 0x08	; 8
  76:	0f b6       	in	r0, 0x3f	; 63
  78:	f8 94       	cli
  7a:	de bf       	out	0x3e, r29	; 62
  7c:	0f be       	out	0x3f, r0	; 63
  7e:	cd bf       	out	0x3d, r28	; 61
  80:	8a 83       	std	Y+2, r24	; 0x02
  82:	6b 83       	std	Y+3, r22	; 0x03
  84:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK ;
  86:	19 82       	std	Y+1, r1	; 0x01
	if ( (copy_PinNum >= DIO_PIN0) && (copy_PinNum <= DIO_PIN7) )
  88:	8b 81       	ldd	r24, Y+3	; 0x03
  8a:	88 30       	cpi	r24, 0x08	; 8
  8c:	08 f0       	brcs	.+2      	; 0x90 <DIO_U8SetPinDirection+0x24>
  8e:	f4 c0       	rjmp	.+488    	; 0x278 <DIO_U8SetPinDirection+0x20c>
	{
		if (copy_Dir==DIO_PIN_INPUT)
  90:	8c 81       	ldd	r24, Y+4	; 0x04
  92:	88 23       	and	r24, r24
  94:	09 f0       	breq	.+2      	; 0x98 <DIO_U8SetPinDirection+0x2c>
  96:	77 c0       	rjmp	.+238    	; 0x186 <DIO_U8SetPinDirection+0x11a>
		{
			switch (copy_Port)
  98:	8a 81       	ldd	r24, Y+2	; 0x02
  9a:	28 2f       	mov	r18, r24
  9c:	30 e0       	ldi	r19, 0x00	; 0
  9e:	38 87       	std	Y+8, r19	; 0x08
  a0:	2f 83       	std	Y+7, r18	; 0x07
  a2:	8f 81       	ldd	r24, Y+7	; 0x07
  a4:	98 85       	ldd	r25, Y+8	; 0x08
  a6:	81 30       	cpi	r24, 0x01	; 1
  a8:	91 05       	cpc	r25, r1
  aa:	59 f1       	breq	.+86     	; 0x102 <DIO_U8SetPinDirection+0x96>
  ac:	2f 81       	ldd	r18, Y+7	; 0x07
  ae:	38 85       	ldd	r19, Y+8	; 0x08
  b0:	22 30       	cpi	r18, 0x02	; 2
  b2:	31 05       	cpc	r19, r1
  b4:	2c f4       	brge	.+10     	; 0xc0 <DIO_U8SetPinDirection+0x54>
  b6:	8f 81       	ldd	r24, Y+7	; 0x07
  b8:	98 85       	ldd	r25, Y+8	; 0x08
  ba:	00 97       	sbiw	r24, 0x00	; 0
  bc:	69 f0       	breq	.+26     	; 0xd8 <DIO_U8SetPinDirection+0x6c>
  be:	60 c0       	rjmp	.+192    	; 0x180 <DIO_U8SetPinDirection+0x114>
  c0:	2f 81       	ldd	r18, Y+7	; 0x07
  c2:	38 85       	ldd	r19, Y+8	; 0x08
  c4:	22 30       	cpi	r18, 0x02	; 2
  c6:	31 05       	cpc	r19, r1
  c8:	89 f1       	breq	.+98     	; 0x12c <DIO_U8SetPinDirection+0xc0>
  ca:	8f 81       	ldd	r24, Y+7	; 0x07
  cc:	98 85       	ldd	r25, Y+8	; 0x08
  ce:	83 30       	cpi	r24, 0x03	; 3
  d0:	91 05       	cpc	r25, r1
  d2:	09 f4       	brne	.+2      	; 0xd6 <DIO_U8SetPinDirection+0x6a>
  d4:	40 c0       	rjmp	.+128    	; 0x156 <DIO_U8SetPinDirection+0xea>
  d6:	54 c0       	rjmp	.+168    	; 0x180 <DIO_U8SetPinDirection+0x114>
			{
			case DIO_PORTA : CLR_BIT(DDRA,copy_PinNum); break ;
  d8:	aa e3       	ldi	r26, 0x3A	; 58
  da:	b0 e0       	ldi	r27, 0x00	; 0
  dc:	ea e3       	ldi	r30, 0x3A	; 58
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	48 2f       	mov	r20, r24
  e4:	8b 81       	ldd	r24, Y+3	; 0x03
  e6:	28 2f       	mov	r18, r24
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	02 2e       	mov	r0, r18
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <DIO_U8SetPinDirection+0x8a>
  f2:	88 0f       	add	r24, r24
  f4:	99 1f       	adc	r25, r25
  f6:	0a 94       	dec	r0
  f8:	e2 f7       	brpl	.-8      	; 0xf2 <DIO_U8SetPinDirection+0x86>
  fa:	80 95       	com	r24
  fc:	84 23       	and	r24, r20
  fe:	8c 93       	st	X, r24
 100:	bd c0       	rjmp	.+378    	; 0x27c <DIO_U8SetPinDirection+0x210>
			case DIO_PORTB : CLR_BIT(DDRB,copy_PinNum); break ;
 102:	a7 e3       	ldi	r26, 0x37	; 55
 104:	b0 e0       	ldi	r27, 0x00	; 0
 106:	e7 e3       	ldi	r30, 0x37	; 55
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	48 2f       	mov	r20, r24
 10e:	8b 81       	ldd	r24, Y+3	; 0x03
 110:	28 2f       	mov	r18, r24
 112:	30 e0       	ldi	r19, 0x00	; 0
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	02 2e       	mov	r0, r18
 11a:	02 c0       	rjmp	.+4      	; 0x120 <DIO_U8SetPinDirection+0xb4>
 11c:	88 0f       	add	r24, r24
 11e:	99 1f       	adc	r25, r25
 120:	0a 94       	dec	r0
 122:	e2 f7       	brpl	.-8      	; 0x11c <DIO_U8SetPinDirection+0xb0>
 124:	80 95       	com	r24
 126:	84 23       	and	r24, r20
 128:	8c 93       	st	X, r24
 12a:	a8 c0       	rjmp	.+336    	; 0x27c <DIO_U8SetPinDirection+0x210>
			case DIO_PORTC : CLR_BIT(DDRC,copy_PinNum); break ;
 12c:	a4 e3       	ldi	r26, 0x34	; 52
 12e:	b0 e0       	ldi	r27, 0x00	; 0
 130:	e4 e3       	ldi	r30, 0x34	; 52
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	48 2f       	mov	r20, r24
 138:	8b 81       	ldd	r24, Y+3	; 0x03
 13a:	28 2f       	mov	r18, r24
 13c:	30 e0       	ldi	r19, 0x00	; 0
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	02 2e       	mov	r0, r18
 144:	02 c0       	rjmp	.+4      	; 0x14a <DIO_U8SetPinDirection+0xde>
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	0a 94       	dec	r0
 14c:	e2 f7       	brpl	.-8      	; 0x146 <DIO_U8SetPinDirection+0xda>
 14e:	80 95       	com	r24
 150:	84 23       	and	r24, r20
 152:	8c 93       	st	X, r24
 154:	93 c0       	rjmp	.+294    	; 0x27c <DIO_U8SetPinDirection+0x210>
			case DIO_PORTD : CLR_BIT(DDRD,copy_PinNum); break ;
 156:	a1 e3       	ldi	r26, 0x31	; 49
 158:	b0 e0       	ldi	r27, 0x00	; 0
 15a:	e1 e3       	ldi	r30, 0x31	; 49
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	80 81       	ld	r24, Z
 160:	48 2f       	mov	r20, r24
 162:	8b 81       	ldd	r24, Y+3	; 0x03
 164:	28 2f       	mov	r18, r24
 166:	30 e0       	ldi	r19, 0x00	; 0
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	02 2e       	mov	r0, r18
 16e:	02 c0       	rjmp	.+4      	; 0x174 <DIO_U8SetPinDirection+0x108>
 170:	88 0f       	add	r24, r24
 172:	99 1f       	adc	r25, r25
 174:	0a 94       	dec	r0
 176:	e2 f7       	brpl	.-8      	; 0x170 <DIO_U8SetPinDirection+0x104>
 178:	80 95       	com	r24
 17a:	84 23       	and	r24, r20
 17c:	8c 93       	st	X, r24
 17e:	7e c0       	rjmp	.+252    	; 0x27c <DIO_U8SetPinDirection+0x210>
			default : Local_u8ErrorState = NOK ; break ;
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	89 83       	std	Y+1, r24	; 0x01
 184:	7b c0       	rjmp	.+246    	; 0x27c <DIO_U8SetPinDirection+0x210>
			}
		}
		else if (copy_Dir==DIO_PIN_OUTPUT)
 186:	8c 81       	ldd	r24, Y+4	; 0x04
 188:	81 30       	cpi	r24, 0x01	; 1
 18a:	09 f0       	breq	.+2      	; 0x18e <DIO_U8SetPinDirection+0x122>
 18c:	72 c0       	rjmp	.+228    	; 0x272 <DIO_U8SetPinDirection+0x206>
		{
			switch (copy_Port)
 18e:	8a 81       	ldd	r24, Y+2	; 0x02
 190:	28 2f       	mov	r18, r24
 192:	30 e0       	ldi	r19, 0x00	; 0
 194:	3e 83       	std	Y+6, r19	; 0x06
 196:	2d 83       	std	Y+5, r18	; 0x05
 198:	8d 81       	ldd	r24, Y+5	; 0x05
 19a:	9e 81       	ldd	r25, Y+6	; 0x06
 19c:	81 30       	cpi	r24, 0x01	; 1
 19e:	91 05       	cpc	r25, r1
 1a0:	49 f1       	breq	.+82     	; 0x1f4 <DIO_U8SetPinDirection+0x188>
 1a2:	2d 81       	ldd	r18, Y+5	; 0x05
 1a4:	3e 81       	ldd	r19, Y+6	; 0x06
 1a6:	22 30       	cpi	r18, 0x02	; 2
 1a8:	31 05       	cpc	r19, r1
 1aa:	2c f4       	brge	.+10     	; 0x1b6 <DIO_U8SetPinDirection+0x14a>
 1ac:	8d 81       	ldd	r24, Y+5	; 0x05
 1ae:	9e 81       	ldd	r25, Y+6	; 0x06
 1b0:	00 97       	sbiw	r24, 0x00	; 0
 1b2:	61 f0       	breq	.+24     	; 0x1cc <DIO_U8SetPinDirection+0x160>
 1b4:	5b c0       	rjmp	.+182    	; 0x26c <DIO_U8SetPinDirection+0x200>
 1b6:	2d 81       	ldd	r18, Y+5	; 0x05
 1b8:	3e 81       	ldd	r19, Y+6	; 0x06
 1ba:	22 30       	cpi	r18, 0x02	; 2
 1bc:	31 05       	cpc	r19, r1
 1be:	71 f1       	breq	.+92     	; 0x21c <DIO_U8SetPinDirection+0x1b0>
 1c0:	8d 81       	ldd	r24, Y+5	; 0x05
 1c2:	9e 81       	ldd	r25, Y+6	; 0x06
 1c4:	83 30       	cpi	r24, 0x03	; 3
 1c6:	91 05       	cpc	r25, r1
 1c8:	e9 f1       	breq	.+122    	; 0x244 <DIO_U8SetPinDirection+0x1d8>
 1ca:	50 c0       	rjmp	.+160    	; 0x26c <DIO_U8SetPinDirection+0x200>
			{
			case DIO_PORTA : SET_BIT(DDRA,copy_PinNum); break ;
 1cc:	aa e3       	ldi	r26, 0x3A	; 58
 1ce:	b0 e0       	ldi	r27, 0x00	; 0
 1d0:	ea e3       	ldi	r30, 0x3A	; 58
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	80 81       	ld	r24, Z
 1d6:	48 2f       	mov	r20, r24
 1d8:	8b 81       	ldd	r24, Y+3	; 0x03
 1da:	28 2f       	mov	r18, r24
 1dc:	30 e0       	ldi	r19, 0x00	; 0
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	02 2e       	mov	r0, r18
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <DIO_U8SetPinDirection+0x17e>
 1e6:	88 0f       	add	r24, r24
 1e8:	99 1f       	adc	r25, r25
 1ea:	0a 94       	dec	r0
 1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <DIO_U8SetPinDirection+0x17a>
 1ee:	84 2b       	or	r24, r20
 1f0:	8c 93       	st	X, r24
 1f2:	44 c0       	rjmp	.+136    	; 0x27c <DIO_U8SetPinDirection+0x210>
			case DIO_PORTB : SET_BIT(DDRB,copy_PinNum); break ;
 1f4:	a7 e3       	ldi	r26, 0x37	; 55
 1f6:	b0 e0       	ldi	r27, 0x00	; 0
 1f8:	e7 e3       	ldi	r30, 0x37	; 55
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	80 81       	ld	r24, Z
 1fe:	48 2f       	mov	r20, r24
 200:	8b 81       	ldd	r24, Y+3	; 0x03
 202:	28 2f       	mov	r18, r24
 204:	30 e0       	ldi	r19, 0x00	; 0
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	02 2e       	mov	r0, r18
 20c:	02 c0       	rjmp	.+4      	; 0x212 <DIO_U8SetPinDirection+0x1a6>
 20e:	88 0f       	add	r24, r24
 210:	99 1f       	adc	r25, r25
 212:	0a 94       	dec	r0
 214:	e2 f7       	brpl	.-8      	; 0x20e <DIO_U8SetPinDirection+0x1a2>
 216:	84 2b       	or	r24, r20
 218:	8c 93       	st	X, r24
 21a:	30 c0       	rjmp	.+96     	; 0x27c <DIO_U8SetPinDirection+0x210>
			case DIO_PORTC : SET_BIT(DDRC,copy_PinNum); break ;
 21c:	a4 e3       	ldi	r26, 0x34	; 52
 21e:	b0 e0       	ldi	r27, 0x00	; 0
 220:	e4 e3       	ldi	r30, 0x34	; 52
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	80 81       	ld	r24, Z
 226:	48 2f       	mov	r20, r24
 228:	8b 81       	ldd	r24, Y+3	; 0x03
 22a:	28 2f       	mov	r18, r24
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	02 2e       	mov	r0, r18
 234:	02 c0       	rjmp	.+4      	; 0x23a <DIO_U8SetPinDirection+0x1ce>
 236:	88 0f       	add	r24, r24
 238:	99 1f       	adc	r25, r25
 23a:	0a 94       	dec	r0
 23c:	e2 f7       	brpl	.-8      	; 0x236 <DIO_U8SetPinDirection+0x1ca>
 23e:	84 2b       	or	r24, r20
 240:	8c 93       	st	X, r24
 242:	1c c0       	rjmp	.+56     	; 0x27c <DIO_U8SetPinDirection+0x210>
			case DIO_PORTD : SET_BIT(DDRD,copy_PinNum); break ;
 244:	a1 e3       	ldi	r26, 0x31	; 49
 246:	b0 e0       	ldi	r27, 0x00	; 0
 248:	e1 e3       	ldi	r30, 0x31	; 49
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	80 81       	ld	r24, Z
 24e:	48 2f       	mov	r20, r24
 250:	8b 81       	ldd	r24, Y+3	; 0x03
 252:	28 2f       	mov	r18, r24
 254:	30 e0       	ldi	r19, 0x00	; 0
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	02 2e       	mov	r0, r18
 25c:	02 c0       	rjmp	.+4      	; 0x262 <DIO_U8SetPinDirection+0x1f6>
 25e:	88 0f       	add	r24, r24
 260:	99 1f       	adc	r25, r25
 262:	0a 94       	dec	r0
 264:	e2 f7       	brpl	.-8      	; 0x25e <DIO_U8SetPinDirection+0x1f2>
 266:	84 2b       	or	r24, r20
 268:	8c 93       	st	X, r24
 26a:	08 c0       	rjmp	.+16     	; 0x27c <DIO_U8SetPinDirection+0x210>
			default : Local_u8ErrorState = NOK ; break ;
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	89 83       	std	Y+1, r24	; 0x01
 270:	05 c0       	rjmp	.+10     	; 0x27c <DIO_U8SetPinDirection+0x210>
			}
		}
		else
		{
			Local_u8ErrorState = NOK ;
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	89 83       	std	Y+1, r24	; 0x01
 276:	02 c0       	rjmp	.+4      	; 0x27c <DIO_U8SetPinDirection+0x210>
		}
	}
	else
	{
		Local_u8ErrorState = NOK ;
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
 27c:	89 81       	ldd	r24, Y+1	; 0x01
}
 27e:	28 96       	adiw	r28, 0x08	; 8
 280:	0f b6       	in	r0, 0x3f	; 63
 282:	f8 94       	cli
 284:	de bf       	out	0x3e, r29	; 62
 286:	0f be       	out	0x3f, r0	; 63
 288:	cd bf       	out	0x3d, r28	; 61
 28a:	cf 91       	pop	r28
 28c:	df 91       	pop	r29
 28e:	08 95       	ret

00000290 <DIO_U8SetPortDirection>:
uint8 DIO_U8SetPortDirection	(DIO_Port_t copy_Port,	 uint8 copy_u8PortDir)
{
 290:	df 93       	push	r29
 292:	cf 93       	push	r28
 294:	00 d0       	rcall	.+0      	; 0x296 <DIO_U8SetPortDirection+0x6>
 296:	00 d0       	rcall	.+0      	; 0x298 <DIO_U8SetPortDirection+0x8>
 298:	0f 92       	push	r0
 29a:	cd b7       	in	r28, 0x3d	; 61
 29c:	de b7       	in	r29, 0x3e	; 62
 29e:	8a 83       	std	Y+2, r24	; 0x02
 2a0:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK ;
 2a2:	19 82       	std	Y+1, r1	; 0x01
	switch (copy_Port)
 2a4:	8a 81       	ldd	r24, Y+2	; 0x02
 2a6:	28 2f       	mov	r18, r24
 2a8:	30 e0       	ldi	r19, 0x00	; 0
 2aa:	3d 83       	std	Y+5, r19	; 0x05
 2ac:	2c 83       	std	Y+4, r18	; 0x04
 2ae:	8c 81       	ldd	r24, Y+4	; 0x04
 2b0:	9d 81       	ldd	r25, Y+5	; 0x05
 2b2:	81 30       	cpi	r24, 0x01	; 1
 2b4:	91 05       	cpc	r25, r1
 2b6:	d1 f0       	breq	.+52     	; 0x2ec <DIO_U8SetPortDirection+0x5c>
 2b8:	2c 81       	ldd	r18, Y+4	; 0x04
 2ba:	3d 81       	ldd	r19, Y+5	; 0x05
 2bc:	22 30       	cpi	r18, 0x02	; 2
 2be:	31 05       	cpc	r19, r1
 2c0:	2c f4       	brge	.+10     	; 0x2cc <DIO_U8SetPortDirection+0x3c>
 2c2:	8c 81       	ldd	r24, Y+4	; 0x04
 2c4:	9d 81       	ldd	r25, Y+5	; 0x05
 2c6:	00 97       	sbiw	r24, 0x00	; 0
 2c8:	61 f0       	breq	.+24     	; 0x2e2 <DIO_U8SetPortDirection+0x52>
 2ca:	1f c0       	rjmp	.+62     	; 0x30a <DIO_U8SetPortDirection+0x7a>
 2cc:	2c 81       	ldd	r18, Y+4	; 0x04
 2ce:	3d 81       	ldd	r19, Y+5	; 0x05
 2d0:	22 30       	cpi	r18, 0x02	; 2
 2d2:	31 05       	cpc	r19, r1
 2d4:	81 f0       	breq	.+32     	; 0x2f6 <DIO_U8SetPortDirection+0x66>
 2d6:	8c 81       	ldd	r24, Y+4	; 0x04
 2d8:	9d 81       	ldd	r25, Y+5	; 0x05
 2da:	83 30       	cpi	r24, 0x03	; 3
 2dc:	91 05       	cpc	r25, r1
 2de:	81 f0       	breq	.+32     	; 0x300 <DIO_U8SetPortDirection+0x70>
 2e0:	14 c0       	rjmp	.+40     	; 0x30a <DIO_U8SetPortDirection+0x7a>
	{
	case DIO_PORTA : DDRA = copy_u8PortDir ; break ;
 2e2:	ea e3       	ldi	r30, 0x3A	; 58
 2e4:	f0 e0       	ldi	r31, 0x00	; 0
 2e6:	8b 81       	ldd	r24, Y+3	; 0x03
 2e8:	80 83       	st	Z, r24
 2ea:	11 c0       	rjmp	.+34     	; 0x30e <DIO_U8SetPortDirection+0x7e>
	case DIO_PORTB : DDRB = copy_u8PortDir ; break ;
 2ec:	e7 e3       	ldi	r30, 0x37	; 55
 2ee:	f0 e0       	ldi	r31, 0x00	; 0
 2f0:	8b 81       	ldd	r24, Y+3	; 0x03
 2f2:	80 83       	st	Z, r24
 2f4:	0c c0       	rjmp	.+24     	; 0x30e <DIO_U8SetPortDirection+0x7e>
	case DIO_PORTC : DDRC = copy_u8PortDir ; break ;
 2f6:	e4 e3       	ldi	r30, 0x34	; 52
 2f8:	f0 e0       	ldi	r31, 0x00	; 0
 2fa:	8b 81       	ldd	r24, Y+3	; 0x03
 2fc:	80 83       	st	Z, r24
 2fe:	07 c0       	rjmp	.+14     	; 0x30e <DIO_U8SetPortDirection+0x7e>
	case DIO_PORTD : DDRD = copy_u8PortDir ; break ;
 300:	e1 e3       	ldi	r30, 0x31	; 49
 302:	f0 e0       	ldi	r31, 0x00	; 0
 304:	8b 81       	ldd	r24, Y+3	; 0x03
 306:	80 83       	st	Z, r24
 308:	02 c0       	rjmp	.+4      	; 0x30e <DIO_U8SetPortDirection+0x7e>
	default : Local_u8ErrorState = NOK     ; break ;
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
 30e:	89 81       	ldd	r24, Y+1	; 0x01
}
 310:	0f 90       	pop	r0
 312:	0f 90       	pop	r0
 314:	0f 90       	pop	r0
 316:	0f 90       	pop	r0
 318:	0f 90       	pop	r0
 31a:	cf 91       	pop	r28
 31c:	df 91       	pop	r29
 31e:	08 95       	ret

00000320 <DIO_U8SetPinValue>:

uint8 DIO_U8SetPinValue	        (DIO_Port_t copy_Port,	 DIO_Pin_t copy_PinNum,		DIO_PinVal_t copy_Val)
{
 320:	df 93       	push	r29
 322:	cf 93       	push	r28
 324:	cd b7       	in	r28, 0x3d	; 61
 326:	de b7       	in	r29, 0x3e	; 62
 328:	28 97       	sbiw	r28, 0x08	; 8
 32a:	0f b6       	in	r0, 0x3f	; 63
 32c:	f8 94       	cli
 32e:	de bf       	out	0x3e, r29	; 62
 330:	0f be       	out	0x3f, r0	; 63
 332:	cd bf       	out	0x3d, r28	; 61
 334:	8a 83       	std	Y+2, r24	; 0x02
 336:	6b 83       	std	Y+3, r22	; 0x03
 338:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK ;
 33a:	19 82       	std	Y+1, r1	; 0x01
	if ( (copy_PinNum >= DIO_PIN0) && (copy_PinNum <= DIO_PIN7) )
 33c:	8b 81       	ldd	r24, Y+3	; 0x03
 33e:	88 30       	cpi	r24, 0x08	; 8
 340:	08 f0       	brcs	.+2      	; 0x344 <DIO_U8SetPinValue+0x24>
 342:	f4 c0       	rjmp	.+488    	; 0x52c <DIO_U8SetPinValue+0x20c>
	{
		if (copy_Val==DIO_PIN_LOW)
 344:	8c 81       	ldd	r24, Y+4	; 0x04
 346:	88 23       	and	r24, r24
 348:	09 f0       	breq	.+2      	; 0x34c <DIO_U8SetPinValue+0x2c>
 34a:	77 c0       	rjmp	.+238    	; 0x43a <DIO_U8SetPinValue+0x11a>
		{
			switch (copy_Port)
 34c:	8a 81       	ldd	r24, Y+2	; 0x02
 34e:	28 2f       	mov	r18, r24
 350:	30 e0       	ldi	r19, 0x00	; 0
 352:	38 87       	std	Y+8, r19	; 0x08
 354:	2f 83       	std	Y+7, r18	; 0x07
 356:	8f 81       	ldd	r24, Y+7	; 0x07
 358:	98 85       	ldd	r25, Y+8	; 0x08
 35a:	81 30       	cpi	r24, 0x01	; 1
 35c:	91 05       	cpc	r25, r1
 35e:	59 f1       	breq	.+86     	; 0x3b6 <DIO_U8SetPinValue+0x96>
 360:	2f 81       	ldd	r18, Y+7	; 0x07
 362:	38 85       	ldd	r19, Y+8	; 0x08
 364:	22 30       	cpi	r18, 0x02	; 2
 366:	31 05       	cpc	r19, r1
 368:	2c f4       	brge	.+10     	; 0x374 <DIO_U8SetPinValue+0x54>
 36a:	8f 81       	ldd	r24, Y+7	; 0x07
 36c:	98 85       	ldd	r25, Y+8	; 0x08
 36e:	00 97       	sbiw	r24, 0x00	; 0
 370:	69 f0       	breq	.+26     	; 0x38c <DIO_U8SetPinValue+0x6c>
 372:	60 c0       	rjmp	.+192    	; 0x434 <DIO_U8SetPinValue+0x114>
 374:	2f 81       	ldd	r18, Y+7	; 0x07
 376:	38 85       	ldd	r19, Y+8	; 0x08
 378:	22 30       	cpi	r18, 0x02	; 2
 37a:	31 05       	cpc	r19, r1
 37c:	89 f1       	breq	.+98     	; 0x3e0 <DIO_U8SetPinValue+0xc0>
 37e:	8f 81       	ldd	r24, Y+7	; 0x07
 380:	98 85       	ldd	r25, Y+8	; 0x08
 382:	83 30       	cpi	r24, 0x03	; 3
 384:	91 05       	cpc	r25, r1
 386:	09 f4       	brne	.+2      	; 0x38a <DIO_U8SetPinValue+0x6a>
 388:	40 c0       	rjmp	.+128    	; 0x40a <DIO_U8SetPinValue+0xea>
 38a:	54 c0       	rjmp	.+168    	; 0x434 <DIO_U8SetPinValue+0x114>
			{
			case DIO_PORTA : CLR_BIT(PORTA,copy_PinNum); break ;
 38c:	ab e3       	ldi	r26, 0x3B	; 59
 38e:	b0 e0       	ldi	r27, 0x00	; 0
 390:	eb e3       	ldi	r30, 0x3B	; 59
 392:	f0 e0       	ldi	r31, 0x00	; 0
 394:	80 81       	ld	r24, Z
 396:	48 2f       	mov	r20, r24
 398:	8b 81       	ldd	r24, Y+3	; 0x03
 39a:	28 2f       	mov	r18, r24
 39c:	30 e0       	ldi	r19, 0x00	; 0
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	02 2e       	mov	r0, r18
 3a4:	02 c0       	rjmp	.+4      	; 0x3aa <DIO_U8SetPinValue+0x8a>
 3a6:	88 0f       	add	r24, r24
 3a8:	99 1f       	adc	r25, r25
 3aa:	0a 94       	dec	r0
 3ac:	e2 f7       	brpl	.-8      	; 0x3a6 <DIO_U8SetPinValue+0x86>
 3ae:	80 95       	com	r24
 3b0:	84 23       	and	r24, r20
 3b2:	8c 93       	st	X, r24
 3b4:	bd c0       	rjmp	.+378    	; 0x530 <DIO_U8SetPinValue+0x210>
			case DIO_PORTB : CLR_BIT(PORTB,copy_PinNum); break ;
 3b6:	a8 e3       	ldi	r26, 0x38	; 56
 3b8:	b0 e0       	ldi	r27, 0x00	; 0
 3ba:	e8 e3       	ldi	r30, 0x38	; 56
 3bc:	f0 e0       	ldi	r31, 0x00	; 0
 3be:	80 81       	ld	r24, Z
 3c0:	48 2f       	mov	r20, r24
 3c2:	8b 81       	ldd	r24, Y+3	; 0x03
 3c4:	28 2f       	mov	r18, r24
 3c6:	30 e0       	ldi	r19, 0x00	; 0
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	02 2e       	mov	r0, r18
 3ce:	02 c0       	rjmp	.+4      	; 0x3d4 <DIO_U8SetPinValue+0xb4>
 3d0:	88 0f       	add	r24, r24
 3d2:	99 1f       	adc	r25, r25
 3d4:	0a 94       	dec	r0
 3d6:	e2 f7       	brpl	.-8      	; 0x3d0 <DIO_U8SetPinValue+0xb0>
 3d8:	80 95       	com	r24
 3da:	84 23       	and	r24, r20
 3dc:	8c 93       	st	X, r24
 3de:	a8 c0       	rjmp	.+336    	; 0x530 <DIO_U8SetPinValue+0x210>
			case DIO_PORTC : CLR_BIT(PORTC,copy_PinNum); break ;
 3e0:	a5 e3       	ldi	r26, 0x35	; 53
 3e2:	b0 e0       	ldi	r27, 0x00	; 0
 3e4:	e5 e3       	ldi	r30, 0x35	; 53
 3e6:	f0 e0       	ldi	r31, 0x00	; 0
 3e8:	80 81       	ld	r24, Z
 3ea:	48 2f       	mov	r20, r24
 3ec:	8b 81       	ldd	r24, Y+3	; 0x03
 3ee:	28 2f       	mov	r18, r24
 3f0:	30 e0       	ldi	r19, 0x00	; 0
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	02 2e       	mov	r0, r18
 3f8:	02 c0       	rjmp	.+4      	; 0x3fe <DIO_U8SetPinValue+0xde>
 3fa:	88 0f       	add	r24, r24
 3fc:	99 1f       	adc	r25, r25
 3fe:	0a 94       	dec	r0
 400:	e2 f7       	brpl	.-8      	; 0x3fa <DIO_U8SetPinValue+0xda>
 402:	80 95       	com	r24
 404:	84 23       	and	r24, r20
 406:	8c 93       	st	X, r24
 408:	93 c0       	rjmp	.+294    	; 0x530 <DIO_U8SetPinValue+0x210>
			case DIO_PORTD : CLR_BIT(PORTD,copy_PinNum); break ;
 40a:	a2 e3       	ldi	r26, 0x32	; 50
 40c:	b0 e0       	ldi	r27, 0x00	; 0
 40e:	e2 e3       	ldi	r30, 0x32	; 50
 410:	f0 e0       	ldi	r31, 0x00	; 0
 412:	80 81       	ld	r24, Z
 414:	48 2f       	mov	r20, r24
 416:	8b 81       	ldd	r24, Y+3	; 0x03
 418:	28 2f       	mov	r18, r24
 41a:	30 e0       	ldi	r19, 0x00	; 0
 41c:	81 e0       	ldi	r24, 0x01	; 1
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	02 2e       	mov	r0, r18
 422:	02 c0       	rjmp	.+4      	; 0x428 <DIO_U8SetPinValue+0x108>
 424:	88 0f       	add	r24, r24
 426:	99 1f       	adc	r25, r25
 428:	0a 94       	dec	r0
 42a:	e2 f7       	brpl	.-8      	; 0x424 <DIO_U8SetPinValue+0x104>
 42c:	80 95       	com	r24
 42e:	84 23       	and	r24, r20
 430:	8c 93       	st	X, r24
 432:	7e c0       	rjmp	.+252    	; 0x530 <DIO_U8SetPinValue+0x210>
			default : Local_u8ErrorState = NOK ; break ;
 434:	81 e0       	ldi	r24, 0x01	; 1
 436:	89 83       	std	Y+1, r24	; 0x01
 438:	7b c0       	rjmp	.+246    	; 0x530 <DIO_U8SetPinValue+0x210>
			}
		}
		else if (copy_Val==DIO_PIN_HIGH)
 43a:	8c 81       	ldd	r24, Y+4	; 0x04
 43c:	81 30       	cpi	r24, 0x01	; 1
 43e:	09 f0       	breq	.+2      	; 0x442 <DIO_U8SetPinValue+0x122>
 440:	72 c0       	rjmp	.+228    	; 0x526 <DIO_U8SetPinValue+0x206>
		{
			switch (copy_Port)
 442:	8a 81       	ldd	r24, Y+2	; 0x02
 444:	28 2f       	mov	r18, r24
 446:	30 e0       	ldi	r19, 0x00	; 0
 448:	3e 83       	std	Y+6, r19	; 0x06
 44a:	2d 83       	std	Y+5, r18	; 0x05
 44c:	8d 81       	ldd	r24, Y+5	; 0x05
 44e:	9e 81       	ldd	r25, Y+6	; 0x06
 450:	81 30       	cpi	r24, 0x01	; 1
 452:	91 05       	cpc	r25, r1
 454:	49 f1       	breq	.+82     	; 0x4a8 <DIO_U8SetPinValue+0x188>
 456:	2d 81       	ldd	r18, Y+5	; 0x05
 458:	3e 81       	ldd	r19, Y+6	; 0x06
 45a:	22 30       	cpi	r18, 0x02	; 2
 45c:	31 05       	cpc	r19, r1
 45e:	2c f4       	brge	.+10     	; 0x46a <DIO_U8SetPinValue+0x14a>
 460:	8d 81       	ldd	r24, Y+5	; 0x05
 462:	9e 81       	ldd	r25, Y+6	; 0x06
 464:	00 97       	sbiw	r24, 0x00	; 0
 466:	61 f0       	breq	.+24     	; 0x480 <DIO_U8SetPinValue+0x160>
 468:	5b c0       	rjmp	.+182    	; 0x520 <DIO_U8SetPinValue+0x200>
 46a:	2d 81       	ldd	r18, Y+5	; 0x05
 46c:	3e 81       	ldd	r19, Y+6	; 0x06
 46e:	22 30       	cpi	r18, 0x02	; 2
 470:	31 05       	cpc	r19, r1
 472:	71 f1       	breq	.+92     	; 0x4d0 <DIO_U8SetPinValue+0x1b0>
 474:	8d 81       	ldd	r24, Y+5	; 0x05
 476:	9e 81       	ldd	r25, Y+6	; 0x06
 478:	83 30       	cpi	r24, 0x03	; 3
 47a:	91 05       	cpc	r25, r1
 47c:	e9 f1       	breq	.+122    	; 0x4f8 <DIO_U8SetPinValue+0x1d8>
 47e:	50 c0       	rjmp	.+160    	; 0x520 <DIO_U8SetPinValue+0x200>
			{
			case DIO_PORTA : SET_BIT(PORTA,copy_PinNum); break ;
 480:	ab e3       	ldi	r26, 0x3B	; 59
 482:	b0 e0       	ldi	r27, 0x00	; 0
 484:	eb e3       	ldi	r30, 0x3B	; 59
 486:	f0 e0       	ldi	r31, 0x00	; 0
 488:	80 81       	ld	r24, Z
 48a:	48 2f       	mov	r20, r24
 48c:	8b 81       	ldd	r24, Y+3	; 0x03
 48e:	28 2f       	mov	r18, r24
 490:	30 e0       	ldi	r19, 0x00	; 0
 492:	81 e0       	ldi	r24, 0x01	; 1
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	02 2e       	mov	r0, r18
 498:	02 c0       	rjmp	.+4      	; 0x49e <DIO_U8SetPinValue+0x17e>
 49a:	88 0f       	add	r24, r24
 49c:	99 1f       	adc	r25, r25
 49e:	0a 94       	dec	r0
 4a0:	e2 f7       	brpl	.-8      	; 0x49a <DIO_U8SetPinValue+0x17a>
 4a2:	84 2b       	or	r24, r20
 4a4:	8c 93       	st	X, r24
 4a6:	44 c0       	rjmp	.+136    	; 0x530 <DIO_U8SetPinValue+0x210>
			case DIO_PORTB : SET_BIT(PORTB,copy_PinNum); break ;
 4a8:	a8 e3       	ldi	r26, 0x38	; 56
 4aa:	b0 e0       	ldi	r27, 0x00	; 0
 4ac:	e8 e3       	ldi	r30, 0x38	; 56
 4ae:	f0 e0       	ldi	r31, 0x00	; 0
 4b0:	80 81       	ld	r24, Z
 4b2:	48 2f       	mov	r20, r24
 4b4:	8b 81       	ldd	r24, Y+3	; 0x03
 4b6:	28 2f       	mov	r18, r24
 4b8:	30 e0       	ldi	r19, 0x00	; 0
 4ba:	81 e0       	ldi	r24, 0x01	; 1
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	02 2e       	mov	r0, r18
 4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <DIO_U8SetPinValue+0x1a6>
 4c2:	88 0f       	add	r24, r24
 4c4:	99 1f       	adc	r25, r25
 4c6:	0a 94       	dec	r0
 4c8:	e2 f7       	brpl	.-8      	; 0x4c2 <DIO_U8SetPinValue+0x1a2>
 4ca:	84 2b       	or	r24, r20
 4cc:	8c 93       	st	X, r24
 4ce:	30 c0       	rjmp	.+96     	; 0x530 <DIO_U8SetPinValue+0x210>
			case DIO_PORTC : SET_BIT(PORTC,copy_PinNum); break ;
 4d0:	a5 e3       	ldi	r26, 0x35	; 53
 4d2:	b0 e0       	ldi	r27, 0x00	; 0
 4d4:	e5 e3       	ldi	r30, 0x35	; 53
 4d6:	f0 e0       	ldi	r31, 0x00	; 0
 4d8:	80 81       	ld	r24, Z
 4da:	48 2f       	mov	r20, r24
 4dc:	8b 81       	ldd	r24, Y+3	; 0x03
 4de:	28 2f       	mov	r18, r24
 4e0:	30 e0       	ldi	r19, 0x00	; 0
 4e2:	81 e0       	ldi	r24, 0x01	; 1
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	02 2e       	mov	r0, r18
 4e8:	02 c0       	rjmp	.+4      	; 0x4ee <DIO_U8SetPinValue+0x1ce>
 4ea:	88 0f       	add	r24, r24
 4ec:	99 1f       	adc	r25, r25
 4ee:	0a 94       	dec	r0
 4f0:	e2 f7       	brpl	.-8      	; 0x4ea <DIO_U8SetPinValue+0x1ca>
 4f2:	84 2b       	or	r24, r20
 4f4:	8c 93       	st	X, r24
 4f6:	1c c0       	rjmp	.+56     	; 0x530 <DIO_U8SetPinValue+0x210>
			case DIO_PORTD : SET_BIT(PORTD,copy_PinNum); break ;
 4f8:	a2 e3       	ldi	r26, 0x32	; 50
 4fa:	b0 e0       	ldi	r27, 0x00	; 0
 4fc:	e2 e3       	ldi	r30, 0x32	; 50
 4fe:	f0 e0       	ldi	r31, 0x00	; 0
 500:	80 81       	ld	r24, Z
 502:	48 2f       	mov	r20, r24
 504:	8b 81       	ldd	r24, Y+3	; 0x03
 506:	28 2f       	mov	r18, r24
 508:	30 e0       	ldi	r19, 0x00	; 0
 50a:	81 e0       	ldi	r24, 0x01	; 1
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	02 2e       	mov	r0, r18
 510:	02 c0       	rjmp	.+4      	; 0x516 <DIO_U8SetPinValue+0x1f6>
 512:	88 0f       	add	r24, r24
 514:	99 1f       	adc	r25, r25
 516:	0a 94       	dec	r0
 518:	e2 f7       	brpl	.-8      	; 0x512 <DIO_U8SetPinValue+0x1f2>
 51a:	84 2b       	or	r24, r20
 51c:	8c 93       	st	X, r24
 51e:	08 c0       	rjmp	.+16     	; 0x530 <DIO_U8SetPinValue+0x210>
			default : Local_u8ErrorState = NOK ; break ;
 520:	81 e0       	ldi	r24, 0x01	; 1
 522:	89 83       	std	Y+1, r24	; 0x01
 524:	05 c0       	rjmp	.+10     	; 0x530 <DIO_U8SetPinValue+0x210>
			}
		}
		else
		{
			Local_u8ErrorState = NOK ;
 526:	81 e0       	ldi	r24, 0x01	; 1
 528:	89 83       	std	Y+1, r24	; 0x01
 52a:	02 c0       	rjmp	.+4      	; 0x530 <DIO_U8SetPinValue+0x210>
		}
	}
	else
	{
		Local_u8ErrorState = NOK ;
 52c:	81 e0       	ldi	r24, 0x01	; 1
 52e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
 530:	89 81       	ldd	r24, Y+1	; 0x01
}
 532:	28 96       	adiw	r28, 0x08	; 8
 534:	0f b6       	in	r0, 0x3f	; 63
 536:	f8 94       	cli
 538:	de bf       	out	0x3e, r29	; 62
 53a:	0f be       	out	0x3f, r0	; 63
 53c:	cd bf       	out	0x3d, r28	; 61
 53e:	cf 91       	pop	r28
 540:	df 91       	pop	r29
 542:	08 95       	ret

00000544 <DIO_U8SetPortValue>:
uint8 DIO_U8SetPortValue    	(DIO_Port_t copy_Port,	 uint8 copy_u8PortVal)
{
 544:	df 93       	push	r29
 546:	cf 93       	push	r28
 548:	00 d0       	rcall	.+0      	; 0x54a <DIO_U8SetPortValue+0x6>
 54a:	00 d0       	rcall	.+0      	; 0x54c <DIO_U8SetPortValue+0x8>
 54c:	0f 92       	push	r0
 54e:	cd b7       	in	r28, 0x3d	; 61
 550:	de b7       	in	r29, 0x3e	; 62
 552:	8a 83       	std	Y+2, r24	; 0x02
 554:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK ;
 556:	19 82       	std	Y+1, r1	; 0x01
	switch (copy_Port)
 558:	8a 81       	ldd	r24, Y+2	; 0x02
 55a:	28 2f       	mov	r18, r24
 55c:	30 e0       	ldi	r19, 0x00	; 0
 55e:	3d 83       	std	Y+5, r19	; 0x05
 560:	2c 83       	std	Y+4, r18	; 0x04
 562:	8c 81       	ldd	r24, Y+4	; 0x04
 564:	9d 81       	ldd	r25, Y+5	; 0x05
 566:	81 30       	cpi	r24, 0x01	; 1
 568:	91 05       	cpc	r25, r1
 56a:	d1 f0       	breq	.+52     	; 0x5a0 <DIO_U8SetPortValue+0x5c>
 56c:	2c 81       	ldd	r18, Y+4	; 0x04
 56e:	3d 81       	ldd	r19, Y+5	; 0x05
 570:	22 30       	cpi	r18, 0x02	; 2
 572:	31 05       	cpc	r19, r1
 574:	2c f4       	brge	.+10     	; 0x580 <DIO_U8SetPortValue+0x3c>
 576:	8c 81       	ldd	r24, Y+4	; 0x04
 578:	9d 81       	ldd	r25, Y+5	; 0x05
 57a:	00 97       	sbiw	r24, 0x00	; 0
 57c:	61 f0       	breq	.+24     	; 0x596 <DIO_U8SetPortValue+0x52>
 57e:	1f c0       	rjmp	.+62     	; 0x5be <DIO_U8SetPortValue+0x7a>
 580:	2c 81       	ldd	r18, Y+4	; 0x04
 582:	3d 81       	ldd	r19, Y+5	; 0x05
 584:	22 30       	cpi	r18, 0x02	; 2
 586:	31 05       	cpc	r19, r1
 588:	81 f0       	breq	.+32     	; 0x5aa <DIO_U8SetPortValue+0x66>
 58a:	8c 81       	ldd	r24, Y+4	; 0x04
 58c:	9d 81       	ldd	r25, Y+5	; 0x05
 58e:	83 30       	cpi	r24, 0x03	; 3
 590:	91 05       	cpc	r25, r1
 592:	81 f0       	breq	.+32     	; 0x5b4 <DIO_U8SetPortValue+0x70>
 594:	14 c0       	rjmp	.+40     	; 0x5be <DIO_U8SetPortValue+0x7a>
	{
	case DIO_PORTA : PORTA = copy_u8PortVal ; break ;
 596:	eb e3       	ldi	r30, 0x3B	; 59
 598:	f0 e0       	ldi	r31, 0x00	; 0
 59a:	8b 81       	ldd	r24, Y+3	; 0x03
 59c:	80 83       	st	Z, r24
 59e:	11 c0       	rjmp	.+34     	; 0x5c2 <DIO_U8SetPortValue+0x7e>
	case DIO_PORTB : PORTB = copy_u8PortVal ; break ;
 5a0:	e8 e3       	ldi	r30, 0x38	; 56
 5a2:	f0 e0       	ldi	r31, 0x00	; 0
 5a4:	8b 81       	ldd	r24, Y+3	; 0x03
 5a6:	80 83       	st	Z, r24
 5a8:	0c c0       	rjmp	.+24     	; 0x5c2 <DIO_U8SetPortValue+0x7e>
	case DIO_PORTC : PORTC = copy_u8PortVal ; break ;
 5aa:	e5 e3       	ldi	r30, 0x35	; 53
 5ac:	f0 e0       	ldi	r31, 0x00	; 0
 5ae:	8b 81       	ldd	r24, Y+3	; 0x03
 5b0:	80 83       	st	Z, r24
 5b2:	07 c0       	rjmp	.+14     	; 0x5c2 <DIO_U8SetPortValue+0x7e>
	case DIO_PORTD : PORTD = copy_u8PortVal ; break ;
 5b4:	e2 e3       	ldi	r30, 0x32	; 50
 5b6:	f0 e0       	ldi	r31, 0x00	; 0
 5b8:	8b 81       	ldd	r24, Y+3	; 0x03
 5ba:	80 83       	st	Z, r24
 5bc:	02 c0       	rjmp	.+4      	; 0x5c2 <DIO_U8SetPortValue+0x7e>
	default : Local_u8ErrorState = NOK      ; break ;
 5be:	81 e0       	ldi	r24, 0x01	; 1
 5c0:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
 5c2:	89 81       	ldd	r24, Y+1	; 0x01
}
 5c4:	0f 90       	pop	r0
 5c6:	0f 90       	pop	r0
 5c8:	0f 90       	pop	r0
 5ca:	0f 90       	pop	r0
 5cc:	0f 90       	pop	r0
 5ce:	cf 91       	pop	r28
 5d0:	df 91       	pop	r29
 5d2:	08 95       	ret

000005d4 <DIO_u8GetPinValue>:

uint8 DIO_u8GetPinValue 		(DIO_Port_t copy_port,   DIO_Pin_t copy_PinNum, 	DIO_PinVal_t* copy_pVal )
{
 5d4:	df 93       	push	r29
 5d6:	cf 93       	push	r28
 5d8:	cd b7       	in	r28, 0x3d	; 61
 5da:	de b7       	in	r29, 0x3e	; 62
 5dc:	27 97       	sbiw	r28, 0x07	; 7
 5de:	0f b6       	in	r0, 0x3f	; 63
 5e0:	f8 94       	cli
 5e2:	de bf       	out	0x3e, r29	; 62
 5e4:	0f be       	out	0x3f, r0	; 63
 5e6:	cd bf       	out	0x3d, r28	; 61
 5e8:	8a 83       	std	Y+2, r24	; 0x02
 5ea:	6b 83       	std	Y+3, r22	; 0x03
 5ec:	5d 83       	std	Y+5, r21	; 0x05
 5ee:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK ;
 5f0:	19 82       	std	Y+1, r1	; 0x01
	if (copy_pVal != NULL)
 5f2:	8c 81       	ldd	r24, Y+4	; 0x04
 5f4:	9d 81       	ldd	r25, Y+5	; 0x05
 5f6:	00 97       	sbiw	r24, 0x00	; 0
 5f8:	09 f4       	brne	.+2      	; 0x5fc <DIO_u8GetPinValue+0x28>
 5fa:	7b c0       	rjmp	.+246    	; 0x6f2 <DIO_u8GetPinValue+0x11e>
	{
		if ( (copy_PinNum >= DIO_PIN0) && (copy_PinNum <= DIO_PIN7) )
 5fc:	8b 81       	ldd	r24, Y+3	; 0x03
 5fe:	88 30       	cpi	r24, 0x08	; 8
 600:	08 f0       	brcs	.+2      	; 0x604 <DIO_u8GetPinValue+0x30>
 602:	74 c0       	rjmp	.+232    	; 0x6ec <DIO_u8GetPinValue+0x118>
		{
			switch (copy_port)
 604:	8a 81       	ldd	r24, Y+2	; 0x02
 606:	28 2f       	mov	r18, r24
 608:	30 e0       	ldi	r19, 0x00	; 0
 60a:	3f 83       	std	Y+7, r19	; 0x07
 60c:	2e 83       	std	Y+6, r18	; 0x06
 60e:	4e 81       	ldd	r20, Y+6	; 0x06
 610:	5f 81       	ldd	r21, Y+7	; 0x07
 612:	41 30       	cpi	r20, 0x01	; 1
 614:	51 05       	cpc	r21, r1
 616:	59 f1       	breq	.+86     	; 0x66e <DIO_u8GetPinValue+0x9a>
 618:	8e 81       	ldd	r24, Y+6	; 0x06
 61a:	9f 81       	ldd	r25, Y+7	; 0x07
 61c:	82 30       	cpi	r24, 0x02	; 2
 61e:	91 05       	cpc	r25, r1
 620:	34 f4       	brge	.+12     	; 0x62e <DIO_u8GetPinValue+0x5a>
 622:	2e 81       	ldd	r18, Y+6	; 0x06
 624:	3f 81       	ldd	r19, Y+7	; 0x07
 626:	21 15       	cp	r18, r1
 628:	31 05       	cpc	r19, r1
 62a:	69 f0       	breq	.+26     	; 0x646 <DIO_u8GetPinValue+0x72>
 62c:	5c c0       	rjmp	.+184    	; 0x6e6 <DIO_u8GetPinValue+0x112>
 62e:	4e 81       	ldd	r20, Y+6	; 0x06
 630:	5f 81       	ldd	r21, Y+7	; 0x07
 632:	42 30       	cpi	r20, 0x02	; 2
 634:	51 05       	cpc	r21, r1
 636:	79 f1       	breq	.+94     	; 0x696 <DIO_u8GetPinValue+0xc2>
 638:	8e 81       	ldd	r24, Y+6	; 0x06
 63a:	9f 81       	ldd	r25, Y+7	; 0x07
 63c:	83 30       	cpi	r24, 0x03	; 3
 63e:	91 05       	cpc	r25, r1
 640:	09 f4       	brne	.+2      	; 0x644 <DIO_u8GetPinValue+0x70>
 642:	3d c0       	rjmp	.+122    	; 0x6be <DIO_u8GetPinValue+0xea>
 644:	50 c0       	rjmp	.+160    	; 0x6e6 <DIO_u8GetPinValue+0x112>
			{
			case DIO_PORTA : *copy_pVal = GET_BIT(PINA , copy_PinNum) ; break ;
 646:	e9 e3       	ldi	r30, 0x39	; 57
 648:	f0 e0       	ldi	r31, 0x00	; 0
 64a:	80 81       	ld	r24, Z
 64c:	28 2f       	mov	r18, r24
 64e:	30 e0       	ldi	r19, 0x00	; 0
 650:	8b 81       	ldd	r24, Y+3	; 0x03
 652:	88 2f       	mov	r24, r24
 654:	90 e0       	ldi	r25, 0x00	; 0
 656:	a9 01       	movw	r20, r18
 658:	02 c0       	rjmp	.+4      	; 0x65e <DIO_u8GetPinValue+0x8a>
 65a:	55 95       	asr	r21
 65c:	47 95       	ror	r20
 65e:	8a 95       	dec	r24
 660:	e2 f7       	brpl	.-8      	; 0x65a <DIO_u8GetPinValue+0x86>
 662:	ca 01       	movw	r24, r20
 664:	81 70       	andi	r24, 0x01	; 1
 666:	ec 81       	ldd	r30, Y+4	; 0x04
 668:	fd 81       	ldd	r31, Y+5	; 0x05
 66a:	80 83       	st	Z, r24
 66c:	44 c0       	rjmp	.+136    	; 0x6f6 <DIO_u8GetPinValue+0x122>
			case DIO_PORTB : *copy_pVal = GET_BIT(PINB , copy_PinNum) ; break ;
 66e:	e6 e3       	ldi	r30, 0x36	; 54
 670:	f0 e0       	ldi	r31, 0x00	; 0
 672:	80 81       	ld	r24, Z
 674:	28 2f       	mov	r18, r24
 676:	30 e0       	ldi	r19, 0x00	; 0
 678:	8b 81       	ldd	r24, Y+3	; 0x03
 67a:	88 2f       	mov	r24, r24
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	a9 01       	movw	r20, r18
 680:	02 c0       	rjmp	.+4      	; 0x686 <DIO_u8GetPinValue+0xb2>
 682:	55 95       	asr	r21
 684:	47 95       	ror	r20
 686:	8a 95       	dec	r24
 688:	e2 f7       	brpl	.-8      	; 0x682 <DIO_u8GetPinValue+0xae>
 68a:	ca 01       	movw	r24, r20
 68c:	81 70       	andi	r24, 0x01	; 1
 68e:	ec 81       	ldd	r30, Y+4	; 0x04
 690:	fd 81       	ldd	r31, Y+5	; 0x05
 692:	80 83       	st	Z, r24
 694:	30 c0       	rjmp	.+96     	; 0x6f6 <DIO_u8GetPinValue+0x122>
			case DIO_PORTC : *copy_pVal = GET_BIT(PINC , copy_PinNum) ; break ;
 696:	e3 e3       	ldi	r30, 0x33	; 51
 698:	f0 e0       	ldi	r31, 0x00	; 0
 69a:	80 81       	ld	r24, Z
 69c:	28 2f       	mov	r18, r24
 69e:	30 e0       	ldi	r19, 0x00	; 0
 6a0:	8b 81       	ldd	r24, Y+3	; 0x03
 6a2:	88 2f       	mov	r24, r24
 6a4:	90 e0       	ldi	r25, 0x00	; 0
 6a6:	a9 01       	movw	r20, r18
 6a8:	02 c0       	rjmp	.+4      	; 0x6ae <DIO_u8GetPinValue+0xda>
 6aa:	55 95       	asr	r21
 6ac:	47 95       	ror	r20
 6ae:	8a 95       	dec	r24
 6b0:	e2 f7       	brpl	.-8      	; 0x6aa <DIO_u8GetPinValue+0xd6>
 6b2:	ca 01       	movw	r24, r20
 6b4:	81 70       	andi	r24, 0x01	; 1
 6b6:	ec 81       	ldd	r30, Y+4	; 0x04
 6b8:	fd 81       	ldd	r31, Y+5	; 0x05
 6ba:	80 83       	st	Z, r24
 6bc:	1c c0       	rjmp	.+56     	; 0x6f6 <DIO_u8GetPinValue+0x122>
			case DIO_PORTD : *copy_pVal = GET_BIT(PIND , copy_PinNum) ; break ;
 6be:	e0 e3       	ldi	r30, 0x30	; 48
 6c0:	f0 e0       	ldi	r31, 0x00	; 0
 6c2:	80 81       	ld	r24, Z
 6c4:	28 2f       	mov	r18, r24
 6c6:	30 e0       	ldi	r19, 0x00	; 0
 6c8:	8b 81       	ldd	r24, Y+3	; 0x03
 6ca:	88 2f       	mov	r24, r24
 6cc:	90 e0       	ldi	r25, 0x00	; 0
 6ce:	a9 01       	movw	r20, r18
 6d0:	02 c0       	rjmp	.+4      	; 0x6d6 <DIO_u8GetPinValue+0x102>
 6d2:	55 95       	asr	r21
 6d4:	47 95       	ror	r20
 6d6:	8a 95       	dec	r24
 6d8:	e2 f7       	brpl	.-8      	; 0x6d2 <DIO_u8GetPinValue+0xfe>
 6da:	ca 01       	movw	r24, r20
 6dc:	81 70       	andi	r24, 0x01	; 1
 6de:	ec 81       	ldd	r30, Y+4	; 0x04
 6e0:	fd 81       	ldd	r31, Y+5	; 0x05
 6e2:	80 83       	st	Z, r24
 6e4:	08 c0       	rjmp	.+16     	; 0x6f6 <DIO_u8GetPinValue+0x122>
			default : Local_u8ErrorState = NOK ; break ;
 6e6:	81 e0       	ldi	r24, 0x01	; 1
 6e8:	89 83       	std	Y+1, r24	; 0x01
 6ea:	05 c0       	rjmp	.+10     	; 0x6f6 <DIO_u8GetPinValue+0x122>
			}
		}
		else
		{
			Local_u8ErrorState = NOK ;
 6ec:	81 e0       	ldi	r24, 0x01	; 1
 6ee:	89 83       	std	Y+1, r24	; 0x01
 6f0:	02 c0       	rjmp	.+4      	; 0x6f6 <DIO_u8GetPinValue+0x122>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR ;
 6f2:	82 e0       	ldi	r24, 0x02	; 2
 6f4:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
 6f6:	89 81       	ldd	r24, Y+1	; 0x01
}
 6f8:	27 96       	adiw	r28, 0x07	; 7
 6fa:	0f b6       	in	r0, 0x3f	; 63
 6fc:	f8 94       	cli
 6fe:	de bf       	out	0x3e, r29	; 62
 700:	0f be       	out	0x3f, r0	; 63
 702:	cd bf       	out	0x3d, r28	; 61
 704:	cf 91       	pop	r28
 706:	df 91       	pop	r29
 708:	08 95       	ret

0000070a <DIO_u8TogglePinValue>:

uint8 DIO_u8TogglePinValue		(DIO_Port_t copy_Port,	 DIO_Pin_t copy_PinNum)
{
 70a:	df 93       	push	r29
 70c:	cf 93       	push	r28
 70e:	00 d0       	rcall	.+0      	; 0x710 <DIO_u8TogglePinValue+0x6>
 710:	00 d0       	rcall	.+0      	; 0x712 <DIO_u8TogglePinValue+0x8>
 712:	0f 92       	push	r0
 714:	cd b7       	in	r28, 0x3d	; 61
 716:	de b7       	in	r29, 0x3e	; 62
 718:	8a 83       	std	Y+2, r24	; 0x02
 71a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK ;
 71c:	19 82       	std	Y+1, r1	; 0x01
	if ( (copy_PinNum >= DIO_PIN0 ) && (copy_PinNum <= DIO_PIN7 ) )
 71e:	8b 81       	ldd	r24, Y+3	; 0x03
 720:	88 30       	cpi	r24, 0x08	; 8
 722:	08 f0       	brcs	.+2      	; 0x726 <DIO_u8TogglePinValue+0x1c>
 724:	72 c0       	rjmp	.+228    	; 0x80a <DIO_u8TogglePinValue+0x100>
	{
		switch (copy_Port)
 726:	8a 81       	ldd	r24, Y+2	; 0x02
 728:	28 2f       	mov	r18, r24
 72a:	30 e0       	ldi	r19, 0x00	; 0
 72c:	3d 83       	std	Y+5, r19	; 0x05
 72e:	2c 83       	std	Y+4, r18	; 0x04
 730:	8c 81       	ldd	r24, Y+4	; 0x04
 732:	9d 81       	ldd	r25, Y+5	; 0x05
 734:	81 30       	cpi	r24, 0x01	; 1
 736:	91 05       	cpc	r25, r1
 738:	49 f1       	breq	.+82     	; 0x78c <DIO_u8TogglePinValue+0x82>
 73a:	2c 81       	ldd	r18, Y+4	; 0x04
 73c:	3d 81       	ldd	r19, Y+5	; 0x05
 73e:	22 30       	cpi	r18, 0x02	; 2
 740:	31 05       	cpc	r19, r1
 742:	2c f4       	brge	.+10     	; 0x74e <DIO_u8TogglePinValue+0x44>
 744:	8c 81       	ldd	r24, Y+4	; 0x04
 746:	9d 81       	ldd	r25, Y+5	; 0x05
 748:	00 97       	sbiw	r24, 0x00	; 0
 74a:	61 f0       	breq	.+24     	; 0x764 <DIO_u8TogglePinValue+0x5a>
 74c:	5b c0       	rjmp	.+182    	; 0x804 <DIO_u8TogglePinValue+0xfa>
 74e:	2c 81       	ldd	r18, Y+4	; 0x04
 750:	3d 81       	ldd	r19, Y+5	; 0x05
 752:	22 30       	cpi	r18, 0x02	; 2
 754:	31 05       	cpc	r19, r1
 756:	71 f1       	breq	.+92     	; 0x7b4 <DIO_u8TogglePinValue+0xaa>
 758:	8c 81       	ldd	r24, Y+4	; 0x04
 75a:	9d 81       	ldd	r25, Y+5	; 0x05
 75c:	83 30       	cpi	r24, 0x03	; 3
 75e:	91 05       	cpc	r25, r1
 760:	e9 f1       	breq	.+122    	; 0x7dc <DIO_u8TogglePinValue+0xd2>
 762:	50 c0       	rjmp	.+160    	; 0x804 <DIO_u8TogglePinValue+0xfa>
					{
					case DIO_PORTA : TOG_BIT(PORTA,copy_PinNum); break ;
 764:	ab e3       	ldi	r26, 0x3B	; 59
 766:	b0 e0       	ldi	r27, 0x00	; 0
 768:	eb e3       	ldi	r30, 0x3B	; 59
 76a:	f0 e0       	ldi	r31, 0x00	; 0
 76c:	80 81       	ld	r24, Z
 76e:	48 2f       	mov	r20, r24
 770:	8b 81       	ldd	r24, Y+3	; 0x03
 772:	28 2f       	mov	r18, r24
 774:	30 e0       	ldi	r19, 0x00	; 0
 776:	81 e0       	ldi	r24, 0x01	; 1
 778:	90 e0       	ldi	r25, 0x00	; 0
 77a:	02 2e       	mov	r0, r18
 77c:	02 c0       	rjmp	.+4      	; 0x782 <DIO_u8TogglePinValue+0x78>
 77e:	88 0f       	add	r24, r24
 780:	99 1f       	adc	r25, r25
 782:	0a 94       	dec	r0
 784:	e2 f7       	brpl	.-8      	; 0x77e <DIO_u8TogglePinValue+0x74>
 786:	84 27       	eor	r24, r20
 788:	8c 93       	st	X, r24
 78a:	41 c0       	rjmp	.+130    	; 0x80e <DIO_u8TogglePinValue+0x104>
					case DIO_PORTB : TOG_BIT(PORTB,copy_PinNum); break ;
 78c:	a8 e3       	ldi	r26, 0x38	; 56
 78e:	b0 e0       	ldi	r27, 0x00	; 0
 790:	e8 e3       	ldi	r30, 0x38	; 56
 792:	f0 e0       	ldi	r31, 0x00	; 0
 794:	80 81       	ld	r24, Z
 796:	48 2f       	mov	r20, r24
 798:	8b 81       	ldd	r24, Y+3	; 0x03
 79a:	28 2f       	mov	r18, r24
 79c:	30 e0       	ldi	r19, 0x00	; 0
 79e:	81 e0       	ldi	r24, 0x01	; 1
 7a0:	90 e0       	ldi	r25, 0x00	; 0
 7a2:	02 2e       	mov	r0, r18
 7a4:	02 c0       	rjmp	.+4      	; 0x7aa <DIO_u8TogglePinValue+0xa0>
 7a6:	88 0f       	add	r24, r24
 7a8:	99 1f       	adc	r25, r25
 7aa:	0a 94       	dec	r0
 7ac:	e2 f7       	brpl	.-8      	; 0x7a6 <DIO_u8TogglePinValue+0x9c>
 7ae:	84 27       	eor	r24, r20
 7b0:	8c 93       	st	X, r24
 7b2:	2d c0       	rjmp	.+90     	; 0x80e <DIO_u8TogglePinValue+0x104>
					case DIO_PORTC : TOG_BIT(PORTC,copy_PinNum); break ;
 7b4:	a5 e3       	ldi	r26, 0x35	; 53
 7b6:	b0 e0       	ldi	r27, 0x00	; 0
 7b8:	e5 e3       	ldi	r30, 0x35	; 53
 7ba:	f0 e0       	ldi	r31, 0x00	; 0
 7bc:	80 81       	ld	r24, Z
 7be:	48 2f       	mov	r20, r24
 7c0:	8b 81       	ldd	r24, Y+3	; 0x03
 7c2:	28 2f       	mov	r18, r24
 7c4:	30 e0       	ldi	r19, 0x00	; 0
 7c6:	81 e0       	ldi	r24, 0x01	; 1
 7c8:	90 e0       	ldi	r25, 0x00	; 0
 7ca:	02 2e       	mov	r0, r18
 7cc:	02 c0       	rjmp	.+4      	; 0x7d2 <DIO_u8TogglePinValue+0xc8>
 7ce:	88 0f       	add	r24, r24
 7d0:	99 1f       	adc	r25, r25
 7d2:	0a 94       	dec	r0
 7d4:	e2 f7       	brpl	.-8      	; 0x7ce <DIO_u8TogglePinValue+0xc4>
 7d6:	84 27       	eor	r24, r20
 7d8:	8c 93       	st	X, r24
 7da:	19 c0       	rjmp	.+50     	; 0x80e <DIO_u8TogglePinValue+0x104>
					case DIO_PORTD : TOG_BIT(PORTD,copy_PinNum); break ;
 7dc:	a2 e3       	ldi	r26, 0x32	; 50
 7de:	b0 e0       	ldi	r27, 0x00	; 0
 7e0:	e2 e3       	ldi	r30, 0x32	; 50
 7e2:	f0 e0       	ldi	r31, 0x00	; 0
 7e4:	80 81       	ld	r24, Z
 7e6:	48 2f       	mov	r20, r24
 7e8:	8b 81       	ldd	r24, Y+3	; 0x03
 7ea:	28 2f       	mov	r18, r24
 7ec:	30 e0       	ldi	r19, 0x00	; 0
 7ee:	81 e0       	ldi	r24, 0x01	; 1
 7f0:	90 e0       	ldi	r25, 0x00	; 0
 7f2:	02 2e       	mov	r0, r18
 7f4:	02 c0       	rjmp	.+4      	; 0x7fa <DIO_u8TogglePinValue+0xf0>
 7f6:	88 0f       	add	r24, r24
 7f8:	99 1f       	adc	r25, r25
 7fa:	0a 94       	dec	r0
 7fc:	e2 f7       	brpl	.-8      	; 0x7f6 <DIO_u8TogglePinValue+0xec>
 7fe:	84 27       	eor	r24, r20
 800:	8c 93       	st	X, r24
 802:	05 c0       	rjmp	.+10     	; 0x80e <DIO_u8TogglePinValue+0x104>
					default : Local_u8ErrorState = NOK ; 		 break ;
 804:	81 e0       	ldi	r24, 0x01	; 1
 806:	89 83       	std	Y+1, r24	; 0x01
 808:	02 c0       	rjmp	.+4      	; 0x80e <DIO_u8TogglePinValue+0x104>
					}
	}
	else
	{
		Local_u8ErrorState = NOK ;
 80a:	81 e0       	ldi	r24, 0x01	; 1
 80c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState ;
 80e:	89 81       	ldd	r24, Y+1	; 0x01
}
 810:	0f 90       	pop	r0
 812:	0f 90       	pop	r0
 814:	0f 90       	pop	r0
 816:	0f 90       	pop	r0
 818:	0f 90       	pop	r0
 81a:	cf 91       	pop	r28
 81c:	df 91       	pop	r29
 81e:	08 95       	ret

00000820 <MAP>:
#include "STD_TYPES.h"
#include "MAP.h"

sint32 MAP ( sint32 InputRangeMin , sint32 InputRangeMax ,  sint32 OutputRangeMin , sint32 OutPutRangeMax , sint32 InputValue )
{
 820:	af 92       	push	r10
 822:	bf 92       	push	r11
 824:	cf 92       	push	r12
 826:	df 92       	push	r13
 828:	ef 92       	push	r14
 82a:	ff 92       	push	r15
 82c:	0f 93       	push	r16
 82e:	1f 93       	push	r17
 830:	df 93       	push	r29
 832:	cf 93       	push	r28
 834:	cd b7       	in	r28, 0x3d	; 61
 836:	de b7       	in	r29, 0x3e	; 62
 838:	68 97       	sbiw	r28, 0x18	; 24
 83a:	0f b6       	in	r0, 0x3f	; 63
 83c:	f8 94       	cli
 83e:	de bf       	out	0x3e, r29	; 62
 840:	0f be       	out	0x3f, r0	; 63
 842:	cd bf       	out	0x3d, r28	; 61
 844:	69 87       	std	Y+9, r22	; 0x09
 846:	7a 87       	std	Y+10, r23	; 0x0a
 848:	8b 87       	std	Y+11, r24	; 0x0b
 84a:	9c 87       	std	Y+12, r25	; 0x0c
 84c:	2d 87       	std	Y+13, r18	; 0x0d
 84e:	3e 87       	std	Y+14, r19	; 0x0e
 850:	4f 87       	std	Y+15, r20	; 0x0f
 852:	58 8b       	std	Y+16, r21	; 0x10
 854:	e9 8a       	std	Y+17, r14	; 0x11
 856:	fa 8a       	std	Y+18, r15	; 0x12
 858:	0b 8b       	std	Y+19, r16	; 0x13
 85a:	1c 8b       	std	Y+20, r17	; 0x14
 85c:	ad 8a       	std	Y+21, r10	; 0x15
 85e:	be 8a       	std	Y+22, r11	; 0x16
 860:	cf 8a       	std	Y+23, r12	; 0x17
 862:	d8 8e       	std	Y+24, r13	; 0x18
	sint32 Ratio ; 
	sint32 OutputValue ; 
	
										/* Calculate the ratio of the input value in the input range */
										
    Ratio = ((InputValue - InputRangeMin) * 100u ) / (InputRangeMax - InputRangeMin) ; 
 864:	2d a1       	ldd	r18, Y+37	; 0x25
 866:	3e a1       	ldd	r19, Y+38	; 0x26
 868:	4f a1       	ldd	r20, Y+39	; 0x27
 86a:	58 a5       	ldd	r21, Y+40	; 0x28
 86c:	89 85       	ldd	r24, Y+9	; 0x09
 86e:	9a 85       	ldd	r25, Y+10	; 0x0a
 870:	ab 85       	ldd	r26, Y+11	; 0x0b
 872:	bc 85       	ldd	r27, Y+12	; 0x0c
 874:	79 01       	movw	r14, r18
 876:	8a 01       	movw	r16, r20
 878:	e8 1a       	sub	r14, r24
 87a:	f9 0a       	sbc	r15, r25
 87c:	0a 0b       	sbc	r16, r26
 87e:	1b 0b       	sbc	r17, r27
 880:	d8 01       	movw	r26, r16
 882:	c7 01       	movw	r24, r14
 884:	24 e6       	ldi	r18, 0x64	; 100
 886:	30 e0       	ldi	r19, 0x00	; 0
 888:	40 e0       	ldi	r20, 0x00	; 0
 88a:	50 e0       	ldi	r21, 0x00	; 0
 88c:	bc 01       	movw	r22, r24
 88e:	cd 01       	movw	r24, r26
 890:	0e 94 3a 05 	call	0xa74	; 0xa74 <__mulsi3>
 894:	7b 01       	movw	r14, r22
 896:	8c 01       	movw	r16, r24
 898:	2d 85       	ldd	r18, Y+13	; 0x0d
 89a:	3e 85       	ldd	r19, Y+14	; 0x0e
 89c:	4f 85       	ldd	r20, Y+15	; 0x0f
 89e:	58 89       	ldd	r21, Y+16	; 0x10
 8a0:	89 85       	ldd	r24, Y+9	; 0x09
 8a2:	9a 85       	ldd	r25, Y+10	; 0x0a
 8a4:	ab 85       	ldd	r26, Y+11	; 0x0b
 8a6:	bc 85       	ldd	r27, Y+12	; 0x0c
 8a8:	28 1b       	sub	r18, r24
 8aa:	39 0b       	sbc	r19, r25
 8ac:	4a 0b       	sbc	r20, r26
 8ae:	5b 0b       	sbc	r21, r27
 8b0:	c8 01       	movw	r24, r16
 8b2:	b7 01       	movw	r22, r14
 8b4:	0e 94 59 05 	call	0xab2	; 0xab2 <__divmodsi4>
 8b8:	da 01       	movw	r26, r20
 8ba:	c9 01       	movw	r24, r18
 8bc:	8d 83       	std	Y+5, r24	; 0x05
 8be:	9e 83       	std	Y+6, r25	; 0x06
 8c0:	af 83       	std	Y+7, r26	; 0x07
 8c2:	b8 87       	std	Y+8, r27	; 0x08
    
										/* Map the ratio to the output range */
										
    OutputValue = ( ( Ratio * (OutPutRangeMax - OutputRangeMin)) / 100u ) + OutputRangeMin ; 
 8c4:	2d 89       	ldd	r18, Y+21	; 0x15
 8c6:	3e 89       	ldd	r19, Y+22	; 0x16
 8c8:	4f 89       	ldd	r20, Y+23	; 0x17
 8ca:	58 8d       	ldd	r21, Y+24	; 0x18
 8cc:	89 89       	ldd	r24, Y+17	; 0x11
 8ce:	9a 89       	ldd	r25, Y+18	; 0x12
 8d0:	ab 89       	ldd	r26, Y+19	; 0x13
 8d2:	bc 89       	ldd	r27, Y+20	; 0x14
 8d4:	79 01       	movw	r14, r18
 8d6:	8a 01       	movw	r16, r20
 8d8:	e8 1a       	sub	r14, r24
 8da:	f9 0a       	sbc	r15, r25
 8dc:	0a 0b       	sbc	r16, r26
 8de:	1b 0b       	sbc	r17, r27
 8e0:	d8 01       	movw	r26, r16
 8e2:	c7 01       	movw	r24, r14
 8e4:	2d 81       	ldd	r18, Y+5	; 0x05
 8e6:	3e 81       	ldd	r19, Y+6	; 0x06
 8e8:	4f 81       	ldd	r20, Y+7	; 0x07
 8ea:	58 85       	ldd	r21, Y+8	; 0x08
 8ec:	bc 01       	movw	r22, r24
 8ee:	cd 01       	movw	r24, r26
 8f0:	0e 94 3a 05 	call	0xa74	; 0xa74 <__mulsi3>
 8f4:	dc 01       	movw	r26, r24
 8f6:	cb 01       	movw	r24, r22
 8f8:	24 e6       	ldi	r18, 0x64	; 100
 8fa:	30 e0       	ldi	r19, 0x00	; 0
 8fc:	40 e0       	ldi	r20, 0x00	; 0
 8fe:	50 e0       	ldi	r21, 0x00	; 0
 900:	bc 01       	movw	r22, r24
 902:	cd 01       	movw	r24, r26
 904:	0e 94 59 05 	call	0xab2	; 0xab2 <__divmodsi4>
 908:	da 01       	movw	r26, r20
 90a:	c9 01       	movw	r24, r18
 90c:	9c 01       	movw	r18, r24
 90e:	ad 01       	movw	r20, r26
 910:	89 89       	ldd	r24, Y+17	; 0x11
 912:	9a 89       	ldd	r25, Y+18	; 0x12
 914:	ab 89       	ldd	r26, Y+19	; 0x13
 916:	bc 89       	ldd	r27, Y+20	; 0x14
 918:	82 0f       	add	r24, r18
 91a:	93 1f       	adc	r25, r19
 91c:	a4 1f       	adc	r26, r20
 91e:	b5 1f       	adc	r27, r21
 920:	89 83       	std	Y+1, r24	; 0x01
 922:	9a 83       	std	Y+2, r25	; 0x02
 924:	ab 83       	std	Y+3, r26	; 0x03
 926:	bc 83       	std	Y+4, r27	; 0x04
	
										/* Return the output value */
	
    return OutputValue ; 
 928:	89 81       	ldd	r24, Y+1	; 0x01
 92a:	9a 81       	ldd	r25, Y+2	; 0x02
 92c:	ab 81       	ldd	r26, Y+3	; 0x03
 92e:	bc 81       	ldd	r27, Y+4	; 0x04
 930:	bc 01       	movw	r22, r24
 932:	cd 01       	movw	r24, r26
 934:	68 96       	adiw	r28, 0x18	; 24
 936:	0f b6       	in	r0, 0x3f	; 63
 938:	f8 94       	cli
 93a:	de bf       	out	0x3e, r29	; 62
 93c:	0f be       	out	0x3f, r0	; 63
 93e:	cd bf       	out	0x3d, r28	; 61
 940:	cf 91       	pop	r28
 942:	df 91       	pop	r29
 944:	1f 91       	pop	r17
 946:	0f 91       	pop	r16
 948:	ff 90       	pop	r15
 94a:	ef 90       	pop	r14
 94c:	df 90       	pop	r13
 94e:	cf 90       	pop	r12
 950:	bf 90       	pop	r11
 952:	af 90       	pop	r10
 954:	08 95       	ret

00000956 <PORT_voidInit>:
#include "PORT_Prv.h"
#include "PORT_Reg.h"
#include "PORT_Interface.h"

	void PORT_voidInit ( void ) 
	{
 956:	df 93       	push	r29
 958:	cf 93       	push	r28
 95a:	cd b7       	in	r28, 0x3d	; 61
 95c:	de b7       	in	r29, 0x3e	; 62
		DDRA  = PORTA_DIR     ; 
 95e:	ea e3       	ldi	r30, 0x3A	; 58
 960:	f0 e0       	ldi	r31, 0x00	; 0
 962:	80 e8       	ldi	r24, 0x80	; 128
 964:	80 83       	st	Z, r24
		DDRB  = PORTB_DIR     ;
 966:	e7 e3       	ldi	r30, 0x37	; 55
 968:	f0 e0       	ldi	r31, 0x00	; 0
 96a:	80 ea       	ldi	r24, 0xA0	; 160
 96c:	80 83       	st	Z, r24
		DDRC  = PORTC_DIR     ;
 96e:	e4 e3       	ldi	r30, 0x34	; 52
 970:	f0 e0       	ldi	r31, 0x00	; 0
 972:	10 82       	st	Z, r1
		DDRD  = PORTD_DIR     ;
 974:	e1 e3       	ldi	r30, 0x31	; 49
 976:	f0 e0       	ldi	r31, 0x00	; 0
 978:	10 82       	st	Z, r1
		
		PORTA = PORTA_INITVAL ; 
 97a:	eb e3       	ldi	r30, 0x3B	; 59
 97c:	f0 e0       	ldi	r31, 0x00	; 0
 97e:	10 82       	st	Z, r1
		PORTB = PORTB_INITVAL ; 
 980:	e8 e3       	ldi	r30, 0x38	; 56
 982:	f0 e0       	ldi	r31, 0x00	; 0
 984:	10 82       	st	Z, r1
		PORTC = PORTC_INITVAL ; 
 986:	e5 e3       	ldi	r30, 0x35	; 53
 988:	f0 e0       	ldi	r31, 0x00	; 0
 98a:	10 82       	st	Z, r1
		PORTD = PORTD_INITVAL ; 
 98c:	e2 e3       	ldi	r30, 0x32	; 50
 98e:	f0 e0       	ldi	r31, 0x00	; 0
 990:	10 82       	st	Z, r1
 992:	cf 91       	pop	r28
 994:	df 91       	pop	r29
 996:	08 95       	ret

00000998 <SPI_voidInit>:
#include "SPI_Cfg.h"
#include "SPI_Prv.h"
#include "SPI_Interface.h"

	void SPI_voidInit		   	( uint8 copy_u8Role )
	{
 998:	df 93       	push	r29
 99a:	cf 93       	push	r28
 99c:	0f 92       	push	r0
 99e:	cd b7       	in	r28, 0x3d	; 61
 9a0:	de b7       	in	r29, 0x3e	; 62
 9a2:	89 83       	std	Y+1, r24	; 0x01

												/* SPI ENABLE */

		SET_BIT(SPCR,SPCR_SPE) ;
 9a4:	ad e2       	ldi	r26, 0x2D	; 45
 9a6:	b0 e0       	ldi	r27, 0x00	; 0
 9a8:	ed e2       	ldi	r30, 0x2D	; 45
 9aa:	f0 e0       	ldi	r31, 0x00	; 0
 9ac:	80 81       	ld	r24, Z
 9ae:	80 64       	ori	r24, 0x40	; 64
 9b0:	8c 93       	st	X, r24

												/* DATA ORDER */

		CLR_BIT(SPCR,SPCR_DORD) ;     // the MSB of the data word is transmitted first.
 9b2:	ad e2       	ldi	r26, 0x2D	; 45
 9b4:	b0 e0       	ldi	r27, 0x00	; 0
 9b6:	ed e2       	ldi	r30, 0x2D	; 45
 9b8:	f0 e0       	ldi	r31, 0x00	; 0
 9ba:	80 81       	ld	r24, Z
 9bc:	8f 7d       	andi	r24, 0xDF	; 223
 9be:	8c 93       	st	X, r24

												/* MASTER / SLAVE SELECT */

		if ( ( copy_u8Role == 'M' ) || ( copy_u8Role == 'm' ) )
 9c0:	89 81       	ldd	r24, Y+1	; 0x01
 9c2:	8d 34       	cpi	r24, 0x4D	; 77
 9c4:	19 f0       	breq	.+6      	; 0x9cc <SPI_voidInit+0x34>
 9c6:	89 81       	ldd	r24, Y+1	; 0x01
 9c8:	8d 36       	cpi	r24, 0x6D	; 109
 9ca:	41 f4       	brne	.+16     	; 0x9dc <SPI_voidInit+0x44>
		{
			SET_BIT(SPCR,SPCR_MSTR) ;   	// MASTER SELECTION
 9cc:	ad e2       	ldi	r26, 0x2D	; 45
 9ce:	b0 e0       	ldi	r27, 0x00	; 0
 9d0:	ed e2       	ldi	r30, 0x2D	; 45
 9d2:	f0 e0       	ldi	r31, 0x00	; 0
 9d4:	80 81       	ld	r24, Z
 9d6:	80 61       	ori	r24, 0x10	; 16
 9d8:	8c 93       	st	X, r24
 9da:	0d c0       	rjmp	.+26     	; 0x9f6 <SPI_voidInit+0x5e>
		}
		else if ( ( copy_u8Role == 'S' ) || ( copy_u8Role == 's' ) )
 9dc:	89 81       	ldd	r24, Y+1	; 0x01
 9de:	83 35       	cpi	r24, 0x53	; 83
 9e0:	19 f0       	breq	.+6      	; 0x9e8 <SPI_voidInit+0x50>
 9e2:	89 81       	ldd	r24, Y+1	; 0x01
 9e4:	83 37       	cpi	r24, 0x73	; 115
 9e6:	39 f4       	brne	.+14     	; 0x9f6 <SPI_voidInit+0x5e>
		{
			CLR_BIT(SPCR,SPCR_MSTR) ;		// SLAVE SELECTION
 9e8:	ad e2       	ldi	r26, 0x2D	; 45
 9ea:	b0 e0       	ldi	r27, 0x00	; 0
 9ec:	ed e2       	ldi	r30, 0x2D	; 45
 9ee:	f0 e0       	ldi	r31, 0x00	; 0
 9f0:	80 81       	ld	r24, Z
 9f2:	8f 7e       	andi	r24, 0xEF	; 239
 9f4:	8c 93       	st	X, r24
			// DO NOTHING
		}

												/* CLOCK RATE SELECT */

		CLR_BIT(SPCR,SPCR_SPR0) ; 			// MAXIMUM SPEED
 9f6:	ad e2       	ldi	r26, 0x2D	; 45
 9f8:	b0 e0       	ldi	r27, 0x00	; 0
 9fa:	ed e2       	ldi	r30, 0x2D	; 45
 9fc:	f0 e0       	ldi	r31, 0x00	; 0
 9fe:	80 81       	ld	r24, Z
 a00:	8e 7f       	andi	r24, 0xFE	; 254
 a02:	8c 93       	st	X, r24
		CLR_BIT(SPCR,SPCR_SPR1) ; 			// MAXIMUM SPEED
 a04:	ad e2       	ldi	r26, 0x2D	; 45
 a06:	b0 e0       	ldi	r27, 0x00	; 0
 a08:	ed e2       	ldi	r30, 0x2D	; 45
 a0a:	f0 e0       	ldi	r31, 0x00	; 0
 a0c:	80 81       	ld	r24, Z
 a0e:	8d 7f       	andi	r24, 0xFD	; 253
 a10:	8c 93       	st	X, r24
		SET_BIT(SPSR,SPSR_SPI2X) ; 			// MAXIMUM SPEED
 a12:	ae e2       	ldi	r26, 0x2E	; 46
 a14:	b0 e0       	ldi	r27, 0x00	; 0
 a16:	ee e2       	ldi	r30, 0x2E	; 46
 a18:	f0 e0       	ldi	r31, 0x00	; 0
 a1a:	80 81       	ld	r24, Z
 a1c:	81 60       	ori	r24, 0x01	; 1
 a1e:	8c 93       	st	X, r24

	}
 a20:	0f 90       	pop	r0
 a22:	cf 91       	pop	r28
 a24:	df 91       	pop	r29
 a26:	08 95       	ret

00000a28 <SPI_u8Transceive>:

	uint8 SPI_u8Transceive 		( uint8 copy_u8Data)
	{
 a28:	df 93       	push	r29
 a2a:	cf 93       	push	r28
 a2c:	0f 92       	push	r0
 a2e:	cd b7       	in	r28, 0x3d	; 61
 a30:	de b7       	in	r29, 0x3e	; 62
 a32:	89 83       	std	Y+1, r24	; 0x01
												/* PUT DATA ON SPDR */
		SPDR = copy_u8Data ;
 a34:	ef e2       	ldi	r30, 0x2F	; 47
 a36:	f0 e0       	ldi	r31, 0x00	; 0
 a38:	89 81       	ldd	r24, Y+1	; 0x01
 a3a:	80 83       	st	Z, r24

												/* WAIT FOR SPIF TO BE RAISED */

		while ( (GET_BIT(SPSR,SPSR_SPIF)) != 1 ) ;
 a3c:	ee e2       	ldi	r30, 0x2E	; 46
 a3e:	f0 e0       	ldi	r31, 0x00	; 0
 a40:	80 81       	ld	r24, Z
 a42:	88 1f       	adc	r24, r24
 a44:	88 27       	eor	r24, r24
 a46:	88 1f       	adc	r24, r24
 a48:	81 30       	cpi	r24, 0x01	; 1
 a4a:	c1 f7       	brne	.-16     	; 0xa3c <SPI_u8Transceive+0x14>

												/* RETURN SPDR */

		return SPDR ;
 a4c:	ef e2       	ldi	r30, 0x2F	; 47
 a4e:	f0 e0       	ldi	r31, 0x00	; 0
 a50:	80 81       	ld	r24, Z
	}
 a52:	0f 90       	pop	r0
 a54:	cf 91       	pop	r28
 a56:	df 91       	pop	r29
 a58:	08 95       	ret

00000a5a <main>:
#include "DIO_Interface.h"
#include "PORT_Interface.h"
#include "SPI_Interface.h"

void main ()
{
 a5a:	df 93       	push	r29
 a5c:	cf 93       	push	r28
 a5e:	cd b7       	in	r28, 0x3d	; 61
 a60:	de b7       	in	r29, 0x3e	; 62
	PORT_voidInit() ;
 a62:	0e 94 ab 04 	call	0x956	; 0x956 <PORT_voidInit>

	SPI_voidInit('M') ;
 a66:	8d e4       	ldi	r24, 0x4D	; 77
 a68:	0e 94 cc 04 	call	0x998	; 0x998 <SPI_voidInit>

	SPI_u8Transceive('7') ;
 a6c:	87 e3       	ldi	r24, 0x37	; 55
 a6e:	0e 94 14 05 	call	0xa28	; 0xa28 <SPI_u8Transceive>
 a72:	ff cf       	rjmp	.-2      	; 0xa72 <main+0x18>

00000a74 <__mulsi3>:
 a74:	62 9f       	mul	r22, r18
 a76:	d0 01       	movw	r26, r0
 a78:	73 9f       	mul	r23, r19
 a7a:	f0 01       	movw	r30, r0
 a7c:	82 9f       	mul	r24, r18
 a7e:	e0 0d       	add	r30, r0
 a80:	f1 1d       	adc	r31, r1
 a82:	64 9f       	mul	r22, r20
 a84:	e0 0d       	add	r30, r0
 a86:	f1 1d       	adc	r31, r1
 a88:	92 9f       	mul	r25, r18
 a8a:	f0 0d       	add	r31, r0
 a8c:	83 9f       	mul	r24, r19
 a8e:	f0 0d       	add	r31, r0
 a90:	74 9f       	mul	r23, r20
 a92:	f0 0d       	add	r31, r0
 a94:	65 9f       	mul	r22, r21
 a96:	f0 0d       	add	r31, r0
 a98:	99 27       	eor	r25, r25
 a9a:	72 9f       	mul	r23, r18
 a9c:	b0 0d       	add	r27, r0
 a9e:	e1 1d       	adc	r30, r1
 aa0:	f9 1f       	adc	r31, r25
 aa2:	63 9f       	mul	r22, r19
 aa4:	b0 0d       	add	r27, r0
 aa6:	e1 1d       	adc	r30, r1
 aa8:	f9 1f       	adc	r31, r25
 aaa:	bd 01       	movw	r22, r26
 aac:	cf 01       	movw	r24, r30
 aae:	11 24       	eor	r1, r1
 ab0:	08 95       	ret

00000ab2 <__divmodsi4>:
 ab2:	97 fb       	bst	r25, 7
 ab4:	09 2e       	mov	r0, r25
 ab6:	05 26       	eor	r0, r21
 ab8:	0e d0       	rcall	.+28     	; 0xad6 <__divmodsi4_neg1>
 aba:	57 fd       	sbrc	r21, 7
 abc:	04 d0       	rcall	.+8      	; 0xac6 <__divmodsi4_neg2>
 abe:	14 d0       	rcall	.+40     	; 0xae8 <__udivmodsi4>
 ac0:	0a d0       	rcall	.+20     	; 0xad6 <__divmodsi4_neg1>
 ac2:	00 1c       	adc	r0, r0
 ac4:	38 f4       	brcc	.+14     	; 0xad4 <__divmodsi4_exit>

00000ac6 <__divmodsi4_neg2>:
 ac6:	50 95       	com	r21
 ac8:	40 95       	com	r20
 aca:	30 95       	com	r19
 acc:	21 95       	neg	r18
 ace:	3f 4f       	sbci	r19, 0xFF	; 255
 ad0:	4f 4f       	sbci	r20, 0xFF	; 255
 ad2:	5f 4f       	sbci	r21, 0xFF	; 255

00000ad4 <__divmodsi4_exit>:
 ad4:	08 95       	ret

00000ad6 <__divmodsi4_neg1>:
 ad6:	f6 f7       	brtc	.-4      	; 0xad4 <__divmodsi4_exit>
 ad8:	90 95       	com	r25
 ada:	80 95       	com	r24
 adc:	70 95       	com	r23
 ade:	61 95       	neg	r22
 ae0:	7f 4f       	sbci	r23, 0xFF	; 255
 ae2:	8f 4f       	sbci	r24, 0xFF	; 255
 ae4:	9f 4f       	sbci	r25, 0xFF	; 255
 ae6:	08 95       	ret

00000ae8 <__udivmodsi4>:
 ae8:	a1 e2       	ldi	r26, 0x21	; 33
 aea:	1a 2e       	mov	r1, r26
 aec:	aa 1b       	sub	r26, r26
 aee:	bb 1b       	sub	r27, r27
 af0:	fd 01       	movw	r30, r26
 af2:	0d c0       	rjmp	.+26     	; 0xb0e <__udivmodsi4_ep>

00000af4 <__udivmodsi4_loop>:
 af4:	aa 1f       	adc	r26, r26
 af6:	bb 1f       	adc	r27, r27
 af8:	ee 1f       	adc	r30, r30
 afa:	ff 1f       	adc	r31, r31
 afc:	a2 17       	cp	r26, r18
 afe:	b3 07       	cpc	r27, r19
 b00:	e4 07       	cpc	r30, r20
 b02:	f5 07       	cpc	r31, r21
 b04:	20 f0       	brcs	.+8      	; 0xb0e <__udivmodsi4_ep>
 b06:	a2 1b       	sub	r26, r18
 b08:	b3 0b       	sbc	r27, r19
 b0a:	e4 0b       	sbc	r30, r20
 b0c:	f5 0b       	sbc	r31, r21

00000b0e <__udivmodsi4_ep>:
 b0e:	66 1f       	adc	r22, r22
 b10:	77 1f       	adc	r23, r23
 b12:	88 1f       	adc	r24, r24
 b14:	99 1f       	adc	r25, r25
 b16:	1a 94       	dec	r1
 b18:	69 f7       	brne	.-38     	; 0xaf4 <__udivmodsi4_loop>
 b1a:	60 95       	com	r22
 b1c:	70 95       	com	r23
 b1e:	80 95       	com	r24
 b20:	90 95       	com	r25
 b22:	9b 01       	movw	r18, r22
 b24:	ac 01       	movw	r20, r24
 b26:	bd 01       	movw	r22, r26
 b28:	cf 01       	movw	r24, r30
 b2a:	08 95       	ret

00000b2c <_exit>:
 b2c:	f8 94       	cli

00000b2e <__stop_program>:
 b2e:	ff cf       	rjmp	.-2      	; 0xb2e <__stop_program>
