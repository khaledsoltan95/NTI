
Hamoksha.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ff8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  00002ff8  0000306c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002748  00000000  00000000  00003174  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000fa3  00000000  00000000  000058bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  0000685f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  0000699f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00006b0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00008758  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00009643  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000a3f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000a550  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000a7dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000afab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ef       	ldi	r30, 0xF8	; 248
      68:	ff e2       	ldi	r31, 0x2F	; 47
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 37 0c 	call	0x186e	; 0x186e <main>
      7a:	0c 94 fa 17 	jmp	0x2ff4	; 0x2ff4 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 c3 17 	jmp	0x2f86	; 0x2f86 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a7 ee       	ldi	r26, 0xE7	; 231
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 df 17 	jmp	0x2fbe	; 0x2fbe <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 cf 17 	jmp	0x2f9e	; 0x2f9e <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 eb 17 	jmp	0x2fd6	; 0x2fd6 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 cf 17 	jmp	0x2f9e	; 0x2f9e <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 eb 17 	jmp	0x2fd6	; 0x2fd6 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 c3 17 	jmp	0x2f86	; 0x2f86 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	87 ee       	ldi	r24, 0xE7	; 231
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 df 17 	jmp	0x2fbe	; 0x2fbe <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 cf 17 	jmp	0x2f9e	; 0x2f9e <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 eb 17 	jmp	0x2fd6	; 0x2fd6 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 cf 17 	jmp	0x2f9e	; 0x2f9e <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 eb 17 	jmp	0x2fd6	; 0x2fd6 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 cf 17 	jmp	0x2f9e	; 0x2f9e <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 eb 17 	jmp	0x2fd6	; 0x2fd6 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 d3 17 	jmp	0x2fa6	; 0x2fa6 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 ef 17 	jmp	0x2fde	; 0x2fde <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <voidSetHalfDataPort>:
#include "CLCD_Cfg.h"

						/* Functions Initialization */
#if			CLCD_U8CONNECTION_MODE == FOUR_BIT
static void voidSetHalfDataPort (uint8 copy_u8FourBitData)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	0f 92       	push	r0
     b3c:	cd b7       	in	r28, 0x3d	; 61
     b3e:	de b7       	in	r29, 0x3e	; 62
     b40:	89 83       	std	Y+1, r24	; 0x01
	DIO_U8SetPinValue(CLCD_u8DATA_PORT,CLCD_u8D4_PIN,GET_BIT(copy_u8FourBitData,0)) ;
     b42:	89 81       	ldd	r24, Y+1	; 0x01
     b44:	98 2f       	mov	r25, r24
     b46:	91 70       	andi	r25, 0x01	; 1
     b48:	81 e0       	ldi	r24, 0x01	; 1
     b4a:	60 e0       	ldi	r22, 0x00	; 0
     b4c:	49 2f       	mov	r20, r25
     b4e:	0e 94 20 0a 	call	0x1440	; 0x1440 <DIO_U8SetPinValue>
	DIO_U8SetPinValue(CLCD_u8DATA_PORT,CLCD_u8D5_PIN,GET_BIT(copy_u8FourBitData,1)) ;
     b52:	89 81       	ldd	r24, Y+1	; 0x01
     b54:	86 95       	lsr	r24
     b56:	98 2f       	mov	r25, r24
     b58:	91 70       	andi	r25, 0x01	; 1
     b5a:	81 e0       	ldi	r24, 0x01	; 1
     b5c:	61 e0       	ldi	r22, 0x01	; 1
     b5e:	49 2f       	mov	r20, r25
     b60:	0e 94 20 0a 	call	0x1440	; 0x1440 <DIO_U8SetPinValue>
	DIO_U8SetPinValue(CLCD_u8DATA_PORT,CLCD_u8D6_PIN,GET_BIT(copy_u8FourBitData,2)) ;
     b64:	89 81       	ldd	r24, Y+1	; 0x01
     b66:	86 95       	lsr	r24
     b68:	86 95       	lsr	r24
     b6a:	98 2f       	mov	r25, r24
     b6c:	91 70       	andi	r25, 0x01	; 1
     b6e:	81 e0       	ldi	r24, 0x01	; 1
     b70:	62 e0       	ldi	r22, 0x02	; 2
     b72:	49 2f       	mov	r20, r25
     b74:	0e 94 20 0a 	call	0x1440	; 0x1440 <DIO_U8SetPinValue>
	DIO_U8SetPinValue(CLCD_u8DATA_PORT,CLCD_u8D7_PIN,GET_BIT(copy_u8FourBitData,3)) ;
     b78:	89 81       	ldd	r24, Y+1	; 0x01
     b7a:	86 95       	lsr	r24
     b7c:	86 95       	lsr	r24
     b7e:	86 95       	lsr	r24
     b80:	98 2f       	mov	r25, r24
     b82:	91 70       	andi	r25, 0x01	; 1
     b84:	81 e0       	ldi	r24, 0x01	; 1
     b86:	64 e0       	ldi	r22, 0x04	; 4
     b88:	49 2f       	mov	r20, r25
     b8a:	0e 94 20 0a 	call	0x1440	; 0x1440 <DIO_U8SetPinValue>
}
     b8e:	0f 90       	pop	r0
     b90:	cf 91       	pop	r28
     b92:	df 91       	pop	r29
     b94:	08 95       	ret

00000b96 <voidSendEnablePulse>:
#endif

static void voidSendEnablePulse ( void )
{
     b96:	df 93       	push	r29
     b98:	cf 93       	push	r28
     b9a:	cd b7       	in	r28, 0x3d	; 61
     b9c:	de b7       	in	r29, 0x3e	; 62
     b9e:	2e 97       	sbiw	r28, 0x0e	; 14
     ba0:	0f b6       	in	r0, 0x3f	; 63
     ba2:	f8 94       	cli
     ba4:	de bf       	out	0x3e, r29	; 62
     ba6:	0f be       	out	0x3f, r0	; 63
     ba8:	cd bf       	out	0x3d, r28	; 61
	DIO_U8SetPinValue(CLCD_u8CTRL_PORT,CLCD_u8E_PIN,DIO_PIN_HIGH);
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	62 e0       	ldi	r22, 0x02	; 2
     bae:	41 e0       	ldi	r20, 0x01	; 1
     bb0:	0e 94 20 0a 	call	0x1440	; 0x1440 <DIO_U8SetPinValue>
     bb4:	80 e0       	ldi	r24, 0x00	; 0
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	a0 e0       	ldi	r26, 0x00	; 0
     bba:	b0 e4       	ldi	r27, 0x40	; 64
     bbc:	8b 87       	std	Y+11, r24	; 0x0b
     bbe:	9c 87       	std	Y+12, r25	; 0x0c
     bc0:	ad 87       	std	Y+13, r26	; 0x0d
     bc2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bc4:	6b 85       	ldd	r22, Y+11	; 0x0b
     bc6:	7c 85       	ldd	r23, Y+12	; 0x0c
     bc8:	8d 85       	ldd	r24, Y+13	; 0x0d
     bca:	9e 85       	ldd	r25, Y+14	; 0x0e
     bcc:	20 e0       	ldi	r18, 0x00	; 0
     bce:	30 e0       	ldi	r19, 0x00	; 0
     bd0:	4a e7       	ldi	r20, 0x7A	; 122
     bd2:	55 e4       	ldi	r21, 0x45	; 69
     bd4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     bd8:	dc 01       	movw	r26, r24
     bda:	cb 01       	movw	r24, r22
     bdc:	8f 83       	std	Y+7, r24	; 0x07
     bde:	98 87       	std	Y+8, r25	; 0x08
     be0:	a9 87       	std	Y+9, r26	; 0x09
     be2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     be4:	6f 81       	ldd	r22, Y+7	; 0x07
     be6:	78 85       	ldd	r23, Y+8	; 0x08
     be8:	89 85       	ldd	r24, Y+9	; 0x09
     bea:	9a 85       	ldd	r25, Y+10	; 0x0a
     bec:	20 e0       	ldi	r18, 0x00	; 0
     bee:	30 e0       	ldi	r19, 0x00	; 0
     bf0:	40 e8       	ldi	r20, 0x80	; 128
     bf2:	5f e3       	ldi	r21, 0x3F	; 63
     bf4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     bf8:	88 23       	and	r24, r24
     bfa:	2c f4       	brge	.+10     	; 0xc06 <voidSendEnablePulse+0x70>
		__ticks = 1;
     bfc:	81 e0       	ldi	r24, 0x01	; 1
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	9e 83       	std	Y+6, r25	; 0x06
     c02:	8d 83       	std	Y+5, r24	; 0x05
     c04:	3f c0       	rjmp	.+126    	; 0xc84 <voidSendEnablePulse+0xee>
	else if (__tmp > 65535)
     c06:	6f 81       	ldd	r22, Y+7	; 0x07
     c08:	78 85       	ldd	r23, Y+8	; 0x08
     c0a:	89 85       	ldd	r24, Y+9	; 0x09
     c0c:	9a 85       	ldd	r25, Y+10	; 0x0a
     c0e:	20 e0       	ldi	r18, 0x00	; 0
     c10:	3f ef       	ldi	r19, 0xFF	; 255
     c12:	4f e7       	ldi	r20, 0x7F	; 127
     c14:	57 e4       	ldi	r21, 0x47	; 71
     c16:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     c1a:	18 16       	cp	r1, r24
     c1c:	4c f5       	brge	.+82     	; 0xc70 <voidSendEnablePulse+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c1e:	6b 85       	ldd	r22, Y+11	; 0x0b
     c20:	7c 85       	ldd	r23, Y+12	; 0x0c
     c22:	8d 85       	ldd	r24, Y+13	; 0x0d
     c24:	9e 85       	ldd	r25, Y+14	; 0x0e
     c26:	20 e0       	ldi	r18, 0x00	; 0
     c28:	30 e0       	ldi	r19, 0x00	; 0
     c2a:	40 e2       	ldi	r20, 0x20	; 32
     c2c:	51 e4       	ldi	r21, 0x41	; 65
     c2e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     c32:	dc 01       	movw	r26, r24
     c34:	cb 01       	movw	r24, r22
     c36:	bc 01       	movw	r22, r24
     c38:	cd 01       	movw	r24, r26
     c3a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     c3e:	dc 01       	movw	r26, r24
     c40:	cb 01       	movw	r24, r22
     c42:	9e 83       	std	Y+6, r25	; 0x06
     c44:	8d 83       	std	Y+5, r24	; 0x05
     c46:	0f c0       	rjmp	.+30     	; 0xc66 <voidSendEnablePulse+0xd0>
     c48:	80 e9       	ldi	r24, 0x90	; 144
     c4a:	91 e0       	ldi	r25, 0x01	; 1
     c4c:	9c 83       	std	Y+4, r25	; 0x04
     c4e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c50:	8b 81       	ldd	r24, Y+3	; 0x03
     c52:	9c 81       	ldd	r25, Y+4	; 0x04
     c54:	01 97       	sbiw	r24, 0x01	; 1
     c56:	f1 f7       	brne	.-4      	; 0xc54 <voidSendEnablePulse+0xbe>
     c58:	9c 83       	std	Y+4, r25	; 0x04
     c5a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c5c:	8d 81       	ldd	r24, Y+5	; 0x05
     c5e:	9e 81       	ldd	r25, Y+6	; 0x06
     c60:	01 97       	sbiw	r24, 0x01	; 1
     c62:	9e 83       	std	Y+6, r25	; 0x06
     c64:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c66:	8d 81       	ldd	r24, Y+5	; 0x05
     c68:	9e 81       	ldd	r25, Y+6	; 0x06
     c6a:	00 97       	sbiw	r24, 0x00	; 0
     c6c:	69 f7       	brne	.-38     	; 0xc48 <voidSendEnablePulse+0xb2>
     c6e:	14 c0       	rjmp	.+40     	; 0xc98 <voidSendEnablePulse+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c70:	6f 81       	ldd	r22, Y+7	; 0x07
     c72:	78 85       	ldd	r23, Y+8	; 0x08
     c74:	89 85       	ldd	r24, Y+9	; 0x09
     c76:	9a 85       	ldd	r25, Y+10	; 0x0a
     c78:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     c7c:	dc 01       	movw	r26, r24
     c7e:	cb 01       	movw	r24, r22
     c80:	9e 83       	std	Y+6, r25	; 0x06
     c82:	8d 83       	std	Y+5, r24	; 0x05
     c84:	8d 81       	ldd	r24, Y+5	; 0x05
     c86:	9e 81       	ldd	r25, Y+6	; 0x06
     c88:	9a 83       	std	Y+2, r25	; 0x02
     c8a:	89 83       	std	Y+1, r24	; 0x01
     c8c:	89 81       	ldd	r24, Y+1	; 0x01
     c8e:	9a 81       	ldd	r25, Y+2	; 0x02
     c90:	01 97       	sbiw	r24, 0x01	; 1
     c92:	f1 f7       	brne	.-4      	; 0xc90 <voidSendEnablePulse+0xfa>
     c94:	9a 83       	std	Y+2, r25	; 0x02
     c96:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_U8SetPinValue(CLCD_u8CTRL_PORT,CLCD_u8E_PIN,DIO_PIN_LOW);
     c98:	80 e0       	ldi	r24, 0x00	; 0
     c9a:	62 e0       	ldi	r22, 0x02	; 2
     c9c:	40 e0       	ldi	r20, 0x00	; 0
     c9e:	0e 94 20 0a 	call	0x1440	; 0x1440 <DIO_U8SetPinValue>
}
     ca2:	2e 96       	adiw	r28, 0x0e	; 14
     ca4:	0f b6       	in	r0, 0x3f	; 63
     ca6:	f8 94       	cli
     ca8:	de bf       	out	0x3e, r29	; 62
     caa:	0f be       	out	0x3f, r0	; 63
     cac:	cd bf       	out	0x3d, r28	; 61
     cae:	cf 91       	pop	r28
     cb0:	df 91       	pop	r29
     cb2:	08 95       	ret

00000cb4 <CLCD_voidSendCommand>:

void CLCD_voidSendCommand ( uint8 Copy_u8Command )
{
     cb4:	df 93       	push	r29
     cb6:	cf 93       	push	r28
     cb8:	0f 92       	push	r0
     cba:	cd b7       	in	r28, 0x3d	; 61
     cbc:	de b7       	in	r29, 0x3e	; 62
     cbe:	89 83       	std	Y+1, r24	; 0x01
					// 1-Set RS pin low for command

	DIO_U8SetPinValue(CLCD_u8CTRL_PORT,CLCD_u8RS_PIN,DIO_PIN_LOW);
     cc0:	80 e0       	ldi	r24, 0x00	; 0
     cc2:	63 e0       	ldi	r22, 0x03	; 3
     cc4:	40 e0       	ldi	r20, 0x00	; 0
     cc6:	0e 94 20 0a 	call	0x1440	; 0x1440 <DIO_U8SetPinValue>

					// 3- Send the command

	#if			CLCD_U8CONNECTION_MODE == FOUR_BIT
					/* Send The Higher 4 Bits */
	voidSetHalfDataPort( Copy_u8Command >> 4u ) ;
     cca:	89 81       	ldd	r24, Y+1	; 0x01
     ccc:	82 95       	swap	r24
     cce:	8f 70       	andi	r24, 0x0F	; 15
     cd0:	0e 94 9b 05 	call	0xb36	; 0xb36 <voidSetHalfDataPort>
								//
					/*  Send Enable Pulse */
	voidSendEnablePulse () ;
     cd4:	0e 94 cb 05 	call	0xb96	; 0xb96 <voidSendEnablePulse>
								//
					/* Send The Lower 4 Bits */
	voidSetHalfDataPort( Copy_u8Command ) ;
     cd8:	89 81       	ldd	r24, Y+1	; 0x01
     cda:	0e 94 9b 05 	call	0xb36	; 0xb36 <voidSetHalfDataPort>
	DIO_U8SetPortValue(CLCD_u8DATA_PORT,Copy_u8Command);
	#endif

					// 4- Send Enable Pulse

	voidSendEnablePulse () ;
     cde:	0e 94 cb 05 	call	0xb96	; 0xb96 <voidSendEnablePulse>

}
     ce2:	0f 90       	pop	r0
     ce4:	cf 91       	pop	r28
     ce6:	df 91       	pop	r29
     ce8:	08 95       	ret

00000cea <CLCD_voidSendData>:
void CLCD_voidSendData   (uint8 copy_u8Data)
{
     cea:	df 93       	push	r29
     cec:	cf 93       	push	r28
     cee:	0f 92       	push	r0
     cf0:	cd b7       	in	r28, 0x3d	; 61
     cf2:	de b7       	in	r29, 0x3e	; 62
     cf4:	89 83       	std	Y+1, r24	; 0x01
					// 1-Set RS pin High for data sending

	DIO_U8SetPinValue(CLCD_u8CTRL_PORT,CLCD_u8RS_PIN,DIO_PIN_HIGH);
     cf6:	80 e0       	ldi	r24, 0x00	; 0
     cf8:	63 e0       	ldi	r22, 0x03	; 3
     cfa:	41 e0       	ldi	r20, 0x01	; 1
     cfc:	0e 94 20 0a 	call	0x1440	; 0x1440 <DIO_U8SetPinValue>

					// 3- Send the data

	#if			CLCD_U8CONNECTION_MODE == FOUR_BIT
					/* Send The Higher 4 Bits */
	voidSetHalfDataPort( copy_u8Data >> 4u ) ;
     d00:	89 81       	ldd	r24, Y+1	; 0x01
     d02:	82 95       	swap	r24
     d04:	8f 70       	andi	r24, 0x0F	; 15
     d06:	0e 94 9b 05 	call	0xb36	; 0xb36 <voidSetHalfDataPort>
								//
					/*  Send Enable Pulse */
	voidSendEnablePulse () ;
     d0a:	0e 94 cb 05 	call	0xb96	; 0xb96 <voidSendEnablePulse>
								//
					/* Send The Lower 4 Bits */
	voidSetHalfDataPort( copy_u8Data ) ;
     d0e:	89 81       	ldd	r24, Y+1	; 0x01
     d10:	0e 94 9b 05 	call	0xb36	; 0xb36 <voidSetHalfDataPort>
	DIO_U8SetPortValue(CLCD_u8DATA_PORT,copy_u8Data);
	#endif

					// 4- Send Enable Pulse

	voidSendEnablePulse () ;
     d14:	0e 94 cb 05 	call	0xb96	; 0xb96 <voidSendEnablePulse>

}
     d18:	0f 90       	pop	r0
     d1a:	cf 91       	pop	r28
     d1c:	df 91       	pop	r29
     d1e:	08 95       	ret

00000d20 <CLCD_voidInit>:
void CLCD_voidInit       (void)
{
     d20:	df 93       	push	r29
     d22:	cf 93       	push	r28
     d24:	cd b7       	in	r28, 0x3d	; 61
     d26:	de b7       	in	r29, 0x3e	; 62
     d28:	2e 97       	sbiw	r28, 0x0e	; 14
     d2a:	0f b6       	in	r0, 0x3f	; 63
     d2c:	f8 94       	cli
     d2e:	de bf       	out	0x3e, r29	; 62
     d30:	0f be       	out	0x3f, r0	; 63
     d32:	cd bf       	out	0x3d, r28	; 61
     d34:	80 e0       	ldi	r24, 0x00	; 0
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	a0 e2       	ldi	r26, 0x20	; 32
     d3a:	b2 e4       	ldi	r27, 0x42	; 66
     d3c:	8b 87       	std	Y+11, r24	; 0x0b
     d3e:	9c 87       	std	Y+12, r25	; 0x0c
     d40:	ad 87       	std	Y+13, r26	; 0x0d
     d42:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d44:	6b 85       	ldd	r22, Y+11	; 0x0b
     d46:	7c 85       	ldd	r23, Y+12	; 0x0c
     d48:	8d 85       	ldd	r24, Y+13	; 0x0d
     d4a:	9e 85       	ldd	r25, Y+14	; 0x0e
     d4c:	20 e0       	ldi	r18, 0x00	; 0
     d4e:	30 e0       	ldi	r19, 0x00	; 0
     d50:	4a e7       	ldi	r20, 0x7A	; 122
     d52:	55 e4       	ldi	r21, 0x45	; 69
     d54:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d58:	dc 01       	movw	r26, r24
     d5a:	cb 01       	movw	r24, r22
     d5c:	8f 83       	std	Y+7, r24	; 0x07
     d5e:	98 87       	std	Y+8, r25	; 0x08
     d60:	a9 87       	std	Y+9, r26	; 0x09
     d62:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d64:	6f 81       	ldd	r22, Y+7	; 0x07
     d66:	78 85       	ldd	r23, Y+8	; 0x08
     d68:	89 85       	ldd	r24, Y+9	; 0x09
     d6a:	9a 85       	ldd	r25, Y+10	; 0x0a
     d6c:	20 e0       	ldi	r18, 0x00	; 0
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	40 e8       	ldi	r20, 0x80	; 128
     d72:	5f e3       	ldi	r21, 0x3F	; 63
     d74:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     d78:	88 23       	and	r24, r24
     d7a:	2c f4       	brge	.+10     	; 0xd86 <CLCD_voidInit+0x66>
		__ticks = 1;
     d7c:	81 e0       	ldi	r24, 0x01	; 1
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	9e 83       	std	Y+6, r25	; 0x06
     d82:	8d 83       	std	Y+5, r24	; 0x05
     d84:	3f c0       	rjmp	.+126    	; 0xe04 <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
     d86:	6f 81       	ldd	r22, Y+7	; 0x07
     d88:	78 85       	ldd	r23, Y+8	; 0x08
     d8a:	89 85       	ldd	r24, Y+9	; 0x09
     d8c:	9a 85       	ldd	r25, Y+10	; 0x0a
     d8e:	20 e0       	ldi	r18, 0x00	; 0
     d90:	3f ef       	ldi	r19, 0xFF	; 255
     d92:	4f e7       	ldi	r20, 0x7F	; 127
     d94:	57 e4       	ldi	r21, 0x47	; 71
     d96:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     d9a:	18 16       	cp	r1, r24
     d9c:	4c f5       	brge	.+82     	; 0xdf0 <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d9e:	6b 85       	ldd	r22, Y+11	; 0x0b
     da0:	7c 85       	ldd	r23, Y+12	; 0x0c
     da2:	8d 85       	ldd	r24, Y+13	; 0x0d
     da4:	9e 85       	ldd	r25, Y+14	; 0x0e
     da6:	20 e0       	ldi	r18, 0x00	; 0
     da8:	30 e0       	ldi	r19, 0x00	; 0
     daa:	40 e2       	ldi	r20, 0x20	; 32
     dac:	51 e4       	ldi	r21, 0x41	; 65
     dae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     db2:	dc 01       	movw	r26, r24
     db4:	cb 01       	movw	r24, r22
     db6:	bc 01       	movw	r22, r24
     db8:	cd 01       	movw	r24, r26
     dba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     dbe:	dc 01       	movw	r26, r24
     dc0:	cb 01       	movw	r24, r22
     dc2:	9e 83       	std	Y+6, r25	; 0x06
     dc4:	8d 83       	std	Y+5, r24	; 0x05
     dc6:	0f c0       	rjmp	.+30     	; 0xde6 <CLCD_voidInit+0xc6>
     dc8:	80 e9       	ldi	r24, 0x90	; 144
     dca:	91 e0       	ldi	r25, 0x01	; 1
     dcc:	9c 83       	std	Y+4, r25	; 0x04
     dce:	8b 83       	std	Y+3, r24	; 0x03
     dd0:	8b 81       	ldd	r24, Y+3	; 0x03
     dd2:	9c 81       	ldd	r25, Y+4	; 0x04
     dd4:	01 97       	sbiw	r24, 0x01	; 1
     dd6:	f1 f7       	brne	.-4      	; 0xdd4 <CLCD_voidInit+0xb4>
     dd8:	9c 83       	std	Y+4, r25	; 0x04
     dda:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ddc:	8d 81       	ldd	r24, Y+5	; 0x05
     dde:	9e 81       	ldd	r25, Y+6	; 0x06
     de0:	01 97       	sbiw	r24, 0x01	; 1
     de2:	9e 83       	std	Y+6, r25	; 0x06
     de4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     de6:	8d 81       	ldd	r24, Y+5	; 0x05
     de8:	9e 81       	ldd	r25, Y+6	; 0x06
     dea:	00 97       	sbiw	r24, 0x00	; 0
     dec:	69 f7       	brne	.-38     	; 0xdc8 <CLCD_voidInit+0xa8>
     dee:	14 c0       	rjmp	.+40     	; 0xe18 <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     df0:	6f 81       	ldd	r22, Y+7	; 0x07
     df2:	78 85       	ldd	r23, Y+8	; 0x08
     df4:	89 85       	ldd	r24, Y+9	; 0x09
     df6:	9a 85       	ldd	r25, Y+10	; 0x0a
     df8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     dfc:	dc 01       	movw	r26, r24
     dfe:	cb 01       	movw	r24, r22
     e00:	9e 83       	std	Y+6, r25	; 0x06
     e02:	8d 83       	std	Y+5, r24	; 0x05
     e04:	8d 81       	ldd	r24, Y+5	; 0x05
     e06:	9e 81       	ldd	r25, Y+6	; 0x06
     e08:	9a 83       	std	Y+2, r25	; 0x02
     e0a:	89 83       	std	Y+1, r24	; 0x01
     e0c:	89 81       	ldd	r24, Y+1	; 0x01
     e0e:	9a 81       	ldd	r25, Y+2	; 0x02
     e10:	01 97       	sbiw	r24, 0x01	; 1
     e12:	f1 f7       	brne	.-4      	; 0xe10 <CLCD_voidInit+0xf0>
     e14:	9a 83       	std	Y+2, r25	; 0x02
     e16:	89 83       	std	Y+1, r24	; 0x01

		//2-Function Set Command : 2 lines , font size 5*7

	#if			CLCD_U8CONNECTION_MODE == FOUR_BIT
					/* Sending Command into 3 Steps */
	voidSetHalfDataPort( 0b0010 ) ;
     e18:	82 e0       	ldi	r24, 0x02	; 2
     e1a:	0e 94 9b 05 	call	0xb36	; 0xb36 <voidSetHalfDataPort>
	voidSendEnablePulse ();
     e1e:	0e 94 cb 05 	call	0xb96	; 0xb96 <voidSendEnablePulse>
	voidSetHalfDataPort( 0b0010 ) ;
     e22:	82 e0       	ldi	r24, 0x02	; 2
     e24:	0e 94 9b 05 	call	0xb36	; 0xb36 <voidSetHalfDataPort>
	voidSendEnablePulse ();
     e28:	0e 94 cb 05 	call	0xb96	; 0xb96 <voidSendEnablePulse>
	voidSetHalfDataPort( 0b1000 ) ;
     e2c:	88 e0       	ldi	r24, 0x08	; 8
     e2e:	0e 94 9b 05 	call	0xb36	; 0xb36 <voidSetHalfDataPort>
	voidSendEnablePulse ();
     e32:	0e 94 cb 05 	call	0xb96	; 0xb96 <voidSendEnablePulse>

		//3- WAIT FOR MORE THAN 39 uSec ( already done before )

		//4-Function Set Command for Display on/off control : Display on , cursor off , Blink cursor off

	CLCD_voidSendCommand(0b00001100);
     e36:	8c e0       	ldi	r24, 0x0C	; 12
     e38:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <CLCD_voidSendCommand>

		//5- WAIT FOR MORE THAN 39 uSec ( already done before )

		//6- Clear Display

	CLCD_voidSendCommand(1);
     e3c:	81 e0       	ldi	r24, 0x01	; 1
     e3e:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <CLCD_voidSendCommand>

		//7- Entry Mode Set ( Skip It )

}
     e42:	2e 96       	adiw	r28, 0x0e	; 14
     e44:	0f b6       	in	r0, 0x3f	; 63
     e46:	f8 94       	cli
     e48:	de bf       	out	0x3e, r29	; 62
     e4a:	0f be       	out	0x3f, r0	; 63
     e4c:	cd bf       	out	0x3d, r28	; 61
     e4e:	cf 91       	pop	r28
     e50:	df 91       	pop	r29
     e52:	08 95       	ret

00000e54 <voidSendString>:

void voidSendString 	( char *copy_pu8String )
{
     e54:	df 93       	push	r29
     e56:	cf 93       	push	r28
     e58:	00 d0       	rcall	.+0      	; 0xe5a <voidSendString+0x6>
     e5a:	00 d0       	rcall	.+0      	; 0xe5c <voidSendString+0x8>
     e5c:	cd b7       	in	r28, 0x3d	; 61
     e5e:	de b7       	in	r29, 0x3e	; 62
     e60:	9c 83       	std	Y+4, r25	; 0x04
     e62:	8b 83       	std	Y+3, r24	; 0x03
	uint8 local_u8StringCounter = 0 ;
     e64:	1a 82       	std	Y+2, r1	; 0x02
	uint8 local_u8Iterator = 0 ;
     e66:	19 82       	std	Y+1, r1	; 0x01
	for (local_u8Iterator=0 ; *(copy_pu8String+local_u8Iterator) != '\0' ; local_u8Iterator ++ )
     e68:	19 82       	std	Y+1, r1	; 0x01
     e6a:	06 c0       	rjmp	.+12     	; 0xe78 <voidSendString+0x24>
	{
		local_u8StringCounter ++ ;
     e6c:	8a 81       	ldd	r24, Y+2	; 0x02
     e6e:	8f 5f       	subi	r24, 0xFF	; 255
     e70:	8a 83       	std	Y+2, r24	; 0x02

void voidSendString 	( char *copy_pu8String )
{
	uint8 local_u8StringCounter = 0 ;
	uint8 local_u8Iterator = 0 ;
	for (local_u8Iterator=0 ; *(copy_pu8String+local_u8Iterator) != '\0' ; local_u8Iterator ++ )
     e72:	89 81       	ldd	r24, Y+1	; 0x01
     e74:	8f 5f       	subi	r24, 0xFF	; 255
     e76:	89 83       	std	Y+1, r24	; 0x01
     e78:	89 81       	ldd	r24, Y+1	; 0x01
     e7a:	28 2f       	mov	r18, r24
     e7c:	30 e0       	ldi	r19, 0x00	; 0
     e7e:	8b 81       	ldd	r24, Y+3	; 0x03
     e80:	9c 81       	ldd	r25, Y+4	; 0x04
     e82:	fc 01       	movw	r30, r24
     e84:	e2 0f       	add	r30, r18
     e86:	f3 1f       	adc	r31, r19
     e88:	80 81       	ld	r24, Z
     e8a:	88 23       	and	r24, r24
     e8c:	79 f7       	brne	.-34     	; 0xe6c <voidSendString+0x18>
	{
		local_u8StringCounter ++ ;
	}
	for (local_u8Iterator = 0 ; local_u8Iterator <= local_u8StringCounter-1 ; local_u8Iterator ++ )
     e8e:	19 82       	std	Y+1, r1	; 0x01
     e90:	0e c0       	rjmp	.+28     	; 0xeae <voidSendString+0x5a>
	{
		CLCD_voidSendData(copy_pu8String[local_u8Iterator]);
     e92:	89 81       	ldd	r24, Y+1	; 0x01
     e94:	28 2f       	mov	r18, r24
     e96:	30 e0       	ldi	r19, 0x00	; 0
     e98:	8b 81       	ldd	r24, Y+3	; 0x03
     e9a:	9c 81       	ldd	r25, Y+4	; 0x04
     e9c:	fc 01       	movw	r30, r24
     e9e:	e2 0f       	add	r30, r18
     ea0:	f3 1f       	adc	r31, r19
     ea2:	80 81       	ld	r24, Z
     ea4:	0e 94 75 06 	call	0xcea	; 0xcea <CLCD_voidSendData>
	uint8 local_u8Iterator = 0 ;
	for (local_u8Iterator=0 ; *(copy_pu8String+local_u8Iterator) != '\0' ; local_u8Iterator ++ )
	{
		local_u8StringCounter ++ ;
	}
	for (local_u8Iterator = 0 ; local_u8Iterator <= local_u8StringCounter-1 ; local_u8Iterator ++ )
     ea8:	89 81       	ldd	r24, Y+1	; 0x01
     eaa:	8f 5f       	subi	r24, 0xFF	; 255
     eac:	89 83       	std	Y+1, r24	; 0x01
     eae:	89 81       	ldd	r24, Y+1	; 0x01
     eb0:	28 2f       	mov	r18, r24
     eb2:	30 e0       	ldi	r19, 0x00	; 0
     eb4:	8a 81       	ldd	r24, Y+2	; 0x02
     eb6:	88 2f       	mov	r24, r24
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	01 97       	sbiw	r24, 0x01	; 1
     ebc:	82 17       	cp	r24, r18
     ebe:	93 07       	cpc	r25, r19
     ec0:	44 f7       	brge	.-48     	; 0xe92 <voidSendString+0x3e>
	{
		CLCD_voidSendData(copy_pu8String[local_u8Iterator]);
	}

}
     ec2:	0f 90       	pop	r0
     ec4:	0f 90       	pop	r0
     ec6:	0f 90       	pop	r0
     ec8:	0f 90       	pop	r0
     eca:	cf 91       	pop	r28
     ecc:	df 91       	pop	r29
     ece:	08 95       	ret

00000ed0 <voidSendNumber>:

void voidSendNumber		( sint32 copy_s32Number )
{
     ed0:	0f 93       	push	r16
     ed2:	1f 93       	push	r17
     ed4:	df 93       	push	r29
     ed6:	cf 93       	push	r28
     ed8:	cd b7       	in	r28, 0x3d	; 61
     eda:	de b7       	in	r29, 0x3e	; 62
     edc:	67 97       	sbiw	r28, 0x17	; 23
     ede:	0f b6       	in	r0, 0x3f	; 63
     ee0:	f8 94       	cli
     ee2:	de bf       	out	0x3e, r29	; 62
     ee4:	0f be       	out	0x3f, r0	; 63
     ee6:	cd bf       	out	0x3d, r28	; 61
     ee8:	6e 87       	std	Y+14, r22	; 0x0e
     eea:	7f 87       	std	Y+15, r23	; 0x0f
     eec:	88 8b       	std	Y+16, r24	; 0x10
     eee:	99 8b       	std	Y+17, r25	; 0x11
	}
	for (local_u8Iterator=0 ; local_u8Iterator < (local_u8DigitCounter) ; local_u8Iterator ++ )
		{
			CLCD_voidSendData(local_u8NumberSendArr[local_u8Iterator]+'0');
		}
}
     ef0:	2d b7       	in	r18, 0x3d	; 61
     ef2:	3e b7       	in	r19, 0x3e	; 62
     ef4:	3f 8b       	std	Y+23, r19	; 0x17
     ef6:	2e 8b       	std	Y+22, r18	; 0x16
	}

}

void voidSendNumber		( sint32 copy_s32Number )
{
     ef8:	8d b7       	in	r24, 0x3d	; 61
     efa:	9e b7       	in	r25, 0x3e	; 62
     efc:	9b 8b       	std	Y+19, r25	; 0x13
     efe:	8a 8b       	std	Y+18, r24	; 0x12
    if (copy_s32Number < 0)
     f00:	8e 85       	ldd	r24, Y+14	; 0x0e
     f02:	9f 85       	ldd	r25, Y+15	; 0x0f
     f04:	a8 89       	ldd	r26, Y+16	; 0x10
     f06:	b9 89       	ldd	r27, Y+17	; 0x11
     f08:	bb 23       	and	r27, r27
     f0a:	9c f4       	brge	.+38     	; 0xf32 <voidSendNumber+0x62>
	{
	    CLCD_voidSendData('-');
     f0c:	8d e2       	ldi	r24, 0x2D	; 45
     f0e:	0e 94 75 06 	call	0xcea	; 0xcea <CLCD_voidSendData>
	    copy_s32Number=-copy_s32Number ;
     f12:	8e 85       	ldd	r24, Y+14	; 0x0e
     f14:	9f 85       	ldd	r25, Y+15	; 0x0f
     f16:	a8 89       	ldd	r26, Y+16	; 0x10
     f18:	b9 89       	ldd	r27, Y+17	; 0x11
     f1a:	b0 95       	com	r27
     f1c:	a0 95       	com	r26
     f1e:	90 95       	com	r25
     f20:	81 95       	neg	r24
     f22:	9f 4f       	sbci	r25, 0xFF	; 255
     f24:	af 4f       	sbci	r26, 0xFF	; 255
     f26:	bf 4f       	sbci	r27, 0xFF	; 255
     f28:	8e 87       	std	Y+14, r24	; 0x0e
     f2a:	9f 87       	std	Y+15, r25	; 0x0f
     f2c:	a8 8b       	std	Y+16, r26	; 0x10
     f2e:	b9 8b       	std	Y+17, r27	; 0x11
     f30:	0c c0       	rjmp	.+24     	; 0xf4a <voidSendNumber+0x7a>
	}
    else if (copy_s32Number == 0 )
     f32:	8e 85       	ldd	r24, Y+14	; 0x0e
     f34:	9f 85       	ldd	r25, Y+15	; 0x0f
     f36:	a8 89       	ldd	r26, Y+16	; 0x10
     f38:	b9 89       	ldd	r27, Y+17	; 0x11
     f3a:	00 97       	sbiw	r24, 0x00	; 0
     f3c:	a1 05       	cpc	r26, r1
     f3e:	b1 05       	cpc	r27, r1
     f40:	21 f4       	brne	.+8      	; 0xf4a <voidSendNumber+0x7a>
    {
    	CLCD_voidSendData('0');
     f42:	80 e3       	ldi	r24, 0x30	; 48
     f44:	0e 94 75 06 	call	0xcea	; 0xcea <CLCD_voidSendData>
     f48:	99 c0       	rjmp	.+306    	; 0x107c <voidSendNumber+0x1ac>
    	return ;
    }
	sint32 local_s32NumberSend = copy_s32Number ;
     f4a:	8e 85       	ldd	r24, Y+14	; 0x0e
     f4c:	9f 85       	ldd	r25, Y+15	; 0x0f
     f4e:	a8 89       	ldd	r26, Y+16	; 0x10
     f50:	b9 89       	ldd	r27, Y+17	; 0x11
     f52:	88 87       	std	Y+8, r24	; 0x08
     f54:	99 87       	std	Y+9, r25	; 0x09
     f56:	aa 87       	std	Y+10, r26	; 0x0a
     f58:	bb 87       	std	Y+11, r27	; 0x0b
	sint32 local_s32NumberDiv  = copy_s32Number ;
     f5a:	8e 85       	ldd	r24, Y+14	; 0x0e
     f5c:	9f 85       	ldd	r25, Y+15	; 0x0f
     f5e:	a8 89       	ldd	r26, Y+16	; 0x10
     f60:	b9 89       	ldd	r27, Y+17	; 0x11
     f62:	8c 83       	std	Y+4, r24	; 0x04
     f64:	9d 83       	std	Y+5, r25	; 0x05
     f66:	ae 83       	std	Y+6, r26	; 0x06
     f68:	bf 83       	std	Y+7, r27	; 0x07
	uint8 local_u8DigitCounter = 0 ;
     f6a:	1b 82       	std	Y+3, r1	; 0x03
     f6c:	15 c0       	rjmp	.+42     	; 0xf98 <voidSendNumber+0xc8>
	uint8 local_u8Iterator ;
						/* Calculate The Number Of Digits in Number Sent To Function */
	while (local_s32NumberSend != 0)
	{
		local_s32NumberSend /= 10 ;
     f6e:	88 85       	ldd	r24, Y+8	; 0x08
     f70:	99 85       	ldd	r25, Y+9	; 0x09
     f72:	aa 85       	ldd	r26, Y+10	; 0x0a
     f74:	bb 85       	ldd	r27, Y+11	; 0x0b
     f76:	2a e0       	ldi	r18, 0x0A	; 10
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	40 e0       	ldi	r20, 0x00	; 0
     f7c:	50 e0       	ldi	r21, 0x00	; 0
     f7e:	bc 01       	movw	r22, r24
     f80:	cd 01       	movw	r24, r26
     f82:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <__divmodsi4>
     f86:	da 01       	movw	r26, r20
     f88:	c9 01       	movw	r24, r18
     f8a:	88 87       	std	Y+8, r24	; 0x08
     f8c:	99 87       	std	Y+9, r25	; 0x09
     f8e:	aa 87       	std	Y+10, r26	; 0x0a
     f90:	bb 87       	std	Y+11, r27	; 0x0b
		local_u8DigitCounter++ ;
     f92:	8b 81       	ldd	r24, Y+3	; 0x03
     f94:	8f 5f       	subi	r24, 0xFF	; 255
     f96:	8b 83       	std	Y+3, r24	; 0x03
	sint32 local_s32NumberSend = copy_s32Number ;
	sint32 local_s32NumberDiv  = copy_s32Number ;
	uint8 local_u8DigitCounter = 0 ;
	uint8 local_u8Iterator ;
						/* Calculate The Number Of Digits in Number Sent To Function */
	while (local_s32NumberSend != 0)
     f98:	88 85       	ldd	r24, Y+8	; 0x08
     f9a:	99 85       	ldd	r25, Y+9	; 0x09
     f9c:	aa 85       	ldd	r26, Y+10	; 0x0a
     f9e:	bb 85       	ldd	r27, Y+11	; 0x0b
     fa0:	00 97       	sbiw	r24, 0x00	; 0
     fa2:	a1 05       	cpc	r26, r1
     fa4:	b1 05       	cpc	r27, r1
     fa6:	19 f7       	brne	.-58     	; 0xf6e <voidSendNumber+0x9e>
	{
		local_s32NumberSend /= 10 ;
		local_u8DigitCounter++ ;
	}
						/* Save The Value in Array As Separated Digits */
	uint8 local_u8ArrSize = local_u8DigitCounter ;
     fa8:	8b 81       	ldd	r24, Y+3	; 0x03
     faa:	89 83       	std	Y+1, r24	; 0x01
	uint8 local_u8NumberSendArr[local_u8ArrSize];
     fac:	89 81       	ldd	r24, Y+1	; 0x01
     fae:	88 2f       	mov	r24, r24
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	2d b7       	in	r18, 0x3d	; 61
     fb4:	3e b7       	in	r19, 0x3e	; 62
     fb6:	28 1b       	sub	r18, r24
     fb8:	39 0b       	sbc	r19, r25
     fba:	0f b6       	in	r0, 0x3f	; 63
     fbc:	f8 94       	cli
     fbe:	3e bf       	out	0x3e, r19	; 62
     fc0:	0f be       	out	0x3f, r0	; 63
     fc2:	2d bf       	out	0x3d, r18	; 61
     fc4:	8d b7       	in	r24, 0x3d	; 61
     fc6:	9e b7       	in	r25, 0x3e	; 62
     fc8:	01 96       	adiw	r24, 0x01	; 1
     fca:	9d 8b       	std	Y+21, r25	; 0x15
     fcc:	8c 8b       	std	Y+20, r24	; 0x14
     fce:	8c 89       	ldd	r24, Y+20	; 0x14
     fd0:	9d 89       	ldd	r25, Y+21	; 0x15
     fd2:	00 96       	adiw	r24, 0x00	; 0
     fd4:	9d 8b       	std	Y+21, r25	; 0x15
     fd6:	8c 8b       	std	Y+20, r24	; 0x14
     fd8:	2c 89       	ldd	r18, Y+20	; 0x14
     fda:	3d 89       	ldd	r19, Y+21	; 0x15
     fdc:	3d 87       	std	Y+13, r19	; 0x0d
     fde:	2c 87       	std	Y+12, r18	; 0x0c
     fe0:	30 c0       	rjmp	.+96     	; 0x1042 <voidSendNumber+0x172>
	while (local_s32NumberDiv != 0)
	{
		local_u8NumberSendArr[local_u8ArrSize-1] = (local_s32NumberDiv % 10) ;
     fe2:	89 81       	ldd	r24, Y+1	; 0x01
     fe4:	88 2f       	mov	r24, r24
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	8c 01       	movw	r16, r24
     fea:	01 50       	subi	r16, 0x01	; 1
     fec:	10 40       	sbci	r17, 0x00	; 0
     fee:	8c 81       	ldd	r24, Y+4	; 0x04
     ff0:	9d 81       	ldd	r25, Y+5	; 0x05
     ff2:	ae 81       	ldd	r26, Y+6	; 0x06
     ff4:	bf 81       	ldd	r27, Y+7	; 0x07
     ff6:	2a e0       	ldi	r18, 0x0A	; 10
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	40 e0       	ldi	r20, 0x00	; 0
     ffc:	50 e0       	ldi	r21, 0x00	; 0
     ffe:	bc 01       	movw	r22, r24
    1000:	cd 01       	movw	r24, r26
    1002:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <__divmodsi4>
    1006:	dc 01       	movw	r26, r24
    1008:	cb 01       	movw	r24, r22
    100a:	28 2f       	mov	r18, r24
    100c:	8c 85       	ldd	r24, Y+12	; 0x0c
    100e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1010:	fc 01       	movw	r30, r24
    1012:	e0 0f       	add	r30, r16
    1014:	f1 1f       	adc	r31, r17
    1016:	20 83       	st	Z, r18
		local_s32NumberDiv /=10 ;
    1018:	8c 81       	ldd	r24, Y+4	; 0x04
    101a:	9d 81       	ldd	r25, Y+5	; 0x05
    101c:	ae 81       	ldd	r26, Y+6	; 0x06
    101e:	bf 81       	ldd	r27, Y+7	; 0x07
    1020:	2a e0       	ldi	r18, 0x0A	; 10
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	40 e0       	ldi	r20, 0x00	; 0
    1026:	50 e0       	ldi	r21, 0x00	; 0
    1028:	bc 01       	movw	r22, r24
    102a:	cd 01       	movw	r24, r26
    102c:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <__divmodsi4>
    1030:	da 01       	movw	r26, r20
    1032:	c9 01       	movw	r24, r18
    1034:	8c 83       	std	Y+4, r24	; 0x04
    1036:	9d 83       	std	Y+5, r25	; 0x05
    1038:	ae 83       	std	Y+6, r26	; 0x06
    103a:	bf 83       	std	Y+7, r27	; 0x07
		local_u8ArrSize -- ;
    103c:	89 81       	ldd	r24, Y+1	; 0x01
    103e:	81 50       	subi	r24, 0x01	; 1
    1040:	89 83       	std	Y+1, r24	; 0x01
		local_u8DigitCounter++ ;
	}
						/* Save The Value in Array As Separated Digits */
	uint8 local_u8ArrSize = local_u8DigitCounter ;
	uint8 local_u8NumberSendArr[local_u8ArrSize];
	while (local_s32NumberDiv != 0)
    1042:	8c 81       	ldd	r24, Y+4	; 0x04
    1044:	9d 81       	ldd	r25, Y+5	; 0x05
    1046:	ae 81       	ldd	r26, Y+6	; 0x06
    1048:	bf 81       	ldd	r27, Y+7	; 0x07
    104a:	00 97       	sbiw	r24, 0x00	; 0
    104c:	a1 05       	cpc	r26, r1
    104e:	b1 05       	cpc	r27, r1
    1050:	41 f6       	brne	.-112    	; 0xfe2 <voidSendNumber+0x112>
	{
		local_u8NumberSendArr[local_u8ArrSize-1] = (local_s32NumberDiv % 10) ;
		local_s32NumberDiv /=10 ;
		local_u8ArrSize -- ;
	}
	for (local_u8Iterator=0 ; local_u8Iterator < (local_u8DigitCounter) ; local_u8Iterator ++ )
    1052:	1a 82       	std	Y+2, r1	; 0x02
    1054:	0f c0       	rjmp	.+30     	; 0x1074 <voidSendNumber+0x1a4>
		{
			CLCD_voidSendData(local_u8NumberSendArr[local_u8Iterator]+'0');
    1056:	8a 81       	ldd	r24, Y+2	; 0x02
    1058:	28 2f       	mov	r18, r24
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	8c 85       	ldd	r24, Y+12	; 0x0c
    105e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1060:	fc 01       	movw	r30, r24
    1062:	e2 0f       	add	r30, r18
    1064:	f3 1f       	adc	r31, r19
    1066:	80 81       	ld	r24, Z
    1068:	80 5d       	subi	r24, 0xD0	; 208
    106a:	0e 94 75 06 	call	0xcea	; 0xcea <CLCD_voidSendData>
	{
		local_u8NumberSendArr[local_u8ArrSize-1] = (local_s32NumberDiv % 10) ;
		local_s32NumberDiv /=10 ;
		local_u8ArrSize -- ;
	}
	for (local_u8Iterator=0 ; local_u8Iterator < (local_u8DigitCounter) ; local_u8Iterator ++ )
    106e:	8a 81       	ldd	r24, Y+2	; 0x02
    1070:	8f 5f       	subi	r24, 0xFF	; 255
    1072:	8a 83       	std	Y+2, r24	; 0x02
    1074:	9a 81       	ldd	r25, Y+2	; 0x02
    1076:	8b 81       	ldd	r24, Y+3	; 0x03
    1078:	98 17       	cp	r25, r24
    107a:	68 f3       	brcs	.-38     	; 0x1056 <voidSendNumber+0x186>
    107c:	8a 89       	ldd	r24, Y+18	; 0x12
    107e:	9b 89       	ldd	r25, Y+19	; 0x13
    1080:	0f b6       	in	r0, 0x3f	; 63
    1082:	f8 94       	cli
    1084:	9e bf       	out	0x3e, r25	; 62
    1086:	0f be       	out	0x3f, r0	; 63
    1088:	8d bf       	out	0x3d, r24	; 61
		{
			CLCD_voidSendData(local_u8NumberSendArr[local_u8Iterator]+'0');
		}
}
    108a:	2e 89       	ldd	r18, Y+22	; 0x16
    108c:	3f 89       	ldd	r19, Y+23	; 0x17
    108e:	0f b6       	in	r0, 0x3f	; 63
    1090:	f8 94       	cli
    1092:	3e bf       	out	0x3e, r19	; 62
    1094:	0f be       	out	0x3f, r0	; 63
    1096:	2d bf       	out	0x3d, r18	; 61
    1098:	67 96       	adiw	r28, 0x17	; 23
    109a:	0f b6       	in	r0, 0x3f	; 63
    109c:	f8 94       	cli
    109e:	de bf       	out	0x3e, r29	; 62
    10a0:	0f be       	out	0x3f, r0	; 63
    10a2:	cd bf       	out	0x3d, r28	; 61
    10a4:	cf 91       	pop	r28
    10a6:	df 91       	pop	r29
    10a8:	1f 91       	pop	r17
    10aa:	0f 91       	pop	r16
    10ac:	08 95       	ret

000010ae <CLCD_voidGoToXY>:

void CLCD_voidGoToXY 		( uint8 copy_u8XPos ,uint8 copy_u8YPos )
{
    10ae:	df 93       	push	r29
    10b0:	cf 93       	push	r28
    10b2:	00 d0       	rcall	.+0      	; 0x10b4 <CLCD_voidGoToXY+0x6>
    10b4:	0f 92       	push	r0
    10b6:	cd b7       	in	r28, 0x3d	; 61
    10b8:	de b7       	in	r29, 0x3e	; 62
    10ba:	8a 83       	std	Y+2, r24	; 0x02
    10bc:	6b 83       	std	Y+3, r22	; 0x03

	uint8 Local_u8DDRamAdd = ( copy_u8YPos * 0x40u ) + copy_u8XPos ;
    10be:	8b 81       	ldd	r24, Y+3	; 0x03
    10c0:	88 2f       	mov	r24, r24
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	00 24       	eor	r0, r0
    10c6:	96 95       	lsr	r25
    10c8:	87 95       	ror	r24
    10ca:	07 94       	ror	r0
    10cc:	96 95       	lsr	r25
    10ce:	87 95       	ror	r24
    10d0:	07 94       	ror	r0
    10d2:	98 2f       	mov	r25, r24
    10d4:	80 2d       	mov	r24, r0
    10d6:	98 2f       	mov	r25, r24
    10d8:	8a 81       	ldd	r24, Y+2	; 0x02
    10da:	89 0f       	add	r24, r25
    10dc:	89 83       	std	Y+1, r24	; 0x01

						/* Set Bit 7 for Setting DDRAM Address Command */

	SET_BIT( Local_u8DDRamAdd , 7U);
    10de:	89 81       	ldd	r24, Y+1	; 0x01
    10e0:	80 68       	ori	r24, 0x80	; 128
    10e2:	89 83       	std	Y+1, r24	; 0x01

											//

						/* Send The Setting DDRAM Address Command */

	CLCD_voidSendCommand( Local_u8DDRamAdd );
    10e4:	89 81       	ldd	r24, Y+1	; 0x01
    10e6:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <CLCD_voidSendCommand>

											//

}
    10ea:	0f 90       	pop	r0
    10ec:	0f 90       	pop	r0
    10ee:	0f 90       	pop	r0
    10f0:	cf 91       	pop	r28
    10f2:	df 91       	pop	r29
    10f4:	08 95       	ret

000010f6 <CLCD_u8WriteSpecialCharacter>:

uint8 CLCD_u8WriteSpecialCharacter	( uint8 copy_u8PatternNumber , uint8 copy_pu8PatternArr[] , uint8 copy_u8XPos , uint8 copy_u8YPos)
{
    10f6:	df 93       	push	r29
    10f8:	cf 93       	push	r28
    10fa:	cd b7       	in	r28, 0x3d	; 61
    10fc:	de b7       	in	r29, 0x3e	; 62
    10fe:	28 97       	sbiw	r28, 0x08	; 8
    1100:	0f b6       	in	r0, 0x3f	; 63
    1102:	f8 94       	cli
    1104:	de bf       	out	0x3e, r29	; 62
    1106:	0f be       	out	0x3f, r0	; 63
    1108:	cd bf       	out	0x3d, r28	; 61
    110a:	8c 83       	std	Y+4, r24	; 0x04
    110c:	7e 83       	std	Y+6, r23	; 0x06
    110e:	6d 83       	std	Y+5, r22	; 0x05
    1110:	4f 83       	std	Y+7, r20	; 0x07
    1112:	28 87       	std	Y+8, r18	; 0x08

	uint8 Local_u8ErrorStatus = OK ;
    1114:	1b 82       	std	Y+3, r1	; 0x03
	if ( copy_pu8PatternArr != NULL )
    1116:	8d 81       	ldd	r24, Y+5	; 0x05
    1118:	9e 81       	ldd	r25, Y+6	; 0x06
    111a:	00 97       	sbiw	r24, 0x00	; 0
    111c:	59 f1       	breq	.+86     	; 0x1174 <CLCD_u8WriteSpecialCharacter+0x7e>
	{

		uint8 Local_u8CGRAMAdd = copy_u8PatternNumber * 8u ;
    111e:	8c 81       	ldd	r24, Y+4	; 0x04
    1120:	88 2f       	mov	r24, r24
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	88 0f       	add	r24, r24
    1126:	99 1f       	adc	r25, r25
    1128:	88 0f       	add	r24, r24
    112a:	99 1f       	adc	r25, r25
    112c:	88 0f       	add	r24, r24
    112e:	99 1f       	adc	r25, r25
    1130:	8a 83       	std	Y+2, r24	; 0x02
		uint8 Local_u8Iterator ;

						/* Set Bit 6 & Clear Bit 7 for Setting CGRAM Address Command */

		SET_BIT( Local_u8CGRAMAdd , 6U ) ;
    1132:	8a 81       	ldd	r24, Y+2	; 0x02
    1134:	80 64       	ori	r24, 0x40	; 64
    1136:	8a 83       	std	Y+2, r24	; 0x02

												//

						/* Set CGRAM Address */

		CLCD_voidSendCommand( Local_u8CGRAMAdd );
    1138:	8a 81       	ldd	r24, Y+2	; 0x02
    113a:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <CLCD_voidSendCommand>

											   //

						/* Write the pattern inside CGRAM */

		for ( Local_u8Iterator = 0u ; Local_u8Iterator < 8u ; Local_u8Iterator ++)
    113e:	19 82       	std	Y+1, r1	; 0x01
    1140:	0e c0       	rjmp	.+28     	; 0x115e <CLCD_u8WriteSpecialCharacter+0x68>
		{
			CLCD_voidSendData( copy_pu8PatternArr [ Local_u8Iterator ] );
    1142:	89 81       	ldd	r24, Y+1	; 0x01
    1144:	28 2f       	mov	r18, r24
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	8d 81       	ldd	r24, Y+5	; 0x05
    114a:	9e 81       	ldd	r25, Y+6	; 0x06
    114c:	fc 01       	movw	r30, r24
    114e:	e2 0f       	add	r30, r18
    1150:	f3 1f       	adc	r31, r19
    1152:	80 81       	ld	r24, Z
    1154:	0e 94 75 06 	call	0xcea	; 0xcea <CLCD_voidSendData>

											   //

						/* Write the pattern inside CGRAM */

		for ( Local_u8Iterator = 0u ; Local_u8Iterator < 8u ; Local_u8Iterator ++)
    1158:	89 81       	ldd	r24, Y+1	; 0x01
    115a:	8f 5f       	subi	r24, 0xFF	; 255
    115c:	89 83       	std	Y+1, r24	; 0x01
    115e:	89 81       	ldd	r24, Y+1	; 0x01
    1160:	88 30       	cpi	r24, 0x08	; 8
    1162:	78 f3       	brcs	.-34     	; 0x1142 <CLCD_u8WriteSpecialCharacter+0x4c>

											  //

						/* Set DDRAM Address */

		CLCD_voidGoToXY( copy_u8XPos , copy_u8YPos ) ;
    1164:	8f 81       	ldd	r24, Y+7	; 0x07
    1166:	68 85       	ldd	r22, Y+8	; 0x08
    1168:	0e 94 57 08 	call	0x10ae	; 0x10ae <CLCD_voidGoToXY>

											 //

						/* Write the corresponding pattern number to display from CGRAM */

		CLCD_voidSendData( copy_u8PatternNumber ) ;
    116c:	8c 81       	ldd	r24, Y+4	; 0x04
    116e:	0e 94 75 06 	call	0xcea	; 0xcea <CLCD_voidSendData>
    1172:	02 c0       	rjmp	.+4      	; 0x1178 <CLCD_u8WriteSpecialCharacter+0x82>

	}
	else
	{

		Local_u8ErrorStatus = NULL_PTR ;
    1174:	82 e0       	ldi	r24, 0x02	; 2
    1176:	8b 83       	std	Y+3, r24	; 0x03

	}

	return Local_u8ErrorStatus  ;
    1178:	8b 81       	ldd	r24, Y+3	; 0x03

}
    117a:	28 96       	adiw	r28, 0x08	; 8
    117c:	0f b6       	in	r0, 0x3f	; 63
    117e:	f8 94       	cli
    1180:	de bf       	out	0x3e, r29	; 62
    1182:	0f be       	out	0x3f, r0	; 63
    1184:	cd bf       	out	0x3d, r28	; 61
    1186:	cf 91       	pop	r28
    1188:	df 91       	pop	r29
    118a:	08 95       	ret

0000118c <DIO_U8SetPinDirection>:

#include "DIO_Reg.h"
#include "DIO_Interface.h"

uint8 DIO_U8SetPinDirection	    (DIO_Port_t copy_Port,	 DIO_Pin_t copy_PinNum,		DIO_PinDir_t copy_Dir)
{
    118c:	df 93       	push	r29
    118e:	cf 93       	push	r28
    1190:	cd b7       	in	r28, 0x3d	; 61
    1192:	de b7       	in	r29, 0x3e	; 62
    1194:	28 97       	sbiw	r28, 0x08	; 8
    1196:	0f b6       	in	r0, 0x3f	; 63
    1198:	f8 94       	cli
    119a:	de bf       	out	0x3e, r29	; 62
    119c:	0f be       	out	0x3f, r0	; 63
    119e:	cd bf       	out	0x3d, r28	; 61
    11a0:	8a 83       	std	Y+2, r24	; 0x02
    11a2:	6b 83       	std	Y+3, r22	; 0x03
    11a4:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK ;
    11a6:	19 82       	std	Y+1, r1	; 0x01
	if ( (copy_PinNum >= DIO_PIN0) && (copy_PinNum <= DIO_PIN7) )
    11a8:	8b 81       	ldd	r24, Y+3	; 0x03
    11aa:	88 30       	cpi	r24, 0x08	; 8
    11ac:	08 f0       	brcs	.+2      	; 0x11b0 <DIO_U8SetPinDirection+0x24>
    11ae:	f4 c0       	rjmp	.+488    	; 0x1398 <DIO_U8SetPinDirection+0x20c>
	{
		if (copy_Dir==DIO_PIN_INPUT)
    11b0:	8c 81       	ldd	r24, Y+4	; 0x04
    11b2:	88 23       	and	r24, r24
    11b4:	09 f0       	breq	.+2      	; 0x11b8 <DIO_U8SetPinDirection+0x2c>
    11b6:	77 c0       	rjmp	.+238    	; 0x12a6 <DIO_U8SetPinDirection+0x11a>
		{
			switch (copy_Port)
    11b8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ba:	28 2f       	mov	r18, r24
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	38 87       	std	Y+8, r19	; 0x08
    11c0:	2f 83       	std	Y+7, r18	; 0x07
    11c2:	8f 81       	ldd	r24, Y+7	; 0x07
    11c4:	98 85       	ldd	r25, Y+8	; 0x08
    11c6:	81 30       	cpi	r24, 0x01	; 1
    11c8:	91 05       	cpc	r25, r1
    11ca:	59 f1       	breq	.+86     	; 0x1222 <DIO_U8SetPinDirection+0x96>
    11cc:	2f 81       	ldd	r18, Y+7	; 0x07
    11ce:	38 85       	ldd	r19, Y+8	; 0x08
    11d0:	22 30       	cpi	r18, 0x02	; 2
    11d2:	31 05       	cpc	r19, r1
    11d4:	2c f4       	brge	.+10     	; 0x11e0 <DIO_U8SetPinDirection+0x54>
    11d6:	8f 81       	ldd	r24, Y+7	; 0x07
    11d8:	98 85       	ldd	r25, Y+8	; 0x08
    11da:	00 97       	sbiw	r24, 0x00	; 0
    11dc:	69 f0       	breq	.+26     	; 0x11f8 <DIO_U8SetPinDirection+0x6c>
    11de:	60 c0       	rjmp	.+192    	; 0x12a0 <DIO_U8SetPinDirection+0x114>
    11e0:	2f 81       	ldd	r18, Y+7	; 0x07
    11e2:	38 85       	ldd	r19, Y+8	; 0x08
    11e4:	22 30       	cpi	r18, 0x02	; 2
    11e6:	31 05       	cpc	r19, r1
    11e8:	89 f1       	breq	.+98     	; 0x124c <DIO_U8SetPinDirection+0xc0>
    11ea:	8f 81       	ldd	r24, Y+7	; 0x07
    11ec:	98 85       	ldd	r25, Y+8	; 0x08
    11ee:	83 30       	cpi	r24, 0x03	; 3
    11f0:	91 05       	cpc	r25, r1
    11f2:	09 f4       	brne	.+2      	; 0x11f6 <DIO_U8SetPinDirection+0x6a>
    11f4:	40 c0       	rjmp	.+128    	; 0x1276 <DIO_U8SetPinDirection+0xea>
    11f6:	54 c0       	rjmp	.+168    	; 0x12a0 <DIO_U8SetPinDirection+0x114>
			{
			case DIO_PORTA : CLR_BIT(DDRA,copy_PinNum); break ;
    11f8:	aa e3       	ldi	r26, 0x3A	; 58
    11fa:	b0 e0       	ldi	r27, 0x00	; 0
    11fc:	ea e3       	ldi	r30, 0x3A	; 58
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	80 81       	ld	r24, Z
    1202:	48 2f       	mov	r20, r24
    1204:	8b 81       	ldd	r24, Y+3	; 0x03
    1206:	28 2f       	mov	r18, r24
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	81 e0       	ldi	r24, 0x01	; 1
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	02 2e       	mov	r0, r18
    1210:	02 c0       	rjmp	.+4      	; 0x1216 <DIO_U8SetPinDirection+0x8a>
    1212:	88 0f       	add	r24, r24
    1214:	99 1f       	adc	r25, r25
    1216:	0a 94       	dec	r0
    1218:	e2 f7       	brpl	.-8      	; 0x1212 <DIO_U8SetPinDirection+0x86>
    121a:	80 95       	com	r24
    121c:	84 23       	and	r24, r20
    121e:	8c 93       	st	X, r24
    1220:	bd c0       	rjmp	.+378    	; 0x139c <DIO_U8SetPinDirection+0x210>
			case DIO_PORTB : CLR_BIT(DDRB,copy_PinNum); break ;
    1222:	a7 e3       	ldi	r26, 0x37	; 55
    1224:	b0 e0       	ldi	r27, 0x00	; 0
    1226:	e7 e3       	ldi	r30, 0x37	; 55
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	80 81       	ld	r24, Z
    122c:	48 2f       	mov	r20, r24
    122e:	8b 81       	ldd	r24, Y+3	; 0x03
    1230:	28 2f       	mov	r18, r24
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	02 2e       	mov	r0, r18
    123a:	02 c0       	rjmp	.+4      	; 0x1240 <DIO_U8SetPinDirection+0xb4>
    123c:	88 0f       	add	r24, r24
    123e:	99 1f       	adc	r25, r25
    1240:	0a 94       	dec	r0
    1242:	e2 f7       	brpl	.-8      	; 0x123c <DIO_U8SetPinDirection+0xb0>
    1244:	80 95       	com	r24
    1246:	84 23       	and	r24, r20
    1248:	8c 93       	st	X, r24
    124a:	a8 c0       	rjmp	.+336    	; 0x139c <DIO_U8SetPinDirection+0x210>
			case DIO_PORTC : CLR_BIT(DDRC,copy_PinNum); break ;
    124c:	a4 e3       	ldi	r26, 0x34	; 52
    124e:	b0 e0       	ldi	r27, 0x00	; 0
    1250:	e4 e3       	ldi	r30, 0x34	; 52
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	80 81       	ld	r24, Z
    1256:	48 2f       	mov	r20, r24
    1258:	8b 81       	ldd	r24, Y+3	; 0x03
    125a:	28 2f       	mov	r18, r24
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	81 e0       	ldi	r24, 0x01	; 1
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	02 2e       	mov	r0, r18
    1264:	02 c0       	rjmp	.+4      	; 0x126a <DIO_U8SetPinDirection+0xde>
    1266:	88 0f       	add	r24, r24
    1268:	99 1f       	adc	r25, r25
    126a:	0a 94       	dec	r0
    126c:	e2 f7       	brpl	.-8      	; 0x1266 <DIO_U8SetPinDirection+0xda>
    126e:	80 95       	com	r24
    1270:	84 23       	and	r24, r20
    1272:	8c 93       	st	X, r24
    1274:	93 c0       	rjmp	.+294    	; 0x139c <DIO_U8SetPinDirection+0x210>
			case DIO_PORTD : CLR_BIT(DDRD,copy_PinNum); break ;
    1276:	a1 e3       	ldi	r26, 0x31	; 49
    1278:	b0 e0       	ldi	r27, 0x00	; 0
    127a:	e1 e3       	ldi	r30, 0x31	; 49
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	80 81       	ld	r24, Z
    1280:	48 2f       	mov	r20, r24
    1282:	8b 81       	ldd	r24, Y+3	; 0x03
    1284:	28 2f       	mov	r18, r24
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	81 e0       	ldi	r24, 0x01	; 1
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	02 2e       	mov	r0, r18
    128e:	02 c0       	rjmp	.+4      	; 0x1294 <DIO_U8SetPinDirection+0x108>
    1290:	88 0f       	add	r24, r24
    1292:	99 1f       	adc	r25, r25
    1294:	0a 94       	dec	r0
    1296:	e2 f7       	brpl	.-8      	; 0x1290 <DIO_U8SetPinDirection+0x104>
    1298:	80 95       	com	r24
    129a:	84 23       	and	r24, r20
    129c:	8c 93       	st	X, r24
    129e:	7e c0       	rjmp	.+252    	; 0x139c <DIO_U8SetPinDirection+0x210>
			default : Local_u8ErrorState = NOK ; break ;
    12a0:	81 e0       	ldi	r24, 0x01	; 1
    12a2:	89 83       	std	Y+1, r24	; 0x01
    12a4:	7b c0       	rjmp	.+246    	; 0x139c <DIO_U8SetPinDirection+0x210>
			}
		}
		else if (copy_Dir==DIO_PIN_OUTPUT)
    12a6:	8c 81       	ldd	r24, Y+4	; 0x04
    12a8:	81 30       	cpi	r24, 0x01	; 1
    12aa:	09 f0       	breq	.+2      	; 0x12ae <DIO_U8SetPinDirection+0x122>
    12ac:	72 c0       	rjmp	.+228    	; 0x1392 <DIO_U8SetPinDirection+0x206>
		{
			switch (copy_Port)
    12ae:	8a 81       	ldd	r24, Y+2	; 0x02
    12b0:	28 2f       	mov	r18, r24
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	3e 83       	std	Y+6, r19	; 0x06
    12b6:	2d 83       	std	Y+5, r18	; 0x05
    12b8:	8d 81       	ldd	r24, Y+5	; 0x05
    12ba:	9e 81       	ldd	r25, Y+6	; 0x06
    12bc:	81 30       	cpi	r24, 0x01	; 1
    12be:	91 05       	cpc	r25, r1
    12c0:	49 f1       	breq	.+82     	; 0x1314 <DIO_U8SetPinDirection+0x188>
    12c2:	2d 81       	ldd	r18, Y+5	; 0x05
    12c4:	3e 81       	ldd	r19, Y+6	; 0x06
    12c6:	22 30       	cpi	r18, 0x02	; 2
    12c8:	31 05       	cpc	r19, r1
    12ca:	2c f4       	brge	.+10     	; 0x12d6 <DIO_U8SetPinDirection+0x14a>
    12cc:	8d 81       	ldd	r24, Y+5	; 0x05
    12ce:	9e 81       	ldd	r25, Y+6	; 0x06
    12d0:	00 97       	sbiw	r24, 0x00	; 0
    12d2:	61 f0       	breq	.+24     	; 0x12ec <DIO_U8SetPinDirection+0x160>
    12d4:	5b c0       	rjmp	.+182    	; 0x138c <DIO_U8SetPinDirection+0x200>
    12d6:	2d 81       	ldd	r18, Y+5	; 0x05
    12d8:	3e 81       	ldd	r19, Y+6	; 0x06
    12da:	22 30       	cpi	r18, 0x02	; 2
    12dc:	31 05       	cpc	r19, r1
    12de:	71 f1       	breq	.+92     	; 0x133c <DIO_U8SetPinDirection+0x1b0>
    12e0:	8d 81       	ldd	r24, Y+5	; 0x05
    12e2:	9e 81       	ldd	r25, Y+6	; 0x06
    12e4:	83 30       	cpi	r24, 0x03	; 3
    12e6:	91 05       	cpc	r25, r1
    12e8:	e9 f1       	breq	.+122    	; 0x1364 <DIO_U8SetPinDirection+0x1d8>
    12ea:	50 c0       	rjmp	.+160    	; 0x138c <DIO_U8SetPinDirection+0x200>
			{
			case DIO_PORTA : SET_BIT(DDRA,copy_PinNum); break ;
    12ec:	aa e3       	ldi	r26, 0x3A	; 58
    12ee:	b0 e0       	ldi	r27, 0x00	; 0
    12f0:	ea e3       	ldi	r30, 0x3A	; 58
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	80 81       	ld	r24, Z
    12f6:	48 2f       	mov	r20, r24
    12f8:	8b 81       	ldd	r24, Y+3	; 0x03
    12fa:	28 2f       	mov	r18, r24
    12fc:	30 e0       	ldi	r19, 0x00	; 0
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	02 2e       	mov	r0, r18
    1304:	02 c0       	rjmp	.+4      	; 0x130a <DIO_U8SetPinDirection+0x17e>
    1306:	88 0f       	add	r24, r24
    1308:	99 1f       	adc	r25, r25
    130a:	0a 94       	dec	r0
    130c:	e2 f7       	brpl	.-8      	; 0x1306 <DIO_U8SetPinDirection+0x17a>
    130e:	84 2b       	or	r24, r20
    1310:	8c 93       	st	X, r24
    1312:	44 c0       	rjmp	.+136    	; 0x139c <DIO_U8SetPinDirection+0x210>
			case DIO_PORTB : SET_BIT(DDRB,copy_PinNum); break ;
    1314:	a7 e3       	ldi	r26, 0x37	; 55
    1316:	b0 e0       	ldi	r27, 0x00	; 0
    1318:	e7 e3       	ldi	r30, 0x37	; 55
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	80 81       	ld	r24, Z
    131e:	48 2f       	mov	r20, r24
    1320:	8b 81       	ldd	r24, Y+3	; 0x03
    1322:	28 2f       	mov	r18, r24
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	81 e0       	ldi	r24, 0x01	; 1
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	02 2e       	mov	r0, r18
    132c:	02 c0       	rjmp	.+4      	; 0x1332 <DIO_U8SetPinDirection+0x1a6>
    132e:	88 0f       	add	r24, r24
    1330:	99 1f       	adc	r25, r25
    1332:	0a 94       	dec	r0
    1334:	e2 f7       	brpl	.-8      	; 0x132e <DIO_U8SetPinDirection+0x1a2>
    1336:	84 2b       	or	r24, r20
    1338:	8c 93       	st	X, r24
    133a:	30 c0       	rjmp	.+96     	; 0x139c <DIO_U8SetPinDirection+0x210>
			case DIO_PORTC : SET_BIT(DDRC,copy_PinNum); break ;
    133c:	a4 e3       	ldi	r26, 0x34	; 52
    133e:	b0 e0       	ldi	r27, 0x00	; 0
    1340:	e4 e3       	ldi	r30, 0x34	; 52
    1342:	f0 e0       	ldi	r31, 0x00	; 0
    1344:	80 81       	ld	r24, Z
    1346:	48 2f       	mov	r20, r24
    1348:	8b 81       	ldd	r24, Y+3	; 0x03
    134a:	28 2f       	mov	r18, r24
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	81 e0       	ldi	r24, 0x01	; 1
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	02 2e       	mov	r0, r18
    1354:	02 c0       	rjmp	.+4      	; 0x135a <DIO_U8SetPinDirection+0x1ce>
    1356:	88 0f       	add	r24, r24
    1358:	99 1f       	adc	r25, r25
    135a:	0a 94       	dec	r0
    135c:	e2 f7       	brpl	.-8      	; 0x1356 <DIO_U8SetPinDirection+0x1ca>
    135e:	84 2b       	or	r24, r20
    1360:	8c 93       	st	X, r24
    1362:	1c c0       	rjmp	.+56     	; 0x139c <DIO_U8SetPinDirection+0x210>
			case DIO_PORTD : SET_BIT(DDRD,copy_PinNum); break ;
    1364:	a1 e3       	ldi	r26, 0x31	; 49
    1366:	b0 e0       	ldi	r27, 0x00	; 0
    1368:	e1 e3       	ldi	r30, 0x31	; 49
    136a:	f0 e0       	ldi	r31, 0x00	; 0
    136c:	80 81       	ld	r24, Z
    136e:	48 2f       	mov	r20, r24
    1370:	8b 81       	ldd	r24, Y+3	; 0x03
    1372:	28 2f       	mov	r18, r24
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	81 e0       	ldi	r24, 0x01	; 1
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	02 2e       	mov	r0, r18
    137c:	02 c0       	rjmp	.+4      	; 0x1382 <DIO_U8SetPinDirection+0x1f6>
    137e:	88 0f       	add	r24, r24
    1380:	99 1f       	adc	r25, r25
    1382:	0a 94       	dec	r0
    1384:	e2 f7       	brpl	.-8      	; 0x137e <DIO_U8SetPinDirection+0x1f2>
    1386:	84 2b       	or	r24, r20
    1388:	8c 93       	st	X, r24
    138a:	08 c0       	rjmp	.+16     	; 0x139c <DIO_U8SetPinDirection+0x210>
			default : Local_u8ErrorState = NOK ; break ;
    138c:	81 e0       	ldi	r24, 0x01	; 1
    138e:	89 83       	std	Y+1, r24	; 0x01
    1390:	05 c0       	rjmp	.+10     	; 0x139c <DIO_U8SetPinDirection+0x210>
			}
		}
		else
		{
			Local_u8ErrorState = NOK ;
    1392:	81 e0       	ldi	r24, 0x01	; 1
    1394:	89 83       	std	Y+1, r24	; 0x01
    1396:	02 c0       	rjmp	.+4      	; 0x139c <DIO_U8SetPinDirection+0x210>
		}
	}
	else
	{
		Local_u8ErrorState = NOK ;
    1398:	81 e0       	ldi	r24, 0x01	; 1
    139a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    139c:	89 81       	ldd	r24, Y+1	; 0x01
}
    139e:	28 96       	adiw	r28, 0x08	; 8
    13a0:	0f b6       	in	r0, 0x3f	; 63
    13a2:	f8 94       	cli
    13a4:	de bf       	out	0x3e, r29	; 62
    13a6:	0f be       	out	0x3f, r0	; 63
    13a8:	cd bf       	out	0x3d, r28	; 61
    13aa:	cf 91       	pop	r28
    13ac:	df 91       	pop	r29
    13ae:	08 95       	ret

000013b0 <DIO_U8SetPortDirection>:
uint8 DIO_U8SetPortDirection	(DIO_Port_t copy_Port,	 uint8 copy_u8PortDir)
{
    13b0:	df 93       	push	r29
    13b2:	cf 93       	push	r28
    13b4:	00 d0       	rcall	.+0      	; 0x13b6 <DIO_U8SetPortDirection+0x6>
    13b6:	00 d0       	rcall	.+0      	; 0x13b8 <DIO_U8SetPortDirection+0x8>
    13b8:	0f 92       	push	r0
    13ba:	cd b7       	in	r28, 0x3d	; 61
    13bc:	de b7       	in	r29, 0x3e	; 62
    13be:	8a 83       	std	Y+2, r24	; 0x02
    13c0:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK ;
    13c2:	19 82       	std	Y+1, r1	; 0x01
	switch (copy_Port)
    13c4:	8a 81       	ldd	r24, Y+2	; 0x02
    13c6:	28 2f       	mov	r18, r24
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	3d 83       	std	Y+5, r19	; 0x05
    13cc:	2c 83       	std	Y+4, r18	; 0x04
    13ce:	8c 81       	ldd	r24, Y+4	; 0x04
    13d0:	9d 81       	ldd	r25, Y+5	; 0x05
    13d2:	81 30       	cpi	r24, 0x01	; 1
    13d4:	91 05       	cpc	r25, r1
    13d6:	d1 f0       	breq	.+52     	; 0x140c <DIO_U8SetPortDirection+0x5c>
    13d8:	2c 81       	ldd	r18, Y+4	; 0x04
    13da:	3d 81       	ldd	r19, Y+5	; 0x05
    13dc:	22 30       	cpi	r18, 0x02	; 2
    13de:	31 05       	cpc	r19, r1
    13e0:	2c f4       	brge	.+10     	; 0x13ec <DIO_U8SetPortDirection+0x3c>
    13e2:	8c 81       	ldd	r24, Y+4	; 0x04
    13e4:	9d 81       	ldd	r25, Y+5	; 0x05
    13e6:	00 97       	sbiw	r24, 0x00	; 0
    13e8:	61 f0       	breq	.+24     	; 0x1402 <DIO_U8SetPortDirection+0x52>
    13ea:	1f c0       	rjmp	.+62     	; 0x142a <DIO_U8SetPortDirection+0x7a>
    13ec:	2c 81       	ldd	r18, Y+4	; 0x04
    13ee:	3d 81       	ldd	r19, Y+5	; 0x05
    13f0:	22 30       	cpi	r18, 0x02	; 2
    13f2:	31 05       	cpc	r19, r1
    13f4:	81 f0       	breq	.+32     	; 0x1416 <DIO_U8SetPortDirection+0x66>
    13f6:	8c 81       	ldd	r24, Y+4	; 0x04
    13f8:	9d 81       	ldd	r25, Y+5	; 0x05
    13fa:	83 30       	cpi	r24, 0x03	; 3
    13fc:	91 05       	cpc	r25, r1
    13fe:	81 f0       	breq	.+32     	; 0x1420 <DIO_U8SetPortDirection+0x70>
    1400:	14 c0       	rjmp	.+40     	; 0x142a <DIO_U8SetPortDirection+0x7a>
	{
	case DIO_PORTA : DDRA = copy_u8PortDir ; break ;
    1402:	ea e3       	ldi	r30, 0x3A	; 58
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	8b 81       	ldd	r24, Y+3	; 0x03
    1408:	80 83       	st	Z, r24
    140a:	11 c0       	rjmp	.+34     	; 0x142e <DIO_U8SetPortDirection+0x7e>
	case DIO_PORTB : DDRB = copy_u8PortDir ; break ;
    140c:	e7 e3       	ldi	r30, 0x37	; 55
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	8b 81       	ldd	r24, Y+3	; 0x03
    1412:	80 83       	st	Z, r24
    1414:	0c c0       	rjmp	.+24     	; 0x142e <DIO_U8SetPortDirection+0x7e>
	case DIO_PORTC : DDRC = copy_u8PortDir ; break ;
    1416:	e4 e3       	ldi	r30, 0x34	; 52
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	8b 81       	ldd	r24, Y+3	; 0x03
    141c:	80 83       	st	Z, r24
    141e:	07 c0       	rjmp	.+14     	; 0x142e <DIO_U8SetPortDirection+0x7e>
	case DIO_PORTD : DDRD = copy_u8PortDir ; break ;
    1420:	e1 e3       	ldi	r30, 0x31	; 49
    1422:	f0 e0       	ldi	r31, 0x00	; 0
    1424:	8b 81       	ldd	r24, Y+3	; 0x03
    1426:	80 83       	st	Z, r24
    1428:	02 c0       	rjmp	.+4      	; 0x142e <DIO_U8SetPortDirection+0x7e>
	default : Local_u8ErrorState = NOK     ; break ;
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    142e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1430:	0f 90       	pop	r0
    1432:	0f 90       	pop	r0
    1434:	0f 90       	pop	r0
    1436:	0f 90       	pop	r0
    1438:	0f 90       	pop	r0
    143a:	cf 91       	pop	r28
    143c:	df 91       	pop	r29
    143e:	08 95       	ret

00001440 <DIO_U8SetPinValue>:

uint8 DIO_U8SetPinValue	        (DIO_Port_t copy_Port,	 DIO_Pin_t copy_PinNum,		DIO_PinVal_t copy_Val)
{
    1440:	df 93       	push	r29
    1442:	cf 93       	push	r28
    1444:	cd b7       	in	r28, 0x3d	; 61
    1446:	de b7       	in	r29, 0x3e	; 62
    1448:	28 97       	sbiw	r28, 0x08	; 8
    144a:	0f b6       	in	r0, 0x3f	; 63
    144c:	f8 94       	cli
    144e:	de bf       	out	0x3e, r29	; 62
    1450:	0f be       	out	0x3f, r0	; 63
    1452:	cd bf       	out	0x3d, r28	; 61
    1454:	8a 83       	std	Y+2, r24	; 0x02
    1456:	6b 83       	std	Y+3, r22	; 0x03
    1458:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK ;
    145a:	19 82       	std	Y+1, r1	; 0x01
	if ( (copy_PinNum >= DIO_PIN0) && (copy_PinNum <= DIO_PIN7) )
    145c:	8b 81       	ldd	r24, Y+3	; 0x03
    145e:	88 30       	cpi	r24, 0x08	; 8
    1460:	08 f0       	brcs	.+2      	; 0x1464 <DIO_U8SetPinValue+0x24>
    1462:	f4 c0       	rjmp	.+488    	; 0x164c <DIO_U8SetPinValue+0x20c>
	{
		if (copy_Val==DIO_PIN_LOW)
    1464:	8c 81       	ldd	r24, Y+4	; 0x04
    1466:	88 23       	and	r24, r24
    1468:	09 f0       	breq	.+2      	; 0x146c <DIO_U8SetPinValue+0x2c>
    146a:	77 c0       	rjmp	.+238    	; 0x155a <DIO_U8SetPinValue+0x11a>
		{
			switch (copy_Port)
    146c:	8a 81       	ldd	r24, Y+2	; 0x02
    146e:	28 2f       	mov	r18, r24
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	38 87       	std	Y+8, r19	; 0x08
    1474:	2f 83       	std	Y+7, r18	; 0x07
    1476:	8f 81       	ldd	r24, Y+7	; 0x07
    1478:	98 85       	ldd	r25, Y+8	; 0x08
    147a:	81 30       	cpi	r24, 0x01	; 1
    147c:	91 05       	cpc	r25, r1
    147e:	59 f1       	breq	.+86     	; 0x14d6 <DIO_U8SetPinValue+0x96>
    1480:	2f 81       	ldd	r18, Y+7	; 0x07
    1482:	38 85       	ldd	r19, Y+8	; 0x08
    1484:	22 30       	cpi	r18, 0x02	; 2
    1486:	31 05       	cpc	r19, r1
    1488:	2c f4       	brge	.+10     	; 0x1494 <DIO_U8SetPinValue+0x54>
    148a:	8f 81       	ldd	r24, Y+7	; 0x07
    148c:	98 85       	ldd	r25, Y+8	; 0x08
    148e:	00 97       	sbiw	r24, 0x00	; 0
    1490:	69 f0       	breq	.+26     	; 0x14ac <DIO_U8SetPinValue+0x6c>
    1492:	60 c0       	rjmp	.+192    	; 0x1554 <DIO_U8SetPinValue+0x114>
    1494:	2f 81       	ldd	r18, Y+7	; 0x07
    1496:	38 85       	ldd	r19, Y+8	; 0x08
    1498:	22 30       	cpi	r18, 0x02	; 2
    149a:	31 05       	cpc	r19, r1
    149c:	89 f1       	breq	.+98     	; 0x1500 <DIO_U8SetPinValue+0xc0>
    149e:	8f 81       	ldd	r24, Y+7	; 0x07
    14a0:	98 85       	ldd	r25, Y+8	; 0x08
    14a2:	83 30       	cpi	r24, 0x03	; 3
    14a4:	91 05       	cpc	r25, r1
    14a6:	09 f4       	brne	.+2      	; 0x14aa <DIO_U8SetPinValue+0x6a>
    14a8:	40 c0       	rjmp	.+128    	; 0x152a <DIO_U8SetPinValue+0xea>
    14aa:	54 c0       	rjmp	.+168    	; 0x1554 <DIO_U8SetPinValue+0x114>
			{
			case DIO_PORTA : CLR_BIT(PORTA,copy_PinNum); break ;
    14ac:	ab e3       	ldi	r26, 0x3B	; 59
    14ae:	b0 e0       	ldi	r27, 0x00	; 0
    14b0:	eb e3       	ldi	r30, 0x3B	; 59
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	80 81       	ld	r24, Z
    14b6:	48 2f       	mov	r20, r24
    14b8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ba:	28 2f       	mov	r18, r24
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	81 e0       	ldi	r24, 0x01	; 1
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	02 2e       	mov	r0, r18
    14c4:	02 c0       	rjmp	.+4      	; 0x14ca <DIO_U8SetPinValue+0x8a>
    14c6:	88 0f       	add	r24, r24
    14c8:	99 1f       	adc	r25, r25
    14ca:	0a 94       	dec	r0
    14cc:	e2 f7       	brpl	.-8      	; 0x14c6 <DIO_U8SetPinValue+0x86>
    14ce:	80 95       	com	r24
    14d0:	84 23       	and	r24, r20
    14d2:	8c 93       	st	X, r24
    14d4:	bd c0       	rjmp	.+378    	; 0x1650 <DIO_U8SetPinValue+0x210>
			case DIO_PORTB : CLR_BIT(PORTB,copy_PinNum); break ;
    14d6:	a8 e3       	ldi	r26, 0x38	; 56
    14d8:	b0 e0       	ldi	r27, 0x00	; 0
    14da:	e8 e3       	ldi	r30, 0x38	; 56
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	80 81       	ld	r24, Z
    14e0:	48 2f       	mov	r20, r24
    14e2:	8b 81       	ldd	r24, Y+3	; 0x03
    14e4:	28 2f       	mov	r18, r24
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	81 e0       	ldi	r24, 0x01	; 1
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	02 2e       	mov	r0, r18
    14ee:	02 c0       	rjmp	.+4      	; 0x14f4 <DIO_U8SetPinValue+0xb4>
    14f0:	88 0f       	add	r24, r24
    14f2:	99 1f       	adc	r25, r25
    14f4:	0a 94       	dec	r0
    14f6:	e2 f7       	brpl	.-8      	; 0x14f0 <DIO_U8SetPinValue+0xb0>
    14f8:	80 95       	com	r24
    14fa:	84 23       	and	r24, r20
    14fc:	8c 93       	st	X, r24
    14fe:	a8 c0       	rjmp	.+336    	; 0x1650 <DIO_U8SetPinValue+0x210>
			case DIO_PORTC : CLR_BIT(PORTC,copy_PinNum); break ;
    1500:	a5 e3       	ldi	r26, 0x35	; 53
    1502:	b0 e0       	ldi	r27, 0x00	; 0
    1504:	e5 e3       	ldi	r30, 0x35	; 53
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	80 81       	ld	r24, Z
    150a:	48 2f       	mov	r20, r24
    150c:	8b 81       	ldd	r24, Y+3	; 0x03
    150e:	28 2f       	mov	r18, r24
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	81 e0       	ldi	r24, 0x01	; 1
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	02 2e       	mov	r0, r18
    1518:	02 c0       	rjmp	.+4      	; 0x151e <DIO_U8SetPinValue+0xde>
    151a:	88 0f       	add	r24, r24
    151c:	99 1f       	adc	r25, r25
    151e:	0a 94       	dec	r0
    1520:	e2 f7       	brpl	.-8      	; 0x151a <DIO_U8SetPinValue+0xda>
    1522:	80 95       	com	r24
    1524:	84 23       	and	r24, r20
    1526:	8c 93       	st	X, r24
    1528:	93 c0       	rjmp	.+294    	; 0x1650 <DIO_U8SetPinValue+0x210>
			case DIO_PORTD : CLR_BIT(PORTD,copy_PinNum); break ;
    152a:	a2 e3       	ldi	r26, 0x32	; 50
    152c:	b0 e0       	ldi	r27, 0x00	; 0
    152e:	e2 e3       	ldi	r30, 0x32	; 50
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	80 81       	ld	r24, Z
    1534:	48 2f       	mov	r20, r24
    1536:	8b 81       	ldd	r24, Y+3	; 0x03
    1538:	28 2f       	mov	r18, r24
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	81 e0       	ldi	r24, 0x01	; 1
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	02 2e       	mov	r0, r18
    1542:	02 c0       	rjmp	.+4      	; 0x1548 <DIO_U8SetPinValue+0x108>
    1544:	88 0f       	add	r24, r24
    1546:	99 1f       	adc	r25, r25
    1548:	0a 94       	dec	r0
    154a:	e2 f7       	brpl	.-8      	; 0x1544 <DIO_U8SetPinValue+0x104>
    154c:	80 95       	com	r24
    154e:	84 23       	and	r24, r20
    1550:	8c 93       	st	X, r24
    1552:	7e c0       	rjmp	.+252    	; 0x1650 <DIO_U8SetPinValue+0x210>
			default : Local_u8ErrorState = NOK ; break ;
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	89 83       	std	Y+1, r24	; 0x01
    1558:	7b c0       	rjmp	.+246    	; 0x1650 <DIO_U8SetPinValue+0x210>
			}
		}
		else if (copy_Val==DIO_PIN_HIGH)
    155a:	8c 81       	ldd	r24, Y+4	; 0x04
    155c:	81 30       	cpi	r24, 0x01	; 1
    155e:	09 f0       	breq	.+2      	; 0x1562 <DIO_U8SetPinValue+0x122>
    1560:	72 c0       	rjmp	.+228    	; 0x1646 <DIO_U8SetPinValue+0x206>
		{
			switch (copy_Port)
    1562:	8a 81       	ldd	r24, Y+2	; 0x02
    1564:	28 2f       	mov	r18, r24
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	3e 83       	std	Y+6, r19	; 0x06
    156a:	2d 83       	std	Y+5, r18	; 0x05
    156c:	8d 81       	ldd	r24, Y+5	; 0x05
    156e:	9e 81       	ldd	r25, Y+6	; 0x06
    1570:	81 30       	cpi	r24, 0x01	; 1
    1572:	91 05       	cpc	r25, r1
    1574:	49 f1       	breq	.+82     	; 0x15c8 <DIO_U8SetPinValue+0x188>
    1576:	2d 81       	ldd	r18, Y+5	; 0x05
    1578:	3e 81       	ldd	r19, Y+6	; 0x06
    157a:	22 30       	cpi	r18, 0x02	; 2
    157c:	31 05       	cpc	r19, r1
    157e:	2c f4       	brge	.+10     	; 0x158a <DIO_U8SetPinValue+0x14a>
    1580:	8d 81       	ldd	r24, Y+5	; 0x05
    1582:	9e 81       	ldd	r25, Y+6	; 0x06
    1584:	00 97       	sbiw	r24, 0x00	; 0
    1586:	61 f0       	breq	.+24     	; 0x15a0 <DIO_U8SetPinValue+0x160>
    1588:	5b c0       	rjmp	.+182    	; 0x1640 <DIO_U8SetPinValue+0x200>
    158a:	2d 81       	ldd	r18, Y+5	; 0x05
    158c:	3e 81       	ldd	r19, Y+6	; 0x06
    158e:	22 30       	cpi	r18, 0x02	; 2
    1590:	31 05       	cpc	r19, r1
    1592:	71 f1       	breq	.+92     	; 0x15f0 <DIO_U8SetPinValue+0x1b0>
    1594:	8d 81       	ldd	r24, Y+5	; 0x05
    1596:	9e 81       	ldd	r25, Y+6	; 0x06
    1598:	83 30       	cpi	r24, 0x03	; 3
    159a:	91 05       	cpc	r25, r1
    159c:	e9 f1       	breq	.+122    	; 0x1618 <DIO_U8SetPinValue+0x1d8>
    159e:	50 c0       	rjmp	.+160    	; 0x1640 <DIO_U8SetPinValue+0x200>
			{
			case DIO_PORTA : SET_BIT(PORTA,copy_PinNum); break ;
    15a0:	ab e3       	ldi	r26, 0x3B	; 59
    15a2:	b0 e0       	ldi	r27, 0x00	; 0
    15a4:	eb e3       	ldi	r30, 0x3B	; 59
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	80 81       	ld	r24, Z
    15aa:	48 2f       	mov	r20, r24
    15ac:	8b 81       	ldd	r24, Y+3	; 0x03
    15ae:	28 2f       	mov	r18, r24
    15b0:	30 e0       	ldi	r19, 0x00	; 0
    15b2:	81 e0       	ldi	r24, 0x01	; 1
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	02 2e       	mov	r0, r18
    15b8:	02 c0       	rjmp	.+4      	; 0x15be <DIO_U8SetPinValue+0x17e>
    15ba:	88 0f       	add	r24, r24
    15bc:	99 1f       	adc	r25, r25
    15be:	0a 94       	dec	r0
    15c0:	e2 f7       	brpl	.-8      	; 0x15ba <DIO_U8SetPinValue+0x17a>
    15c2:	84 2b       	or	r24, r20
    15c4:	8c 93       	st	X, r24
    15c6:	44 c0       	rjmp	.+136    	; 0x1650 <DIO_U8SetPinValue+0x210>
			case DIO_PORTB : SET_BIT(PORTB,copy_PinNum); break ;
    15c8:	a8 e3       	ldi	r26, 0x38	; 56
    15ca:	b0 e0       	ldi	r27, 0x00	; 0
    15cc:	e8 e3       	ldi	r30, 0x38	; 56
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	80 81       	ld	r24, Z
    15d2:	48 2f       	mov	r20, r24
    15d4:	8b 81       	ldd	r24, Y+3	; 0x03
    15d6:	28 2f       	mov	r18, r24
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	81 e0       	ldi	r24, 0x01	; 1
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	02 2e       	mov	r0, r18
    15e0:	02 c0       	rjmp	.+4      	; 0x15e6 <DIO_U8SetPinValue+0x1a6>
    15e2:	88 0f       	add	r24, r24
    15e4:	99 1f       	adc	r25, r25
    15e6:	0a 94       	dec	r0
    15e8:	e2 f7       	brpl	.-8      	; 0x15e2 <DIO_U8SetPinValue+0x1a2>
    15ea:	84 2b       	or	r24, r20
    15ec:	8c 93       	st	X, r24
    15ee:	30 c0       	rjmp	.+96     	; 0x1650 <DIO_U8SetPinValue+0x210>
			case DIO_PORTC : SET_BIT(PORTC,copy_PinNum); break ;
    15f0:	a5 e3       	ldi	r26, 0x35	; 53
    15f2:	b0 e0       	ldi	r27, 0x00	; 0
    15f4:	e5 e3       	ldi	r30, 0x35	; 53
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	80 81       	ld	r24, Z
    15fa:	48 2f       	mov	r20, r24
    15fc:	8b 81       	ldd	r24, Y+3	; 0x03
    15fe:	28 2f       	mov	r18, r24
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	81 e0       	ldi	r24, 0x01	; 1
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	02 2e       	mov	r0, r18
    1608:	02 c0       	rjmp	.+4      	; 0x160e <DIO_U8SetPinValue+0x1ce>
    160a:	88 0f       	add	r24, r24
    160c:	99 1f       	adc	r25, r25
    160e:	0a 94       	dec	r0
    1610:	e2 f7       	brpl	.-8      	; 0x160a <DIO_U8SetPinValue+0x1ca>
    1612:	84 2b       	or	r24, r20
    1614:	8c 93       	st	X, r24
    1616:	1c c0       	rjmp	.+56     	; 0x1650 <DIO_U8SetPinValue+0x210>
			case DIO_PORTD : SET_BIT(PORTD,copy_PinNum); break ;
    1618:	a2 e3       	ldi	r26, 0x32	; 50
    161a:	b0 e0       	ldi	r27, 0x00	; 0
    161c:	e2 e3       	ldi	r30, 0x32	; 50
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	80 81       	ld	r24, Z
    1622:	48 2f       	mov	r20, r24
    1624:	8b 81       	ldd	r24, Y+3	; 0x03
    1626:	28 2f       	mov	r18, r24
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	81 e0       	ldi	r24, 0x01	; 1
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	02 2e       	mov	r0, r18
    1630:	02 c0       	rjmp	.+4      	; 0x1636 <DIO_U8SetPinValue+0x1f6>
    1632:	88 0f       	add	r24, r24
    1634:	99 1f       	adc	r25, r25
    1636:	0a 94       	dec	r0
    1638:	e2 f7       	brpl	.-8      	; 0x1632 <DIO_U8SetPinValue+0x1f2>
    163a:	84 2b       	or	r24, r20
    163c:	8c 93       	st	X, r24
    163e:	08 c0       	rjmp	.+16     	; 0x1650 <DIO_U8SetPinValue+0x210>
			default : Local_u8ErrorState = NOK ; break ;
    1640:	81 e0       	ldi	r24, 0x01	; 1
    1642:	89 83       	std	Y+1, r24	; 0x01
    1644:	05 c0       	rjmp	.+10     	; 0x1650 <DIO_U8SetPinValue+0x210>
			}
		}
		else
		{
			Local_u8ErrorState = NOK ;
    1646:	81 e0       	ldi	r24, 0x01	; 1
    1648:	89 83       	std	Y+1, r24	; 0x01
    164a:	02 c0       	rjmp	.+4      	; 0x1650 <DIO_U8SetPinValue+0x210>
		}
	}
	else
	{
		Local_u8ErrorState = NOK ;
    164c:	81 e0       	ldi	r24, 0x01	; 1
    164e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1650:	89 81       	ldd	r24, Y+1	; 0x01
}
    1652:	28 96       	adiw	r28, 0x08	; 8
    1654:	0f b6       	in	r0, 0x3f	; 63
    1656:	f8 94       	cli
    1658:	de bf       	out	0x3e, r29	; 62
    165a:	0f be       	out	0x3f, r0	; 63
    165c:	cd bf       	out	0x3d, r28	; 61
    165e:	cf 91       	pop	r28
    1660:	df 91       	pop	r29
    1662:	08 95       	ret

00001664 <DIO_U8SetPortValue>:
uint8 DIO_U8SetPortValue    	(DIO_Port_t copy_Port,	 uint8 copy_u8PortVal)
{
    1664:	df 93       	push	r29
    1666:	cf 93       	push	r28
    1668:	00 d0       	rcall	.+0      	; 0x166a <DIO_U8SetPortValue+0x6>
    166a:	00 d0       	rcall	.+0      	; 0x166c <DIO_U8SetPortValue+0x8>
    166c:	0f 92       	push	r0
    166e:	cd b7       	in	r28, 0x3d	; 61
    1670:	de b7       	in	r29, 0x3e	; 62
    1672:	8a 83       	std	Y+2, r24	; 0x02
    1674:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK ;
    1676:	19 82       	std	Y+1, r1	; 0x01
	switch (copy_Port)
    1678:	8a 81       	ldd	r24, Y+2	; 0x02
    167a:	28 2f       	mov	r18, r24
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	3d 83       	std	Y+5, r19	; 0x05
    1680:	2c 83       	std	Y+4, r18	; 0x04
    1682:	8c 81       	ldd	r24, Y+4	; 0x04
    1684:	9d 81       	ldd	r25, Y+5	; 0x05
    1686:	81 30       	cpi	r24, 0x01	; 1
    1688:	91 05       	cpc	r25, r1
    168a:	d1 f0       	breq	.+52     	; 0x16c0 <DIO_U8SetPortValue+0x5c>
    168c:	2c 81       	ldd	r18, Y+4	; 0x04
    168e:	3d 81       	ldd	r19, Y+5	; 0x05
    1690:	22 30       	cpi	r18, 0x02	; 2
    1692:	31 05       	cpc	r19, r1
    1694:	2c f4       	brge	.+10     	; 0x16a0 <DIO_U8SetPortValue+0x3c>
    1696:	8c 81       	ldd	r24, Y+4	; 0x04
    1698:	9d 81       	ldd	r25, Y+5	; 0x05
    169a:	00 97       	sbiw	r24, 0x00	; 0
    169c:	61 f0       	breq	.+24     	; 0x16b6 <DIO_U8SetPortValue+0x52>
    169e:	1f c0       	rjmp	.+62     	; 0x16de <DIO_U8SetPortValue+0x7a>
    16a0:	2c 81       	ldd	r18, Y+4	; 0x04
    16a2:	3d 81       	ldd	r19, Y+5	; 0x05
    16a4:	22 30       	cpi	r18, 0x02	; 2
    16a6:	31 05       	cpc	r19, r1
    16a8:	81 f0       	breq	.+32     	; 0x16ca <DIO_U8SetPortValue+0x66>
    16aa:	8c 81       	ldd	r24, Y+4	; 0x04
    16ac:	9d 81       	ldd	r25, Y+5	; 0x05
    16ae:	83 30       	cpi	r24, 0x03	; 3
    16b0:	91 05       	cpc	r25, r1
    16b2:	81 f0       	breq	.+32     	; 0x16d4 <DIO_U8SetPortValue+0x70>
    16b4:	14 c0       	rjmp	.+40     	; 0x16de <DIO_U8SetPortValue+0x7a>
	{
	case DIO_PORTA : PORTA = copy_u8PortVal ; break ;
    16b6:	eb e3       	ldi	r30, 0x3B	; 59
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	8b 81       	ldd	r24, Y+3	; 0x03
    16bc:	80 83       	st	Z, r24
    16be:	11 c0       	rjmp	.+34     	; 0x16e2 <DIO_U8SetPortValue+0x7e>
	case DIO_PORTB : PORTB = copy_u8PortVal ; break ;
    16c0:	e8 e3       	ldi	r30, 0x38	; 56
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	8b 81       	ldd	r24, Y+3	; 0x03
    16c6:	80 83       	st	Z, r24
    16c8:	0c c0       	rjmp	.+24     	; 0x16e2 <DIO_U8SetPortValue+0x7e>
	case DIO_PORTC : PORTC = copy_u8PortVal ; break ;
    16ca:	e5 e3       	ldi	r30, 0x35	; 53
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	8b 81       	ldd	r24, Y+3	; 0x03
    16d0:	80 83       	st	Z, r24
    16d2:	07 c0       	rjmp	.+14     	; 0x16e2 <DIO_U8SetPortValue+0x7e>
	case DIO_PORTD : PORTD = copy_u8PortVal ; break ;
    16d4:	e2 e3       	ldi	r30, 0x32	; 50
    16d6:	f0 e0       	ldi	r31, 0x00	; 0
    16d8:	8b 81       	ldd	r24, Y+3	; 0x03
    16da:	80 83       	st	Z, r24
    16dc:	02 c0       	rjmp	.+4      	; 0x16e2 <DIO_U8SetPortValue+0x7e>
	default : Local_u8ErrorState = NOK      ; break ;
    16de:	81 e0       	ldi	r24, 0x01	; 1
    16e0:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    16e2:	89 81       	ldd	r24, Y+1	; 0x01
}
    16e4:	0f 90       	pop	r0
    16e6:	0f 90       	pop	r0
    16e8:	0f 90       	pop	r0
    16ea:	0f 90       	pop	r0
    16ec:	0f 90       	pop	r0
    16ee:	cf 91       	pop	r28
    16f0:	df 91       	pop	r29
    16f2:	08 95       	ret

000016f4 <DIO_u8GetPinValue>:

uint8 DIO_u8GetPinValue 		(DIO_Port_t copy_port,   DIO_Pin_t copy_PinNum, 	DIO_PinVal_t* copy_pVal )
{
    16f4:	df 93       	push	r29
    16f6:	cf 93       	push	r28
    16f8:	cd b7       	in	r28, 0x3d	; 61
    16fa:	de b7       	in	r29, 0x3e	; 62
    16fc:	27 97       	sbiw	r28, 0x07	; 7
    16fe:	0f b6       	in	r0, 0x3f	; 63
    1700:	f8 94       	cli
    1702:	de bf       	out	0x3e, r29	; 62
    1704:	0f be       	out	0x3f, r0	; 63
    1706:	cd bf       	out	0x3d, r28	; 61
    1708:	8a 83       	std	Y+2, r24	; 0x02
    170a:	6b 83       	std	Y+3, r22	; 0x03
    170c:	5d 83       	std	Y+5, r21	; 0x05
    170e:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK ;
    1710:	19 82       	std	Y+1, r1	; 0x01
	if (copy_pVal != NULL)
    1712:	8c 81       	ldd	r24, Y+4	; 0x04
    1714:	9d 81       	ldd	r25, Y+5	; 0x05
    1716:	00 97       	sbiw	r24, 0x00	; 0
    1718:	09 f4       	brne	.+2      	; 0x171c <DIO_u8GetPinValue+0x28>
    171a:	7b c0       	rjmp	.+246    	; 0x1812 <DIO_u8GetPinValue+0x11e>
	{
		if ( (copy_PinNum >= DIO_PIN0) && (copy_PinNum <= DIO_PIN7) )
    171c:	8b 81       	ldd	r24, Y+3	; 0x03
    171e:	88 30       	cpi	r24, 0x08	; 8
    1720:	08 f0       	brcs	.+2      	; 0x1724 <DIO_u8GetPinValue+0x30>
    1722:	74 c0       	rjmp	.+232    	; 0x180c <DIO_u8GetPinValue+0x118>
		{
			switch (copy_port)
    1724:	8a 81       	ldd	r24, Y+2	; 0x02
    1726:	28 2f       	mov	r18, r24
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	3f 83       	std	Y+7, r19	; 0x07
    172c:	2e 83       	std	Y+6, r18	; 0x06
    172e:	4e 81       	ldd	r20, Y+6	; 0x06
    1730:	5f 81       	ldd	r21, Y+7	; 0x07
    1732:	41 30       	cpi	r20, 0x01	; 1
    1734:	51 05       	cpc	r21, r1
    1736:	59 f1       	breq	.+86     	; 0x178e <DIO_u8GetPinValue+0x9a>
    1738:	8e 81       	ldd	r24, Y+6	; 0x06
    173a:	9f 81       	ldd	r25, Y+7	; 0x07
    173c:	82 30       	cpi	r24, 0x02	; 2
    173e:	91 05       	cpc	r25, r1
    1740:	34 f4       	brge	.+12     	; 0x174e <DIO_u8GetPinValue+0x5a>
    1742:	2e 81       	ldd	r18, Y+6	; 0x06
    1744:	3f 81       	ldd	r19, Y+7	; 0x07
    1746:	21 15       	cp	r18, r1
    1748:	31 05       	cpc	r19, r1
    174a:	69 f0       	breq	.+26     	; 0x1766 <DIO_u8GetPinValue+0x72>
    174c:	5c c0       	rjmp	.+184    	; 0x1806 <DIO_u8GetPinValue+0x112>
    174e:	4e 81       	ldd	r20, Y+6	; 0x06
    1750:	5f 81       	ldd	r21, Y+7	; 0x07
    1752:	42 30       	cpi	r20, 0x02	; 2
    1754:	51 05       	cpc	r21, r1
    1756:	79 f1       	breq	.+94     	; 0x17b6 <DIO_u8GetPinValue+0xc2>
    1758:	8e 81       	ldd	r24, Y+6	; 0x06
    175a:	9f 81       	ldd	r25, Y+7	; 0x07
    175c:	83 30       	cpi	r24, 0x03	; 3
    175e:	91 05       	cpc	r25, r1
    1760:	09 f4       	brne	.+2      	; 0x1764 <DIO_u8GetPinValue+0x70>
    1762:	3d c0       	rjmp	.+122    	; 0x17de <DIO_u8GetPinValue+0xea>
    1764:	50 c0       	rjmp	.+160    	; 0x1806 <DIO_u8GetPinValue+0x112>
			{
			case DIO_PORTA : *copy_pVal = GET_BIT(PINA , copy_PinNum) ; break ;
    1766:	e9 e3       	ldi	r30, 0x39	; 57
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	80 81       	ld	r24, Z
    176c:	28 2f       	mov	r18, r24
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	8b 81       	ldd	r24, Y+3	; 0x03
    1772:	88 2f       	mov	r24, r24
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	a9 01       	movw	r20, r18
    1778:	02 c0       	rjmp	.+4      	; 0x177e <DIO_u8GetPinValue+0x8a>
    177a:	55 95       	asr	r21
    177c:	47 95       	ror	r20
    177e:	8a 95       	dec	r24
    1780:	e2 f7       	brpl	.-8      	; 0x177a <DIO_u8GetPinValue+0x86>
    1782:	ca 01       	movw	r24, r20
    1784:	81 70       	andi	r24, 0x01	; 1
    1786:	ec 81       	ldd	r30, Y+4	; 0x04
    1788:	fd 81       	ldd	r31, Y+5	; 0x05
    178a:	80 83       	st	Z, r24
    178c:	44 c0       	rjmp	.+136    	; 0x1816 <DIO_u8GetPinValue+0x122>
			case DIO_PORTB : *copy_pVal = GET_BIT(PINB , copy_PinNum) ; break ;
    178e:	e6 e3       	ldi	r30, 0x36	; 54
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	80 81       	ld	r24, Z
    1794:	28 2f       	mov	r18, r24
    1796:	30 e0       	ldi	r19, 0x00	; 0
    1798:	8b 81       	ldd	r24, Y+3	; 0x03
    179a:	88 2f       	mov	r24, r24
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	a9 01       	movw	r20, r18
    17a0:	02 c0       	rjmp	.+4      	; 0x17a6 <DIO_u8GetPinValue+0xb2>
    17a2:	55 95       	asr	r21
    17a4:	47 95       	ror	r20
    17a6:	8a 95       	dec	r24
    17a8:	e2 f7       	brpl	.-8      	; 0x17a2 <DIO_u8GetPinValue+0xae>
    17aa:	ca 01       	movw	r24, r20
    17ac:	81 70       	andi	r24, 0x01	; 1
    17ae:	ec 81       	ldd	r30, Y+4	; 0x04
    17b0:	fd 81       	ldd	r31, Y+5	; 0x05
    17b2:	80 83       	st	Z, r24
    17b4:	30 c0       	rjmp	.+96     	; 0x1816 <DIO_u8GetPinValue+0x122>
			case DIO_PORTC : *copy_pVal = GET_BIT(PINC , copy_PinNum) ; break ;
    17b6:	e3 e3       	ldi	r30, 0x33	; 51
    17b8:	f0 e0       	ldi	r31, 0x00	; 0
    17ba:	80 81       	ld	r24, Z
    17bc:	28 2f       	mov	r18, r24
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	8b 81       	ldd	r24, Y+3	; 0x03
    17c2:	88 2f       	mov	r24, r24
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	a9 01       	movw	r20, r18
    17c8:	02 c0       	rjmp	.+4      	; 0x17ce <DIO_u8GetPinValue+0xda>
    17ca:	55 95       	asr	r21
    17cc:	47 95       	ror	r20
    17ce:	8a 95       	dec	r24
    17d0:	e2 f7       	brpl	.-8      	; 0x17ca <DIO_u8GetPinValue+0xd6>
    17d2:	ca 01       	movw	r24, r20
    17d4:	81 70       	andi	r24, 0x01	; 1
    17d6:	ec 81       	ldd	r30, Y+4	; 0x04
    17d8:	fd 81       	ldd	r31, Y+5	; 0x05
    17da:	80 83       	st	Z, r24
    17dc:	1c c0       	rjmp	.+56     	; 0x1816 <DIO_u8GetPinValue+0x122>
			case DIO_PORTD : *copy_pVal = GET_BIT(PIND , copy_PinNum) ; break ;
    17de:	e0 e3       	ldi	r30, 0x30	; 48
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	80 81       	ld	r24, Z
    17e4:	28 2f       	mov	r18, r24
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ea:	88 2f       	mov	r24, r24
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	a9 01       	movw	r20, r18
    17f0:	02 c0       	rjmp	.+4      	; 0x17f6 <DIO_u8GetPinValue+0x102>
    17f2:	55 95       	asr	r21
    17f4:	47 95       	ror	r20
    17f6:	8a 95       	dec	r24
    17f8:	e2 f7       	brpl	.-8      	; 0x17f2 <DIO_u8GetPinValue+0xfe>
    17fa:	ca 01       	movw	r24, r20
    17fc:	81 70       	andi	r24, 0x01	; 1
    17fe:	ec 81       	ldd	r30, Y+4	; 0x04
    1800:	fd 81       	ldd	r31, Y+5	; 0x05
    1802:	80 83       	st	Z, r24
    1804:	08 c0       	rjmp	.+16     	; 0x1816 <DIO_u8GetPinValue+0x122>
			default : Local_u8ErrorState = NOK ; break ;
    1806:	81 e0       	ldi	r24, 0x01	; 1
    1808:	89 83       	std	Y+1, r24	; 0x01
    180a:	05 c0       	rjmp	.+10     	; 0x1816 <DIO_u8GetPinValue+0x122>
			}
		}
		else
		{
			Local_u8ErrorState = NOK ;
    180c:	81 e0       	ldi	r24, 0x01	; 1
    180e:	89 83       	std	Y+1, r24	; 0x01
    1810:	02 c0       	rjmp	.+4      	; 0x1816 <DIO_u8GetPinValue+0x122>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR ;
    1812:	82 e0       	ldi	r24, 0x02	; 2
    1814:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1816:	89 81       	ldd	r24, Y+1	; 0x01
}
    1818:	27 96       	adiw	r28, 0x07	; 7
    181a:	0f b6       	in	r0, 0x3f	; 63
    181c:	f8 94       	cli
    181e:	de bf       	out	0x3e, r29	; 62
    1820:	0f be       	out	0x3f, r0	; 63
    1822:	cd bf       	out	0x3d, r28	; 61
    1824:	cf 91       	pop	r28
    1826:	df 91       	pop	r29
    1828:	08 95       	ret

0000182a <PORT_voidInit>:
#include "PORT_Prv.h"
#include "PORT_Reg.h"
#include "PORT_Interface.h"

	void PORT_voidInit ( void ) 
	{
    182a:	df 93       	push	r29
    182c:	cf 93       	push	r28
    182e:	cd b7       	in	r28, 0x3d	; 61
    1830:	de b7       	in	r29, 0x3e	; 62
		DDRA  = PORTA_DIR     ; 
    1832:	ea e3       	ldi	r30, 0x3A	; 58
    1834:	f0 e0       	ldi	r31, 0x00	; 0
    1836:	8c e0       	ldi	r24, 0x0C	; 12
    1838:	80 83       	st	Z, r24
		DDRB  = PORTB_DIR     ;
    183a:	e7 e3       	ldi	r30, 0x37	; 55
    183c:	f0 e0       	ldi	r31, 0x00	; 0
    183e:	87 e1       	ldi	r24, 0x17	; 23
    1840:	80 83       	st	Z, r24
		DDRC  = PORTC_DIR     ;
    1842:	e4 e3       	ldi	r30, 0x34	; 52
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	8f e0       	ldi	r24, 0x0F	; 15
    1848:	80 83       	st	Z, r24
		DDRD  = PORTD_DIR     ;
    184a:	e1 e3       	ldi	r30, 0x31	; 49
    184c:	f0 e0       	ldi	r31, 0x00	; 0
    184e:	10 82       	st	Z, r1
		
		PORTA = PORTA_INITVAL ; 
    1850:	eb e3       	ldi	r30, 0x3B	; 59
    1852:	f0 e0       	ldi	r31, 0x00	; 0
    1854:	10 82       	st	Z, r1
		PORTB = PORTB_INITVAL ; 
    1856:	e8 e3       	ldi	r30, 0x38	; 56
    1858:	f0 e0       	ldi	r31, 0x00	; 0
    185a:	10 82       	st	Z, r1
		PORTC = PORTC_INITVAL ; 
    185c:	e5 e3       	ldi	r30, 0x35	; 53
    185e:	f0 e0       	ldi	r31, 0x00	; 0
    1860:	10 82       	st	Z, r1
		PORTD = PORTD_INITVAL ; 
    1862:	e2 e3       	ldi	r30, 0x32	; 50
    1864:	f0 e0       	ldi	r31, 0x00	; 0
    1866:	10 82       	st	Z, r1
    1868:	cf 91       	pop	r28
    186a:	df 91       	pop	r29
    186c:	08 95       	ret

0000186e <main>:
   0 } ;



void main ()
{
    186e:	df 93       	push	r29
    1870:	cf 93       	push	r28
    1872:	cd b7       	in	r28, 0x3d	; 61
    1874:	de b7       	in	r29, 0x3e	; 62
	PORT_voidInit() ;
    1876:	0e 94 15 0c 	call	0x182a	; 0x182a <PORT_voidInit>

	DIO_U8SetPortDirection(DIO_PORTA,0xff);  					// PORTA IS OUTPUT
    187a:	80 e0       	ldi	r24, 0x00	; 0
    187c:	6f ef       	ldi	r22, 0xFF	; 255
    187e:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <DIO_U8SetPortDirection>
	CLCD_voidInit();
    1882:	0e 94 90 06 	call	0xd20	; 0xd20 <CLCD_voidInit>

	while (1)
	{

		Introduction();
    1886:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <Introduction>

		Run();
    188a:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <Run>

		PlayGame();
    188e:	0e 94 4e 0c 	call	0x189c	; 0x189c <PlayGame>

		Dance() ;
    1892:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <Dance>

		Death();
    1896:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <Death>
    189a:	f5 cf       	rjmp	.-22     	; 0x1886 <main+0x18>

0000189c <PlayGame>:

	}
}
void PlayGame ( void )
{
    189c:	df 93       	push	r29
    189e:	cf 93       	push	r28
    18a0:	cd b7       	in	r28, 0x3d	; 61
    18a2:	de b7       	in	r29, 0x3e	; 62
    18a4:	ab 97       	sbiw	r28, 0x2b	; 43
    18a6:	0f b6       	in	r0, 0x3f	; 63
    18a8:	f8 94       	cli
    18aa:	de bf       	out	0x3e, r29	; 62
    18ac:	0f be       	out	0x3f, r0	; 63
    18ae:	cd bf       	out	0x3d, r28	; 61
	for (uint8 i = 0 ; i < 8 ; i++)
    18b0:	1b a6       	std	Y+43, r1	; 0x2b
    18b2:	35 c1       	rjmp	.+618    	; 0x1b1e <PlayGame+0x282>
	{
		CLCD_voidSendCommand( 1 ) ;
    18b4:	81 e0       	ldi	r24, 0x01	; 1
    18b6:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <CLCD_voidSendCommand>
		voidSendString("I Can Play ");
    18ba:	80 e6       	ldi	r24, 0x60	; 96
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	0e 94 2a 07 	call	0xe54	; 0xe54 <voidSendString>
		CLCD_voidGoToXY(0u,1u);
    18c2:	80 e0       	ldi	r24, 0x00	; 0
    18c4:	61 e0       	ldi	r22, 0x01	; 1
    18c6:	0e 94 57 08 	call	0x10ae	; 0x10ae <CLCD_voidGoToXY>
		voidSendString( "Football");
    18ca:	8c e6       	ldi	r24, 0x6C	; 108
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	0e 94 2a 07 	call	0xe54	; 0xe54 <voidSendString>
		CLCD_u8WriteSpecialCharacter( 6u , Local_u8Pattern6Arr, 18u , 1u );
    18d2:	2f e0       	ldi	r18, 0x0F	; 15
    18d4:	31 e0       	ldi	r19, 0x01	; 1
    18d6:	86 e0       	ldi	r24, 0x06	; 6
    18d8:	b9 01       	movw	r22, r18
    18da:	42 e1       	ldi	r20, 0x12	; 18
    18dc:	21 e0       	ldi	r18, 0x01	; 1
    18de:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <CLCD_u8WriteSpecialCharacter>
		CLCD_u8WriteSpecialCharacter( 0u , Local_u8Pattern15Arr, 19u , 0u );
    18e2:	2f e4       	ldi	r18, 0x4F	; 79
    18e4:	31 e0       	ldi	r19, 0x01	; 1
    18e6:	80 e0       	ldi	r24, 0x00	; 0
    18e8:	b9 01       	movw	r22, r18
    18ea:	43 e1       	ldi	r20, 0x13	; 19
    18ec:	20 e0       	ldi	r18, 0x00	; 0
    18ee:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <CLCD_u8WriteSpecialCharacter>
		CLCD_u8WriteSpecialCharacter( 1u , Local_u8Pattern16Arr, 19u , 1u );
    18f2:	27 e5       	ldi	r18, 0x57	; 87
    18f4:	31 e0       	ldi	r19, 0x01	; 1
    18f6:	81 e0       	ldi	r24, 0x01	; 1
    18f8:	b9 01       	movw	r22, r18
    18fa:	43 e1       	ldi	r20, 0x13	; 19
    18fc:	21 e0       	ldi	r18, 0x01	; 1
    18fe:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <CLCD_u8WriteSpecialCharacter>
    1902:	80 e0       	ldi	r24, 0x00	; 0
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	aa e7       	ldi	r26, 0x7A	; 122
    1908:	b3 e4       	ldi	r27, 0x43	; 67
    190a:	8f a3       	std	Y+39, r24	; 0x27
    190c:	98 a7       	std	Y+40, r25	; 0x28
    190e:	a9 a7       	std	Y+41, r26	; 0x29
    1910:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1912:	6f a1       	ldd	r22, Y+39	; 0x27
    1914:	78 a5       	ldd	r23, Y+40	; 0x28
    1916:	89 a5       	ldd	r24, Y+41	; 0x29
    1918:	9a a5       	ldd	r25, Y+42	; 0x2a
    191a:	20 e0       	ldi	r18, 0x00	; 0
    191c:	30 e0       	ldi	r19, 0x00	; 0
    191e:	4a e7       	ldi	r20, 0x7A	; 122
    1920:	55 e4       	ldi	r21, 0x45	; 69
    1922:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1926:	dc 01       	movw	r26, r24
    1928:	cb 01       	movw	r24, r22
    192a:	8b a3       	std	Y+35, r24	; 0x23
    192c:	9c a3       	std	Y+36, r25	; 0x24
    192e:	ad a3       	std	Y+37, r26	; 0x25
    1930:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1932:	6b a1       	ldd	r22, Y+35	; 0x23
    1934:	7c a1       	ldd	r23, Y+36	; 0x24
    1936:	8d a1       	ldd	r24, Y+37	; 0x25
    1938:	9e a1       	ldd	r25, Y+38	; 0x26
    193a:	20 e0       	ldi	r18, 0x00	; 0
    193c:	30 e0       	ldi	r19, 0x00	; 0
    193e:	40 e8       	ldi	r20, 0x80	; 128
    1940:	5f e3       	ldi	r21, 0x3F	; 63
    1942:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1946:	88 23       	and	r24, r24
    1948:	2c f4       	brge	.+10     	; 0x1954 <PlayGame+0xb8>
		__ticks = 1;
    194a:	81 e0       	ldi	r24, 0x01	; 1
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	9a a3       	std	Y+34, r25	; 0x22
    1950:	89 a3       	std	Y+33, r24	; 0x21
    1952:	3f c0       	rjmp	.+126    	; 0x19d2 <PlayGame+0x136>
	else if (__tmp > 65535)
    1954:	6b a1       	ldd	r22, Y+35	; 0x23
    1956:	7c a1       	ldd	r23, Y+36	; 0x24
    1958:	8d a1       	ldd	r24, Y+37	; 0x25
    195a:	9e a1       	ldd	r25, Y+38	; 0x26
    195c:	20 e0       	ldi	r18, 0x00	; 0
    195e:	3f ef       	ldi	r19, 0xFF	; 255
    1960:	4f e7       	ldi	r20, 0x7F	; 127
    1962:	57 e4       	ldi	r21, 0x47	; 71
    1964:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1968:	18 16       	cp	r1, r24
    196a:	4c f5       	brge	.+82     	; 0x19be <PlayGame+0x122>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    196c:	6f a1       	ldd	r22, Y+39	; 0x27
    196e:	78 a5       	ldd	r23, Y+40	; 0x28
    1970:	89 a5       	ldd	r24, Y+41	; 0x29
    1972:	9a a5       	ldd	r25, Y+42	; 0x2a
    1974:	20 e0       	ldi	r18, 0x00	; 0
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	40 e2       	ldi	r20, 0x20	; 32
    197a:	51 e4       	ldi	r21, 0x41	; 65
    197c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1980:	dc 01       	movw	r26, r24
    1982:	cb 01       	movw	r24, r22
    1984:	bc 01       	movw	r22, r24
    1986:	cd 01       	movw	r24, r26
    1988:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    198c:	dc 01       	movw	r26, r24
    198e:	cb 01       	movw	r24, r22
    1990:	9a a3       	std	Y+34, r25	; 0x22
    1992:	89 a3       	std	Y+33, r24	; 0x21
    1994:	0f c0       	rjmp	.+30     	; 0x19b4 <PlayGame+0x118>
    1996:	80 e9       	ldi	r24, 0x90	; 144
    1998:	91 e0       	ldi	r25, 0x01	; 1
    199a:	98 a3       	std	Y+32, r25	; 0x20
    199c:	8f 8f       	std	Y+31, r24	; 0x1f
    199e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    19a0:	98 a1       	ldd	r25, Y+32	; 0x20
    19a2:	01 97       	sbiw	r24, 0x01	; 1
    19a4:	f1 f7       	brne	.-4      	; 0x19a2 <PlayGame+0x106>
    19a6:	98 a3       	std	Y+32, r25	; 0x20
    19a8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19aa:	89 a1       	ldd	r24, Y+33	; 0x21
    19ac:	9a a1       	ldd	r25, Y+34	; 0x22
    19ae:	01 97       	sbiw	r24, 0x01	; 1
    19b0:	9a a3       	std	Y+34, r25	; 0x22
    19b2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19b4:	89 a1       	ldd	r24, Y+33	; 0x21
    19b6:	9a a1       	ldd	r25, Y+34	; 0x22
    19b8:	00 97       	sbiw	r24, 0x00	; 0
    19ba:	69 f7       	brne	.-38     	; 0x1996 <PlayGame+0xfa>
    19bc:	14 c0       	rjmp	.+40     	; 0x19e6 <PlayGame+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19be:	6b a1       	ldd	r22, Y+35	; 0x23
    19c0:	7c a1       	ldd	r23, Y+36	; 0x24
    19c2:	8d a1       	ldd	r24, Y+37	; 0x25
    19c4:	9e a1       	ldd	r25, Y+38	; 0x26
    19c6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19ca:	dc 01       	movw	r26, r24
    19cc:	cb 01       	movw	r24, r22
    19ce:	9a a3       	std	Y+34, r25	; 0x22
    19d0:	89 a3       	std	Y+33, r24	; 0x21
    19d2:	89 a1       	ldd	r24, Y+33	; 0x21
    19d4:	9a a1       	ldd	r25, Y+34	; 0x22
    19d6:	9e 8f       	std	Y+30, r25	; 0x1e
    19d8:	8d 8f       	std	Y+29, r24	; 0x1d
    19da:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19dc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    19de:	01 97       	sbiw	r24, 0x01	; 1
    19e0:	f1 f7       	brne	.-4      	; 0x19de <PlayGame+0x142>
    19e2:	9e 8f       	std	Y+30, r25	; 0x1e
    19e4:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(250);
		CLCD_voidSendCommand( 1 ) ;
    19e6:	81 e0       	ldi	r24, 0x01	; 1
    19e8:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <CLCD_voidSendCommand>
		voidSendString( "I Can Play");
    19ec:	85 e7       	ldi	r24, 0x75	; 117
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	0e 94 2a 07 	call	0xe54	; 0xe54 <voidSendString>
		CLCD_voidGoToXY(0u,1u);
    19f4:	80 e0       	ldi	r24, 0x00	; 0
    19f6:	61 e0       	ldi	r22, 0x01	; 1
    19f8:	0e 94 57 08 	call	0x10ae	; 0x10ae <CLCD_voidGoToXY>
		voidSendString( "Football");
    19fc:	8c e6       	ldi	r24, 0x6C	; 108
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	0e 94 2a 07 	call	0xe54	; 0xe54 <voidSendString>
		CLCD_u8WriteSpecialCharacter( 6u , Local_u8Pattern6Arr, 18u , 0u );
    1a04:	2f e0       	ldi	r18, 0x0F	; 15
    1a06:	31 e0       	ldi	r19, 0x01	; 1
    1a08:	86 e0       	ldi	r24, 0x06	; 6
    1a0a:	b9 01       	movw	r22, r18
    1a0c:	42 e1       	ldi	r20, 0x12	; 18
    1a0e:	20 e0       	ldi	r18, 0x00	; 0
    1a10:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <CLCD_u8WriteSpecialCharacter>
		CLCD_u8WriteSpecialCharacter( 0u , Local_u8Pattern15Arr, 19u , 0u );
    1a14:	2f e4       	ldi	r18, 0x4F	; 79
    1a16:	31 e0       	ldi	r19, 0x01	; 1
    1a18:	80 e0       	ldi	r24, 0x00	; 0
    1a1a:	b9 01       	movw	r22, r18
    1a1c:	43 e1       	ldi	r20, 0x13	; 19
    1a1e:	20 e0       	ldi	r18, 0x00	; 0
    1a20:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <CLCD_u8WriteSpecialCharacter>
		CLCD_u8WriteSpecialCharacter( 1u , Local_u8Pattern16Arr, 19u , 1u );
    1a24:	27 e5       	ldi	r18, 0x57	; 87
    1a26:	31 e0       	ldi	r19, 0x01	; 1
    1a28:	81 e0       	ldi	r24, 0x01	; 1
    1a2a:	b9 01       	movw	r22, r18
    1a2c:	43 e1       	ldi	r20, 0x13	; 19
    1a2e:	21 e0       	ldi	r18, 0x01	; 1
    1a30:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <CLCD_u8WriteSpecialCharacter>
    1a34:	80 e0       	ldi	r24, 0x00	; 0
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	aa e7       	ldi	r26, 0x7A	; 122
    1a3a:	b3 e4       	ldi	r27, 0x43	; 67
    1a3c:	89 8f       	std	Y+25, r24	; 0x19
    1a3e:	9a 8f       	std	Y+26, r25	; 0x1a
    1a40:	ab 8f       	std	Y+27, r26	; 0x1b
    1a42:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a44:	69 8d       	ldd	r22, Y+25	; 0x19
    1a46:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a48:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a4a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a4c:	20 e0       	ldi	r18, 0x00	; 0
    1a4e:	30 e0       	ldi	r19, 0x00	; 0
    1a50:	4a e7       	ldi	r20, 0x7A	; 122
    1a52:	55 e4       	ldi	r21, 0x45	; 69
    1a54:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a58:	dc 01       	movw	r26, r24
    1a5a:	cb 01       	movw	r24, r22
    1a5c:	8d 8b       	std	Y+21, r24	; 0x15
    1a5e:	9e 8b       	std	Y+22, r25	; 0x16
    1a60:	af 8b       	std	Y+23, r26	; 0x17
    1a62:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a64:	6d 89       	ldd	r22, Y+21	; 0x15
    1a66:	7e 89       	ldd	r23, Y+22	; 0x16
    1a68:	8f 89       	ldd	r24, Y+23	; 0x17
    1a6a:	98 8d       	ldd	r25, Y+24	; 0x18
    1a6c:	20 e0       	ldi	r18, 0x00	; 0
    1a6e:	30 e0       	ldi	r19, 0x00	; 0
    1a70:	40 e8       	ldi	r20, 0x80	; 128
    1a72:	5f e3       	ldi	r21, 0x3F	; 63
    1a74:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a78:	88 23       	and	r24, r24
    1a7a:	2c f4       	brge	.+10     	; 0x1a86 <PlayGame+0x1ea>
		__ticks = 1;
    1a7c:	81 e0       	ldi	r24, 0x01	; 1
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	9c 8b       	std	Y+20, r25	; 0x14
    1a82:	8b 8b       	std	Y+19, r24	; 0x13
    1a84:	3f c0       	rjmp	.+126    	; 0x1b04 <PlayGame+0x268>
	else if (__tmp > 65535)
    1a86:	6d 89       	ldd	r22, Y+21	; 0x15
    1a88:	7e 89       	ldd	r23, Y+22	; 0x16
    1a8a:	8f 89       	ldd	r24, Y+23	; 0x17
    1a8c:	98 8d       	ldd	r25, Y+24	; 0x18
    1a8e:	20 e0       	ldi	r18, 0x00	; 0
    1a90:	3f ef       	ldi	r19, 0xFF	; 255
    1a92:	4f e7       	ldi	r20, 0x7F	; 127
    1a94:	57 e4       	ldi	r21, 0x47	; 71
    1a96:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a9a:	18 16       	cp	r1, r24
    1a9c:	4c f5       	brge	.+82     	; 0x1af0 <PlayGame+0x254>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a9e:	69 8d       	ldd	r22, Y+25	; 0x19
    1aa0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1aa2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1aa4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1aa6:	20 e0       	ldi	r18, 0x00	; 0
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	40 e2       	ldi	r20, 0x20	; 32
    1aac:	51 e4       	ldi	r21, 0x41	; 65
    1aae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ab2:	dc 01       	movw	r26, r24
    1ab4:	cb 01       	movw	r24, r22
    1ab6:	bc 01       	movw	r22, r24
    1ab8:	cd 01       	movw	r24, r26
    1aba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1abe:	dc 01       	movw	r26, r24
    1ac0:	cb 01       	movw	r24, r22
    1ac2:	9c 8b       	std	Y+20, r25	; 0x14
    1ac4:	8b 8b       	std	Y+19, r24	; 0x13
    1ac6:	0f c0       	rjmp	.+30     	; 0x1ae6 <PlayGame+0x24a>
    1ac8:	80 e9       	ldi	r24, 0x90	; 144
    1aca:	91 e0       	ldi	r25, 0x01	; 1
    1acc:	9a 8b       	std	Y+18, r25	; 0x12
    1ace:	89 8b       	std	Y+17, r24	; 0x11
    1ad0:	89 89       	ldd	r24, Y+17	; 0x11
    1ad2:	9a 89       	ldd	r25, Y+18	; 0x12
    1ad4:	01 97       	sbiw	r24, 0x01	; 1
    1ad6:	f1 f7       	brne	.-4      	; 0x1ad4 <PlayGame+0x238>
    1ad8:	9a 8b       	std	Y+18, r25	; 0x12
    1ada:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1adc:	8b 89       	ldd	r24, Y+19	; 0x13
    1ade:	9c 89       	ldd	r25, Y+20	; 0x14
    1ae0:	01 97       	sbiw	r24, 0x01	; 1
    1ae2:	9c 8b       	std	Y+20, r25	; 0x14
    1ae4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ae6:	8b 89       	ldd	r24, Y+19	; 0x13
    1ae8:	9c 89       	ldd	r25, Y+20	; 0x14
    1aea:	00 97       	sbiw	r24, 0x00	; 0
    1aec:	69 f7       	brne	.-38     	; 0x1ac8 <PlayGame+0x22c>
    1aee:	14 c0       	rjmp	.+40     	; 0x1b18 <PlayGame+0x27c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1af0:	6d 89       	ldd	r22, Y+21	; 0x15
    1af2:	7e 89       	ldd	r23, Y+22	; 0x16
    1af4:	8f 89       	ldd	r24, Y+23	; 0x17
    1af6:	98 8d       	ldd	r25, Y+24	; 0x18
    1af8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1afc:	dc 01       	movw	r26, r24
    1afe:	cb 01       	movw	r24, r22
    1b00:	9c 8b       	std	Y+20, r25	; 0x14
    1b02:	8b 8b       	std	Y+19, r24	; 0x13
    1b04:	8b 89       	ldd	r24, Y+19	; 0x13
    1b06:	9c 89       	ldd	r25, Y+20	; 0x14
    1b08:	98 8b       	std	Y+16, r25	; 0x10
    1b0a:	8f 87       	std	Y+15, r24	; 0x0f
    1b0c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b0e:	98 89       	ldd	r25, Y+16	; 0x10
    1b10:	01 97       	sbiw	r24, 0x01	; 1
    1b12:	f1 f7       	brne	.-4      	; 0x1b10 <PlayGame+0x274>
    1b14:	98 8b       	std	Y+16, r25	; 0x10
    1b16:	8f 87       	std	Y+15, r24	; 0x0f

	}
}
void PlayGame ( void )
{
	for (uint8 i = 0 ; i < 8 ; i++)
    1b18:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b1a:	8f 5f       	subi	r24, 0xFF	; 255
    1b1c:	8b a7       	std	Y+43, r24	; 0x2b
    1b1e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b20:	88 30       	cpi	r24, 0x08	; 8
    1b22:	08 f4       	brcc	.+2      	; 0x1b26 <PlayGame+0x28a>
    1b24:	c7 ce       	rjmp	.-626    	; 0x18b4 <PlayGame+0x18>
    1b26:	80 e0       	ldi	r24, 0x00	; 0
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	a0 e5       	ldi	r26, 0x50	; 80
    1b2c:	b1 e4       	ldi	r27, 0x41	; 65
    1b2e:	8b 87       	std	Y+11, r24	; 0x0b
    1b30:	9c 87       	std	Y+12, r25	; 0x0c
    1b32:	ad 87       	std	Y+13, r26	; 0x0d
    1b34:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b36:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b38:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b3e:	20 e0       	ldi	r18, 0x00	; 0
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	4a e7       	ldi	r20, 0x7A	; 122
    1b44:	55 e4       	ldi	r21, 0x45	; 69
    1b46:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b4a:	dc 01       	movw	r26, r24
    1b4c:	cb 01       	movw	r24, r22
    1b4e:	8f 83       	std	Y+7, r24	; 0x07
    1b50:	98 87       	std	Y+8, r25	; 0x08
    1b52:	a9 87       	std	Y+9, r26	; 0x09
    1b54:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b56:	6f 81       	ldd	r22, Y+7	; 0x07
    1b58:	78 85       	ldd	r23, Y+8	; 0x08
    1b5a:	89 85       	ldd	r24, Y+9	; 0x09
    1b5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b5e:	20 e0       	ldi	r18, 0x00	; 0
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	40 e8       	ldi	r20, 0x80	; 128
    1b64:	5f e3       	ldi	r21, 0x3F	; 63
    1b66:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b6a:	88 23       	and	r24, r24
    1b6c:	2c f4       	brge	.+10     	; 0x1b78 <PlayGame+0x2dc>
		__ticks = 1;
    1b6e:	81 e0       	ldi	r24, 0x01	; 1
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	9e 83       	std	Y+6, r25	; 0x06
    1b74:	8d 83       	std	Y+5, r24	; 0x05
    1b76:	3f c0       	rjmp	.+126    	; 0x1bf6 <PlayGame+0x35a>
	else if (__tmp > 65535)
    1b78:	6f 81       	ldd	r22, Y+7	; 0x07
    1b7a:	78 85       	ldd	r23, Y+8	; 0x08
    1b7c:	89 85       	ldd	r24, Y+9	; 0x09
    1b7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b80:	20 e0       	ldi	r18, 0x00	; 0
    1b82:	3f ef       	ldi	r19, 0xFF	; 255
    1b84:	4f e7       	ldi	r20, 0x7F	; 127
    1b86:	57 e4       	ldi	r21, 0x47	; 71
    1b88:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b8c:	18 16       	cp	r1, r24
    1b8e:	4c f5       	brge	.+82     	; 0x1be2 <PlayGame+0x346>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b90:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b92:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b94:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b96:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b98:	20 e0       	ldi	r18, 0x00	; 0
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	40 e2       	ldi	r20, 0x20	; 32
    1b9e:	51 e4       	ldi	r21, 0x41	; 65
    1ba0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ba4:	dc 01       	movw	r26, r24
    1ba6:	cb 01       	movw	r24, r22
    1ba8:	bc 01       	movw	r22, r24
    1baa:	cd 01       	movw	r24, r26
    1bac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bb0:	dc 01       	movw	r26, r24
    1bb2:	cb 01       	movw	r24, r22
    1bb4:	9e 83       	std	Y+6, r25	; 0x06
    1bb6:	8d 83       	std	Y+5, r24	; 0x05
    1bb8:	0f c0       	rjmp	.+30     	; 0x1bd8 <PlayGame+0x33c>
    1bba:	80 e9       	ldi	r24, 0x90	; 144
    1bbc:	91 e0       	ldi	r25, 0x01	; 1
    1bbe:	9c 83       	std	Y+4, r25	; 0x04
    1bc0:	8b 83       	std	Y+3, r24	; 0x03
    1bc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc4:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc6:	01 97       	sbiw	r24, 0x01	; 1
    1bc8:	f1 f7       	brne	.-4      	; 0x1bc6 <PlayGame+0x32a>
    1bca:	9c 83       	std	Y+4, r25	; 0x04
    1bcc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bce:	8d 81       	ldd	r24, Y+5	; 0x05
    1bd0:	9e 81       	ldd	r25, Y+6	; 0x06
    1bd2:	01 97       	sbiw	r24, 0x01	; 1
    1bd4:	9e 83       	std	Y+6, r25	; 0x06
    1bd6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bd8:	8d 81       	ldd	r24, Y+5	; 0x05
    1bda:	9e 81       	ldd	r25, Y+6	; 0x06
    1bdc:	00 97       	sbiw	r24, 0x00	; 0
    1bde:	69 f7       	brne	.-38     	; 0x1bba <PlayGame+0x31e>
    1be0:	14 c0       	rjmp	.+40     	; 0x1c0a <PlayGame+0x36e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1be2:	6f 81       	ldd	r22, Y+7	; 0x07
    1be4:	78 85       	ldd	r23, Y+8	; 0x08
    1be6:	89 85       	ldd	r24, Y+9	; 0x09
    1be8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bee:	dc 01       	movw	r26, r24
    1bf0:	cb 01       	movw	r24, r22
    1bf2:	9e 83       	std	Y+6, r25	; 0x06
    1bf4:	8d 83       	std	Y+5, r24	; 0x05
    1bf6:	8d 81       	ldd	r24, Y+5	; 0x05
    1bf8:	9e 81       	ldd	r25, Y+6	; 0x06
    1bfa:	9a 83       	std	Y+2, r25	; 0x02
    1bfc:	89 83       	std	Y+1, r24	; 0x01
    1bfe:	89 81       	ldd	r24, Y+1	; 0x01
    1c00:	9a 81       	ldd	r25, Y+2	; 0x02
    1c02:	01 97       	sbiw	r24, 0x01	; 1
    1c04:	f1 f7       	brne	.-4      	; 0x1c02 <PlayGame+0x366>
    1c06:	9a 83       	std	Y+2, r25	; 0x02
    1c08:	89 83       	std	Y+1, r24	; 0x01
		CLCD_u8WriteSpecialCharacter( 0u , Local_u8Pattern15Arr, 19u , 0u );
		CLCD_u8WriteSpecialCharacter( 1u , Local_u8Pattern16Arr, 19u , 1u );
		_delay_ms(250);
	}
	_delay_ms(13);
	CLCD_voidSendCommand( 1 ) ;
    1c0a:	81 e0       	ldi	r24, 0x01	; 1
    1c0c:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <CLCD_voidSendCommand>
}
    1c10:	ab 96       	adiw	r28, 0x2b	; 43
    1c12:	0f b6       	in	r0, 0x3f	; 63
    1c14:	f8 94       	cli
    1c16:	de bf       	out	0x3e, r29	; 62
    1c18:	0f be       	out	0x3f, r0	; 63
    1c1a:	cd bf       	out	0x3d, r28	; 61
    1c1c:	cf 91       	pop	r28
    1c1e:	df 91       	pop	r29
    1c20:	08 95       	ret

00001c22 <Introduction>:
void Introduction ( void )
{
    1c22:	df 93       	push	r29
    1c24:	cf 93       	push	r28
    1c26:	cd b7       	in	r28, 0x3d	; 61
    1c28:	de b7       	in	r29, 0x3e	; 62
    1c2a:	2e 97       	sbiw	r28, 0x0e	; 14
    1c2c:	0f b6       	in	r0, 0x3f	; 63
    1c2e:	f8 94       	cli
    1c30:	de bf       	out	0x3e, r29	; 62
    1c32:	0f be       	out	0x3f, r0	; 63
    1c34:	cd bf       	out	0x3d, r28	; 61
	voidSendString("Hi I am Hamoksha");
    1c36:	80 e8       	ldi	r24, 0x80	; 128
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	0e 94 2a 07 	call	0xe54	; 0xe54 <voidSendString>
	CLCD_u8WriteSpecialCharacter( 0u , Local_u8Pattern0Arr, 7u , 1u );
    1c3e:	2f ee       	ldi	r18, 0xEF	; 239
    1c40:	30 e0       	ldi	r19, 0x00	; 0
    1c42:	80 e0       	ldi	r24, 0x00	; 0
    1c44:	b9 01       	movw	r22, r18
    1c46:	47 e0       	ldi	r20, 0x07	; 7
    1c48:	21 e0       	ldi	r18, 0x01	; 1
    1c4a:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <CLCD_u8WriteSpecialCharacter>
    1c4e:	80 e0       	ldi	r24, 0x00	; 0
    1c50:	90 e8       	ldi	r25, 0x80	; 128
    1c52:	ab e3       	ldi	r26, 0x3B	; 59
    1c54:	b5 e4       	ldi	r27, 0x45	; 69
    1c56:	8b 87       	std	Y+11, r24	; 0x0b
    1c58:	9c 87       	std	Y+12, r25	; 0x0c
    1c5a:	ad 87       	std	Y+13, r26	; 0x0d
    1c5c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c5e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c60:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c62:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c64:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c66:	20 e0       	ldi	r18, 0x00	; 0
    1c68:	30 e0       	ldi	r19, 0x00	; 0
    1c6a:	4a e7       	ldi	r20, 0x7A	; 122
    1c6c:	55 e4       	ldi	r21, 0x45	; 69
    1c6e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c72:	dc 01       	movw	r26, r24
    1c74:	cb 01       	movw	r24, r22
    1c76:	8f 83       	std	Y+7, r24	; 0x07
    1c78:	98 87       	std	Y+8, r25	; 0x08
    1c7a:	a9 87       	std	Y+9, r26	; 0x09
    1c7c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c7e:	6f 81       	ldd	r22, Y+7	; 0x07
    1c80:	78 85       	ldd	r23, Y+8	; 0x08
    1c82:	89 85       	ldd	r24, Y+9	; 0x09
    1c84:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c86:	20 e0       	ldi	r18, 0x00	; 0
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	40 e8       	ldi	r20, 0x80	; 128
    1c8c:	5f e3       	ldi	r21, 0x3F	; 63
    1c8e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c92:	88 23       	and	r24, r24
    1c94:	2c f4       	brge	.+10     	; 0x1ca0 <Introduction+0x7e>
		__ticks = 1;
    1c96:	81 e0       	ldi	r24, 0x01	; 1
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	9e 83       	std	Y+6, r25	; 0x06
    1c9c:	8d 83       	std	Y+5, r24	; 0x05
    1c9e:	3f c0       	rjmp	.+126    	; 0x1d1e <Introduction+0xfc>
	else if (__tmp > 65535)
    1ca0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ca2:	78 85       	ldd	r23, Y+8	; 0x08
    1ca4:	89 85       	ldd	r24, Y+9	; 0x09
    1ca6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ca8:	20 e0       	ldi	r18, 0x00	; 0
    1caa:	3f ef       	ldi	r19, 0xFF	; 255
    1cac:	4f e7       	ldi	r20, 0x7F	; 127
    1cae:	57 e4       	ldi	r21, 0x47	; 71
    1cb0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1cb4:	18 16       	cp	r1, r24
    1cb6:	4c f5       	brge	.+82     	; 0x1d0a <Introduction+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cb8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cba:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cbc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cbe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cc0:	20 e0       	ldi	r18, 0x00	; 0
    1cc2:	30 e0       	ldi	r19, 0x00	; 0
    1cc4:	40 e2       	ldi	r20, 0x20	; 32
    1cc6:	51 e4       	ldi	r21, 0x41	; 65
    1cc8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ccc:	dc 01       	movw	r26, r24
    1cce:	cb 01       	movw	r24, r22
    1cd0:	bc 01       	movw	r22, r24
    1cd2:	cd 01       	movw	r24, r26
    1cd4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cd8:	dc 01       	movw	r26, r24
    1cda:	cb 01       	movw	r24, r22
    1cdc:	9e 83       	std	Y+6, r25	; 0x06
    1cde:	8d 83       	std	Y+5, r24	; 0x05
    1ce0:	0f c0       	rjmp	.+30     	; 0x1d00 <Introduction+0xde>
    1ce2:	80 e9       	ldi	r24, 0x90	; 144
    1ce4:	91 e0       	ldi	r25, 0x01	; 1
    1ce6:	9c 83       	std	Y+4, r25	; 0x04
    1ce8:	8b 83       	std	Y+3, r24	; 0x03
    1cea:	8b 81       	ldd	r24, Y+3	; 0x03
    1cec:	9c 81       	ldd	r25, Y+4	; 0x04
    1cee:	01 97       	sbiw	r24, 0x01	; 1
    1cf0:	f1 f7       	brne	.-4      	; 0x1cee <Introduction+0xcc>
    1cf2:	9c 83       	std	Y+4, r25	; 0x04
    1cf4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cf6:	8d 81       	ldd	r24, Y+5	; 0x05
    1cf8:	9e 81       	ldd	r25, Y+6	; 0x06
    1cfa:	01 97       	sbiw	r24, 0x01	; 1
    1cfc:	9e 83       	std	Y+6, r25	; 0x06
    1cfe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d00:	8d 81       	ldd	r24, Y+5	; 0x05
    1d02:	9e 81       	ldd	r25, Y+6	; 0x06
    1d04:	00 97       	sbiw	r24, 0x00	; 0
    1d06:	69 f7       	brne	.-38     	; 0x1ce2 <Introduction+0xc0>
    1d08:	14 c0       	rjmp	.+40     	; 0x1d32 <Introduction+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d0a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d0c:	78 85       	ldd	r23, Y+8	; 0x08
    1d0e:	89 85       	ldd	r24, Y+9	; 0x09
    1d10:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d12:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d16:	dc 01       	movw	r26, r24
    1d18:	cb 01       	movw	r24, r22
    1d1a:	9e 83       	std	Y+6, r25	; 0x06
    1d1c:	8d 83       	std	Y+5, r24	; 0x05
    1d1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d20:	9e 81       	ldd	r25, Y+6	; 0x06
    1d22:	9a 83       	std	Y+2, r25	; 0x02
    1d24:	89 83       	std	Y+1, r24	; 0x01
    1d26:	89 81       	ldd	r24, Y+1	; 0x01
    1d28:	9a 81       	ldd	r25, Y+2	; 0x02
    1d2a:	01 97       	sbiw	r24, 0x01	; 1
    1d2c:	f1 f7       	brne	.-4      	; 0x1d2a <Introduction+0x108>
    1d2e:	9a 83       	std	Y+2, r25	; 0x02
    1d30:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(3000);
	CLCD_voidSendCommand( 1 ) ;
    1d32:	81 e0       	ldi	r24, 0x01	; 1
    1d34:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <CLCD_voidSendCommand>
}
    1d38:	2e 96       	adiw	r28, 0x0e	; 14
    1d3a:	0f b6       	in	r0, 0x3f	; 63
    1d3c:	f8 94       	cli
    1d3e:	de bf       	out	0x3e, r29	; 62
    1d40:	0f be       	out	0x3f, r0	; 63
    1d42:	cd bf       	out	0x3d, r28	; 61
    1d44:	cf 91       	pop	r28
    1d46:	df 91       	pop	r29
    1d48:	08 95       	ret

00001d4a <Death>:
void Death ( void )
{
    1d4a:	df 93       	push	r29
    1d4c:	cf 93       	push	r28
    1d4e:	cd b7       	in	r28, 0x3d	; 61
    1d50:	de b7       	in	r29, 0x3e	; 62
    1d52:	6d 97       	sbiw	r28, 0x1d	; 29
    1d54:	0f b6       	in	r0, 0x3f	; 63
    1d56:	f8 94       	cli
    1d58:	de bf       	out	0x3e, r29	; 62
    1d5a:	0f be       	out	0x3f, r0	; 63
    1d5c:	cd bf       	out	0x3d, r28	; 61
	uint8 XPos = 1u ;
    1d5e:	81 e0       	ldi	r24, 0x01	; 1
    1d60:	8d 8f       	std	Y+29, r24	; 0x1d
	CLCD_voidSendCommand( 1 ) ;
    1d62:	81 e0       	ldi	r24, 0x01	; 1
    1d64:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <CLCD_voidSendCommand>
    1d68:	94 c0       	rjmp	.+296    	; 0x1e92 <Death+0x148>
	while (XPos != 19)
	{
		voidSendString("Do Not Kill Me !!");
    1d6a:	81 e9       	ldi	r24, 0x91	; 145
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	0e 94 2a 07 	call	0xe54	; 0xe54 <voidSendString>
		CLCD_u8WriteSpecialCharacter( 0u , Local_u8Pattern0Arr, 19u , 1u );
    1d72:	2f ee       	ldi	r18, 0xEF	; 239
    1d74:	30 e0       	ldi	r19, 0x00	; 0
    1d76:	80 e0       	ldi	r24, 0x00	; 0
    1d78:	b9 01       	movw	r22, r18
    1d7a:	43 e1       	ldi	r20, 0x13	; 19
    1d7c:	21 e0       	ldi	r18, 0x01	; 1
    1d7e:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <CLCD_u8WriteSpecialCharacter>
		CLCD_u8WriteSpecialCharacter( 7u , Local_u8Pattern7Arr, 0u , 1u );
    1d82:	27 e1       	ldi	r18, 0x17	; 23
    1d84:	31 e0       	ldi	r19, 0x01	; 1
    1d86:	87 e0       	ldi	r24, 0x07	; 7
    1d88:	b9 01       	movw	r22, r18
    1d8a:	40 e0       	ldi	r20, 0x00	; 0
    1d8c:	21 e0       	ldi	r18, 0x01	; 1
    1d8e:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <CLCD_u8WriteSpecialCharacter>

		CLCD_u8WriteSpecialCharacter( 1u , Local_u8Pattern8Arr, XPos , 1u );
    1d92:	2f e1       	ldi	r18, 0x1F	; 31
    1d94:	31 e0       	ldi	r19, 0x01	; 1
    1d96:	81 e0       	ldi	r24, 0x01	; 1
    1d98:	b9 01       	movw	r22, r18
    1d9a:	4d 8d       	ldd	r20, Y+29	; 0x1d
    1d9c:	21 e0       	ldi	r18, 0x01	; 1
    1d9e:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <CLCD_u8WriteSpecialCharacter>
    1da2:	80 e0       	ldi	r24, 0x00	; 0
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	a8 ec       	ldi	r26, 0xC8	; 200
    1da8:	b2 e4       	ldi	r27, 0x42	; 66
    1daa:	89 8f       	std	Y+25, r24	; 0x19
    1dac:	9a 8f       	std	Y+26, r25	; 0x1a
    1dae:	ab 8f       	std	Y+27, r26	; 0x1b
    1db0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1db2:	69 8d       	ldd	r22, Y+25	; 0x19
    1db4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1db6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1db8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dba:	20 e0       	ldi	r18, 0x00	; 0
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	4a e7       	ldi	r20, 0x7A	; 122
    1dc0:	55 e4       	ldi	r21, 0x45	; 69
    1dc2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dc6:	dc 01       	movw	r26, r24
    1dc8:	cb 01       	movw	r24, r22
    1dca:	8d 8b       	std	Y+21, r24	; 0x15
    1dcc:	9e 8b       	std	Y+22, r25	; 0x16
    1dce:	af 8b       	std	Y+23, r26	; 0x17
    1dd0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1dd2:	6d 89       	ldd	r22, Y+21	; 0x15
    1dd4:	7e 89       	ldd	r23, Y+22	; 0x16
    1dd6:	8f 89       	ldd	r24, Y+23	; 0x17
    1dd8:	98 8d       	ldd	r25, Y+24	; 0x18
    1dda:	20 e0       	ldi	r18, 0x00	; 0
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	40 e8       	ldi	r20, 0x80	; 128
    1de0:	5f e3       	ldi	r21, 0x3F	; 63
    1de2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1de6:	88 23       	and	r24, r24
    1de8:	2c f4       	brge	.+10     	; 0x1df4 <Death+0xaa>
		__ticks = 1;
    1dea:	81 e0       	ldi	r24, 0x01	; 1
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	9c 8b       	std	Y+20, r25	; 0x14
    1df0:	8b 8b       	std	Y+19, r24	; 0x13
    1df2:	3f c0       	rjmp	.+126    	; 0x1e72 <Death+0x128>
	else if (__tmp > 65535)
    1df4:	6d 89       	ldd	r22, Y+21	; 0x15
    1df6:	7e 89       	ldd	r23, Y+22	; 0x16
    1df8:	8f 89       	ldd	r24, Y+23	; 0x17
    1dfa:	98 8d       	ldd	r25, Y+24	; 0x18
    1dfc:	20 e0       	ldi	r18, 0x00	; 0
    1dfe:	3f ef       	ldi	r19, 0xFF	; 255
    1e00:	4f e7       	ldi	r20, 0x7F	; 127
    1e02:	57 e4       	ldi	r21, 0x47	; 71
    1e04:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e08:	18 16       	cp	r1, r24
    1e0a:	4c f5       	brge	.+82     	; 0x1e5e <Death+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e0c:	69 8d       	ldd	r22, Y+25	; 0x19
    1e0e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e10:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e12:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e14:	20 e0       	ldi	r18, 0x00	; 0
    1e16:	30 e0       	ldi	r19, 0x00	; 0
    1e18:	40 e2       	ldi	r20, 0x20	; 32
    1e1a:	51 e4       	ldi	r21, 0x41	; 65
    1e1c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e20:	dc 01       	movw	r26, r24
    1e22:	cb 01       	movw	r24, r22
    1e24:	bc 01       	movw	r22, r24
    1e26:	cd 01       	movw	r24, r26
    1e28:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e2c:	dc 01       	movw	r26, r24
    1e2e:	cb 01       	movw	r24, r22
    1e30:	9c 8b       	std	Y+20, r25	; 0x14
    1e32:	8b 8b       	std	Y+19, r24	; 0x13
    1e34:	0f c0       	rjmp	.+30     	; 0x1e54 <Death+0x10a>
    1e36:	80 e9       	ldi	r24, 0x90	; 144
    1e38:	91 e0       	ldi	r25, 0x01	; 1
    1e3a:	9a 8b       	std	Y+18, r25	; 0x12
    1e3c:	89 8b       	std	Y+17, r24	; 0x11
    1e3e:	89 89       	ldd	r24, Y+17	; 0x11
    1e40:	9a 89       	ldd	r25, Y+18	; 0x12
    1e42:	01 97       	sbiw	r24, 0x01	; 1
    1e44:	f1 f7       	brne	.-4      	; 0x1e42 <Death+0xf8>
    1e46:	9a 8b       	std	Y+18, r25	; 0x12
    1e48:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e4a:	8b 89       	ldd	r24, Y+19	; 0x13
    1e4c:	9c 89       	ldd	r25, Y+20	; 0x14
    1e4e:	01 97       	sbiw	r24, 0x01	; 1
    1e50:	9c 8b       	std	Y+20, r25	; 0x14
    1e52:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e54:	8b 89       	ldd	r24, Y+19	; 0x13
    1e56:	9c 89       	ldd	r25, Y+20	; 0x14
    1e58:	00 97       	sbiw	r24, 0x00	; 0
    1e5a:	69 f7       	brne	.-38     	; 0x1e36 <Death+0xec>
    1e5c:	14 c0       	rjmp	.+40     	; 0x1e86 <Death+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e5e:	6d 89       	ldd	r22, Y+21	; 0x15
    1e60:	7e 89       	ldd	r23, Y+22	; 0x16
    1e62:	8f 89       	ldd	r24, Y+23	; 0x17
    1e64:	98 8d       	ldd	r25, Y+24	; 0x18
    1e66:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e6a:	dc 01       	movw	r26, r24
    1e6c:	cb 01       	movw	r24, r22
    1e6e:	9c 8b       	std	Y+20, r25	; 0x14
    1e70:	8b 8b       	std	Y+19, r24	; 0x13
    1e72:	8b 89       	ldd	r24, Y+19	; 0x13
    1e74:	9c 89       	ldd	r25, Y+20	; 0x14
    1e76:	98 8b       	std	Y+16, r25	; 0x10
    1e78:	8f 87       	std	Y+15, r24	; 0x0f
    1e7a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e7c:	98 89       	ldd	r25, Y+16	; 0x10
    1e7e:	01 97       	sbiw	r24, 0x01	; 1
    1e80:	f1 f7       	brne	.-4      	; 0x1e7e <Death+0x134>
    1e82:	98 8b       	std	Y+16, r25	; 0x10
    1e84:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(100);
		CLCD_voidSendCommand( 1 );
    1e86:	81 e0       	ldi	r24, 0x01	; 1
    1e88:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <CLCD_voidSendCommand>
		XPos++ ;
    1e8c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e8e:	8f 5f       	subi	r24, 0xFF	; 255
    1e90:	8d 8f       	std	Y+29, r24	; 0x1d
}
void Death ( void )
{
	uint8 XPos = 1u ;
	CLCD_voidSendCommand( 1 ) ;
	while (XPos != 19)
    1e92:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e94:	83 31       	cpi	r24, 0x13	; 19
    1e96:	09 f0       	breq	.+2      	; 0x1e9a <Death+0x150>
    1e98:	68 cf       	rjmp	.-304    	; 0x1d6a <Death+0x20>
		CLCD_u8WriteSpecialCharacter( 1u , Local_u8Pattern8Arr, XPos , 1u );
		_delay_ms(100);
		CLCD_voidSendCommand( 1 );
		XPos++ ;
	}
	CLCD_voidSendCommand( 1 ) ;
    1e9a:	81 e0       	ldi	r24, 0x01	; 1
    1e9c:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <CLCD_voidSendCommand>
	voidSendString("   SWEET DEATH");
    1ea0:	83 ea       	ldi	r24, 0xA3	; 163
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	0e 94 2a 07 	call	0xe54	; 0xe54 <voidSendString>
	CLCD_u8WriteSpecialCharacter( 7u , Local_u8Pattern7Arr, 0u , 1u );
    1ea8:	27 e1       	ldi	r18, 0x17	; 23
    1eaa:	31 e0       	ldi	r19, 0x01	; 1
    1eac:	87 e0       	ldi	r24, 0x07	; 7
    1eae:	b9 01       	movw	r22, r18
    1eb0:	40 e0       	ldi	r20, 0x00	; 0
    1eb2:	21 e0       	ldi	r18, 0x01	; 1
    1eb4:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <CLCD_u8WriteSpecialCharacter>
	CLCD_u8WriteSpecialCharacter( 9u , Local_u8Pattern9Arr, 18u , 1u );
    1eb8:	2f e2       	ldi	r18, 0x2F	; 47
    1eba:	31 e0       	ldi	r19, 0x01	; 1
    1ebc:	89 e0       	ldi	r24, 0x09	; 9
    1ebe:	b9 01       	movw	r22, r18
    1ec0:	42 e1       	ldi	r20, 0x12	; 18
    1ec2:	21 e0       	ldi	r18, 0x01	; 1
    1ec4:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <CLCD_u8WriteSpecialCharacter>
	CLCD_u8WriteSpecialCharacter( 10u , Local_u8Pattern10Arr,19u , 1u );
    1ec8:	27 e3       	ldi	r18, 0x37	; 55
    1eca:	31 e0       	ldi	r19, 0x01	; 1
    1ecc:	8a e0       	ldi	r24, 0x0A	; 10
    1ece:	b9 01       	movw	r22, r18
    1ed0:	43 e1       	ldi	r20, 0x13	; 19
    1ed2:	21 e0       	ldi	r18, 0x01	; 1
    1ed4:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <CLCD_u8WriteSpecialCharacter>
	CLCD_u8WriteSpecialCharacter( 11u , Local_u8Pattern11Arr, 8u , 1u );
    1ed8:	2f e3       	ldi	r18, 0x3F	; 63
    1eda:	31 e0       	ldi	r19, 0x01	; 1
    1edc:	8b e0       	ldi	r24, 0x0B	; 11
    1ede:	b9 01       	movw	r22, r18
    1ee0:	48 e0       	ldi	r20, 0x08	; 8
    1ee2:	21 e0       	ldi	r18, 0x01	; 1
    1ee4:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <CLCD_u8WriteSpecialCharacter>
	CLCD_u8WriteSpecialCharacter( 12u , Local_u8Pattern12Arr, 7u , 1u );
    1ee8:	27 e4       	ldi	r18, 0x47	; 71
    1eea:	31 e0       	ldi	r19, 0x01	; 1
    1eec:	8c e0       	ldi	r24, 0x0C	; 12
    1eee:	b9 01       	movw	r22, r18
    1ef0:	47 e0       	ldi	r20, 0x07	; 7
    1ef2:	21 e0       	ldi	r18, 0x01	; 1
    1ef4:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <CLCD_u8WriteSpecialCharacter>
    1ef8:	80 e0       	ldi	r24, 0x00	; 0
    1efa:	90 e8       	ldi	r25, 0x80	; 128
    1efc:	ab e3       	ldi	r26, 0x3B	; 59
    1efe:	b5 e4       	ldi	r27, 0x45	; 69
    1f00:	8b 87       	std	Y+11, r24	; 0x0b
    1f02:	9c 87       	std	Y+12, r25	; 0x0c
    1f04:	ad 87       	std	Y+13, r26	; 0x0d
    1f06:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f08:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f0a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f10:	20 e0       	ldi	r18, 0x00	; 0
    1f12:	30 e0       	ldi	r19, 0x00	; 0
    1f14:	4a e7       	ldi	r20, 0x7A	; 122
    1f16:	55 e4       	ldi	r21, 0x45	; 69
    1f18:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f1c:	dc 01       	movw	r26, r24
    1f1e:	cb 01       	movw	r24, r22
    1f20:	8f 83       	std	Y+7, r24	; 0x07
    1f22:	98 87       	std	Y+8, r25	; 0x08
    1f24:	a9 87       	std	Y+9, r26	; 0x09
    1f26:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f28:	6f 81       	ldd	r22, Y+7	; 0x07
    1f2a:	78 85       	ldd	r23, Y+8	; 0x08
    1f2c:	89 85       	ldd	r24, Y+9	; 0x09
    1f2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f30:	20 e0       	ldi	r18, 0x00	; 0
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	40 e8       	ldi	r20, 0x80	; 128
    1f36:	5f e3       	ldi	r21, 0x3F	; 63
    1f38:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f3c:	88 23       	and	r24, r24
    1f3e:	2c f4       	brge	.+10     	; 0x1f4a <Death+0x200>
		__ticks = 1;
    1f40:	81 e0       	ldi	r24, 0x01	; 1
    1f42:	90 e0       	ldi	r25, 0x00	; 0
    1f44:	9e 83       	std	Y+6, r25	; 0x06
    1f46:	8d 83       	std	Y+5, r24	; 0x05
    1f48:	3f c0       	rjmp	.+126    	; 0x1fc8 <Death+0x27e>
	else if (__tmp > 65535)
    1f4a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f4c:	78 85       	ldd	r23, Y+8	; 0x08
    1f4e:	89 85       	ldd	r24, Y+9	; 0x09
    1f50:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f52:	20 e0       	ldi	r18, 0x00	; 0
    1f54:	3f ef       	ldi	r19, 0xFF	; 255
    1f56:	4f e7       	ldi	r20, 0x7F	; 127
    1f58:	57 e4       	ldi	r21, 0x47	; 71
    1f5a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1f5e:	18 16       	cp	r1, r24
    1f60:	4c f5       	brge	.+82     	; 0x1fb4 <Death+0x26a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f62:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f64:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f66:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f68:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f6a:	20 e0       	ldi	r18, 0x00	; 0
    1f6c:	30 e0       	ldi	r19, 0x00	; 0
    1f6e:	40 e2       	ldi	r20, 0x20	; 32
    1f70:	51 e4       	ldi	r21, 0x41	; 65
    1f72:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f76:	dc 01       	movw	r26, r24
    1f78:	cb 01       	movw	r24, r22
    1f7a:	bc 01       	movw	r22, r24
    1f7c:	cd 01       	movw	r24, r26
    1f7e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f82:	dc 01       	movw	r26, r24
    1f84:	cb 01       	movw	r24, r22
    1f86:	9e 83       	std	Y+6, r25	; 0x06
    1f88:	8d 83       	std	Y+5, r24	; 0x05
    1f8a:	0f c0       	rjmp	.+30     	; 0x1faa <Death+0x260>
    1f8c:	80 e9       	ldi	r24, 0x90	; 144
    1f8e:	91 e0       	ldi	r25, 0x01	; 1
    1f90:	9c 83       	std	Y+4, r25	; 0x04
    1f92:	8b 83       	std	Y+3, r24	; 0x03
    1f94:	8b 81       	ldd	r24, Y+3	; 0x03
    1f96:	9c 81       	ldd	r25, Y+4	; 0x04
    1f98:	01 97       	sbiw	r24, 0x01	; 1
    1f9a:	f1 f7       	brne	.-4      	; 0x1f98 <Death+0x24e>
    1f9c:	9c 83       	std	Y+4, r25	; 0x04
    1f9e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fa0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fa2:	9e 81       	ldd	r25, Y+6	; 0x06
    1fa4:	01 97       	sbiw	r24, 0x01	; 1
    1fa6:	9e 83       	std	Y+6, r25	; 0x06
    1fa8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1faa:	8d 81       	ldd	r24, Y+5	; 0x05
    1fac:	9e 81       	ldd	r25, Y+6	; 0x06
    1fae:	00 97       	sbiw	r24, 0x00	; 0
    1fb0:	69 f7       	brne	.-38     	; 0x1f8c <Death+0x242>
    1fb2:	14 c0       	rjmp	.+40     	; 0x1fdc <Death+0x292>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fb4:	6f 81       	ldd	r22, Y+7	; 0x07
    1fb6:	78 85       	ldd	r23, Y+8	; 0x08
    1fb8:	89 85       	ldd	r24, Y+9	; 0x09
    1fba:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fbc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fc0:	dc 01       	movw	r26, r24
    1fc2:	cb 01       	movw	r24, r22
    1fc4:	9e 83       	std	Y+6, r25	; 0x06
    1fc6:	8d 83       	std	Y+5, r24	; 0x05
    1fc8:	8d 81       	ldd	r24, Y+5	; 0x05
    1fca:	9e 81       	ldd	r25, Y+6	; 0x06
    1fcc:	9a 83       	std	Y+2, r25	; 0x02
    1fce:	89 83       	std	Y+1, r24	; 0x01
    1fd0:	89 81       	ldd	r24, Y+1	; 0x01
    1fd2:	9a 81       	ldd	r25, Y+2	; 0x02
    1fd4:	01 97       	sbiw	r24, 0x01	; 1
    1fd6:	f1 f7       	brne	.-4      	; 0x1fd4 <Death+0x28a>
    1fd8:	9a 83       	std	Y+2, r25	; 0x02
    1fda:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(3000);
	CLCD_voidSendCommand( 1 ) ;
    1fdc:	81 e0       	ldi	r24, 0x01	; 1
    1fde:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <CLCD_voidSendCommand>
}
    1fe2:	6d 96       	adiw	r28, 0x1d	; 29
    1fe4:	0f b6       	in	r0, 0x3f	; 63
    1fe6:	f8 94       	cli
    1fe8:	de bf       	out	0x3e, r29	; 62
    1fea:	0f be       	out	0x3f, r0	; 63
    1fec:	cd bf       	out	0x3d, r28	; 61
    1fee:	cf 91       	pop	r28
    1ff0:	df 91       	pop	r29
    1ff2:	08 95       	ret

00001ff4 <Run>:
void Run ( void )
{
    1ff4:	0f 93       	push	r16
    1ff6:	1f 93       	push	r17
    1ff8:	df 93       	push	r29
    1ffa:	cf 93       	push	r28
    1ffc:	cd b7       	in	r28, 0x3d	; 61
    1ffe:	de b7       	in	r29, 0x3e	; 62
    2000:	c8 54       	subi	r28, 0x48	; 72
    2002:	d0 40       	sbci	r29, 0x00	; 0
    2004:	0f b6       	in	r0, 0x3f	; 63
    2006:	f8 94       	cli
    2008:	de bf       	out	0x3e, r29	; 62
    200a:	0f be       	out	0x3f, r0	; 63
    200c:	cd bf       	out	0x3d, r28	; 61
	uint8 XPos = 1 ;
    200e:	fe 01       	movw	r30, r28
    2010:	e8 5b       	subi	r30, 0xB8	; 184
    2012:	ff 4f       	sbci	r31, 0xFF	; 255
    2014:	81 e0       	ldi	r24, 0x01	; 1
    2016:	80 83       	st	Z, r24
	CLCD_voidSendCommand(1);
    2018:	81 e0       	ldi	r24, 0x01	; 1
    201a:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <CLCD_voidSendCommand>
	voidSendString("   I Can Run");
    201e:	82 eb       	ldi	r24, 0xB2	; 178
    2020:	90 e0       	ldi	r25, 0x00	; 0
    2022:	0e 94 2a 07 	call	0xe54	; 0xe54 <voidSendString>
	CLCD_u8WriteSpecialCharacter( 0u , Local_u8Pattern0Arr, 0u , 1u );
    2026:	2f ee       	ldi	r18, 0xEF	; 239
    2028:	30 e0       	ldi	r19, 0x00	; 0
    202a:	80 e0       	ldi	r24, 0x00	; 0
    202c:	b9 01       	movw	r22, r18
    202e:	40 e0       	ldi	r20, 0x00	; 0
    2030:	21 e0       	ldi	r18, 0x01	; 1
    2032:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <CLCD_u8WriteSpecialCharacter>
    2036:	fe 01       	movw	r30, r28
    2038:	ed 5b       	subi	r30, 0xBD	; 189
    203a:	ff 4f       	sbci	r31, 0xFF	; 255
    203c:	80 e0       	ldi	r24, 0x00	; 0
    203e:	90 e8       	ldi	r25, 0x80	; 128
    2040:	ab eb       	ldi	r26, 0xBB	; 187
    2042:	b4 e4       	ldi	r27, 0x44	; 68
    2044:	80 83       	st	Z, r24
    2046:	91 83       	std	Z+1, r25	; 0x01
    2048:	a2 83       	std	Z+2, r26	; 0x02
    204a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    204c:	8e 01       	movw	r16, r28
    204e:	01 5c       	subi	r16, 0xC1	; 193
    2050:	1f 4f       	sbci	r17, 0xFF	; 255
    2052:	fe 01       	movw	r30, r28
    2054:	ed 5b       	subi	r30, 0xBD	; 189
    2056:	ff 4f       	sbci	r31, 0xFF	; 255
    2058:	60 81       	ld	r22, Z
    205a:	71 81       	ldd	r23, Z+1	; 0x01
    205c:	82 81       	ldd	r24, Z+2	; 0x02
    205e:	93 81       	ldd	r25, Z+3	; 0x03
    2060:	20 e0       	ldi	r18, 0x00	; 0
    2062:	30 e0       	ldi	r19, 0x00	; 0
    2064:	4a e7       	ldi	r20, 0x7A	; 122
    2066:	55 e4       	ldi	r21, 0x45	; 69
    2068:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    206c:	dc 01       	movw	r26, r24
    206e:	cb 01       	movw	r24, r22
    2070:	f8 01       	movw	r30, r16
    2072:	80 83       	st	Z, r24
    2074:	91 83       	std	Z+1, r25	; 0x01
    2076:	a2 83       	std	Z+2, r26	; 0x02
    2078:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    207a:	fe 01       	movw	r30, r28
    207c:	ff 96       	adiw	r30, 0x3f	; 63
    207e:	60 81       	ld	r22, Z
    2080:	71 81       	ldd	r23, Z+1	; 0x01
    2082:	82 81       	ldd	r24, Z+2	; 0x02
    2084:	93 81       	ldd	r25, Z+3	; 0x03
    2086:	20 e0       	ldi	r18, 0x00	; 0
    2088:	30 e0       	ldi	r19, 0x00	; 0
    208a:	40 e8       	ldi	r20, 0x80	; 128
    208c:	5f e3       	ldi	r21, 0x3F	; 63
    208e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2092:	88 23       	and	r24, r24
    2094:	2c f4       	brge	.+10     	; 0x20a0 <Run+0xac>
		__ticks = 1;
    2096:	81 e0       	ldi	r24, 0x01	; 1
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	9e af       	std	Y+62, r25	; 0x3e
    209c:	8d af       	std	Y+61, r24	; 0x3d
    209e:	46 c0       	rjmp	.+140    	; 0x212c <Run+0x138>
	else if (__tmp > 65535)
    20a0:	fe 01       	movw	r30, r28
    20a2:	ff 96       	adiw	r30, 0x3f	; 63
    20a4:	60 81       	ld	r22, Z
    20a6:	71 81       	ldd	r23, Z+1	; 0x01
    20a8:	82 81       	ldd	r24, Z+2	; 0x02
    20aa:	93 81       	ldd	r25, Z+3	; 0x03
    20ac:	20 e0       	ldi	r18, 0x00	; 0
    20ae:	3f ef       	ldi	r19, 0xFF	; 255
    20b0:	4f e7       	ldi	r20, 0x7F	; 127
    20b2:	57 e4       	ldi	r21, 0x47	; 71
    20b4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    20b8:	18 16       	cp	r1, r24
    20ba:	64 f5       	brge	.+88     	; 0x2114 <Run+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20bc:	fe 01       	movw	r30, r28
    20be:	ed 5b       	subi	r30, 0xBD	; 189
    20c0:	ff 4f       	sbci	r31, 0xFF	; 255
    20c2:	60 81       	ld	r22, Z
    20c4:	71 81       	ldd	r23, Z+1	; 0x01
    20c6:	82 81       	ldd	r24, Z+2	; 0x02
    20c8:	93 81       	ldd	r25, Z+3	; 0x03
    20ca:	20 e0       	ldi	r18, 0x00	; 0
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	40 e2       	ldi	r20, 0x20	; 32
    20d0:	51 e4       	ldi	r21, 0x41	; 65
    20d2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20d6:	dc 01       	movw	r26, r24
    20d8:	cb 01       	movw	r24, r22
    20da:	bc 01       	movw	r22, r24
    20dc:	cd 01       	movw	r24, r26
    20de:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20e2:	dc 01       	movw	r26, r24
    20e4:	cb 01       	movw	r24, r22
    20e6:	9e af       	std	Y+62, r25	; 0x3e
    20e8:	8d af       	std	Y+61, r24	; 0x3d
    20ea:	0f c0       	rjmp	.+30     	; 0x210a <Run+0x116>
    20ec:	80 e9       	ldi	r24, 0x90	; 144
    20ee:	91 e0       	ldi	r25, 0x01	; 1
    20f0:	9c af       	std	Y+60, r25	; 0x3c
    20f2:	8b af       	std	Y+59, r24	; 0x3b
    20f4:	8b ad       	ldd	r24, Y+59	; 0x3b
    20f6:	9c ad       	ldd	r25, Y+60	; 0x3c
    20f8:	01 97       	sbiw	r24, 0x01	; 1
    20fa:	f1 f7       	brne	.-4      	; 0x20f8 <Run+0x104>
    20fc:	9c af       	std	Y+60, r25	; 0x3c
    20fe:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2100:	8d ad       	ldd	r24, Y+61	; 0x3d
    2102:	9e ad       	ldd	r25, Y+62	; 0x3e
    2104:	01 97       	sbiw	r24, 0x01	; 1
    2106:	9e af       	std	Y+62, r25	; 0x3e
    2108:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    210a:	8d ad       	ldd	r24, Y+61	; 0x3d
    210c:	9e ad       	ldd	r25, Y+62	; 0x3e
    210e:	00 97       	sbiw	r24, 0x00	; 0
    2110:	69 f7       	brne	.-38     	; 0x20ec <Run+0xf8>
    2112:	31 c1       	rjmp	.+610    	; 0x2376 <Run+0x382>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2114:	fe 01       	movw	r30, r28
    2116:	ff 96       	adiw	r30, 0x3f	; 63
    2118:	60 81       	ld	r22, Z
    211a:	71 81       	ldd	r23, Z+1	; 0x01
    211c:	82 81       	ldd	r24, Z+2	; 0x02
    211e:	93 81       	ldd	r25, Z+3	; 0x03
    2120:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2124:	dc 01       	movw	r26, r24
    2126:	cb 01       	movw	r24, r22
    2128:	9e af       	std	Y+62, r25	; 0x3e
    212a:	8d af       	std	Y+61, r24	; 0x3d
    212c:	8d ad       	ldd	r24, Y+61	; 0x3d
    212e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2130:	9a af       	std	Y+58, r25	; 0x3a
    2132:	89 af       	std	Y+57, r24	; 0x39
    2134:	89 ad       	ldd	r24, Y+57	; 0x39
    2136:	9a ad       	ldd	r25, Y+58	; 0x3a
    2138:	01 97       	sbiw	r24, 0x01	; 1
    213a:	f1 f7       	brne	.-4      	; 0x2138 <Run+0x144>
    213c:	9a af       	std	Y+58, r25	; 0x3a
    213e:	89 af       	std	Y+57, r24	; 0x39
    2140:	1a c1       	rjmp	.+564    	; 0x2376 <Run+0x382>
	_delay_ms(1500);
	while ( XPos !=19 )
	{
		CLCD_voidSendCommand(1);
    2142:	81 e0       	ldi	r24, 0x01	; 1
    2144:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <CLCD_voidSendCommand>
		voidSendString("   I Can Run");
    2148:	82 eb       	ldi	r24, 0xB2	; 178
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	0e 94 2a 07 	call	0xe54	; 0xe54 <voidSendString>
		CLCD_u8WriteSpecialCharacter( 1u , Local_u8Pattern1Arr, XPos , 1u );
    2150:	27 ef       	ldi	r18, 0xF7	; 247
    2152:	30 e0       	ldi	r19, 0x00	; 0
    2154:	fe 01       	movw	r30, r28
    2156:	e8 5b       	subi	r30, 0xB8	; 184
    2158:	ff 4f       	sbci	r31, 0xFF	; 255
    215a:	81 e0       	ldi	r24, 0x01	; 1
    215c:	b9 01       	movw	r22, r18
    215e:	40 81       	ld	r20, Z
    2160:	21 e0       	ldi	r18, 0x01	; 1
    2162:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <CLCD_u8WriteSpecialCharacter>
    2166:	80 e0       	ldi	r24, 0x00	; 0
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	aa e7       	ldi	r26, 0x7A	; 122
    216c:	b3 e4       	ldi	r27, 0x43	; 67
    216e:	8d ab       	std	Y+53, r24	; 0x35
    2170:	9e ab       	std	Y+54, r25	; 0x36
    2172:	af ab       	std	Y+55, r26	; 0x37
    2174:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2176:	6d a9       	ldd	r22, Y+53	; 0x35
    2178:	7e a9       	ldd	r23, Y+54	; 0x36
    217a:	8f a9       	ldd	r24, Y+55	; 0x37
    217c:	98 ad       	ldd	r25, Y+56	; 0x38
    217e:	20 e0       	ldi	r18, 0x00	; 0
    2180:	30 e0       	ldi	r19, 0x00	; 0
    2182:	4a e7       	ldi	r20, 0x7A	; 122
    2184:	55 e4       	ldi	r21, 0x45	; 69
    2186:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    218a:	dc 01       	movw	r26, r24
    218c:	cb 01       	movw	r24, r22
    218e:	89 ab       	std	Y+49, r24	; 0x31
    2190:	9a ab       	std	Y+50, r25	; 0x32
    2192:	ab ab       	std	Y+51, r26	; 0x33
    2194:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2196:	69 a9       	ldd	r22, Y+49	; 0x31
    2198:	7a a9       	ldd	r23, Y+50	; 0x32
    219a:	8b a9       	ldd	r24, Y+51	; 0x33
    219c:	9c a9       	ldd	r25, Y+52	; 0x34
    219e:	20 e0       	ldi	r18, 0x00	; 0
    21a0:	30 e0       	ldi	r19, 0x00	; 0
    21a2:	40 e8       	ldi	r20, 0x80	; 128
    21a4:	5f e3       	ldi	r21, 0x3F	; 63
    21a6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    21aa:	88 23       	and	r24, r24
    21ac:	2c f4       	brge	.+10     	; 0x21b8 <Run+0x1c4>
		__ticks = 1;
    21ae:	81 e0       	ldi	r24, 0x01	; 1
    21b0:	90 e0       	ldi	r25, 0x00	; 0
    21b2:	98 ab       	std	Y+48, r25	; 0x30
    21b4:	8f a7       	std	Y+47, r24	; 0x2f
    21b6:	3f c0       	rjmp	.+126    	; 0x2236 <Run+0x242>
	else if (__tmp > 65535)
    21b8:	69 a9       	ldd	r22, Y+49	; 0x31
    21ba:	7a a9       	ldd	r23, Y+50	; 0x32
    21bc:	8b a9       	ldd	r24, Y+51	; 0x33
    21be:	9c a9       	ldd	r25, Y+52	; 0x34
    21c0:	20 e0       	ldi	r18, 0x00	; 0
    21c2:	3f ef       	ldi	r19, 0xFF	; 255
    21c4:	4f e7       	ldi	r20, 0x7F	; 127
    21c6:	57 e4       	ldi	r21, 0x47	; 71
    21c8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    21cc:	18 16       	cp	r1, r24
    21ce:	4c f5       	brge	.+82     	; 0x2222 <Run+0x22e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21d0:	6d a9       	ldd	r22, Y+53	; 0x35
    21d2:	7e a9       	ldd	r23, Y+54	; 0x36
    21d4:	8f a9       	ldd	r24, Y+55	; 0x37
    21d6:	98 ad       	ldd	r25, Y+56	; 0x38
    21d8:	20 e0       	ldi	r18, 0x00	; 0
    21da:	30 e0       	ldi	r19, 0x00	; 0
    21dc:	40 e2       	ldi	r20, 0x20	; 32
    21de:	51 e4       	ldi	r21, 0x41	; 65
    21e0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21e4:	dc 01       	movw	r26, r24
    21e6:	cb 01       	movw	r24, r22
    21e8:	bc 01       	movw	r22, r24
    21ea:	cd 01       	movw	r24, r26
    21ec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21f0:	dc 01       	movw	r26, r24
    21f2:	cb 01       	movw	r24, r22
    21f4:	98 ab       	std	Y+48, r25	; 0x30
    21f6:	8f a7       	std	Y+47, r24	; 0x2f
    21f8:	0f c0       	rjmp	.+30     	; 0x2218 <Run+0x224>
    21fa:	80 e9       	ldi	r24, 0x90	; 144
    21fc:	91 e0       	ldi	r25, 0x01	; 1
    21fe:	9e a7       	std	Y+46, r25	; 0x2e
    2200:	8d a7       	std	Y+45, r24	; 0x2d
    2202:	8d a5       	ldd	r24, Y+45	; 0x2d
    2204:	9e a5       	ldd	r25, Y+46	; 0x2e
    2206:	01 97       	sbiw	r24, 0x01	; 1
    2208:	f1 f7       	brne	.-4      	; 0x2206 <Run+0x212>
    220a:	9e a7       	std	Y+46, r25	; 0x2e
    220c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    220e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2210:	98 a9       	ldd	r25, Y+48	; 0x30
    2212:	01 97       	sbiw	r24, 0x01	; 1
    2214:	98 ab       	std	Y+48, r25	; 0x30
    2216:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2218:	8f a5       	ldd	r24, Y+47	; 0x2f
    221a:	98 a9       	ldd	r25, Y+48	; 0x30
    221c:	00 97       	sbiw	r24, 0x00	; 0
    221e:	69 f7       	brne	.-38     	; 0x21fa <Run+0x206>
    2220:	14 c0       	rjmp	.+40     	; 0x224a <Run+0x256>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2222:	69 a9       	ldd	r22, Y+49	; 0x31
    2224:	7a a9       	ldd	r23, Y+50	; 0x32
    2226:	8b a9       	ldd	r24, Y+51	; 0x33
    2228:	9c a9       	ldd	r25, Y+52	; 0x34
    222a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    222e:	dc 01       	movw	r26, r24
    2230:	cb 01       	movw	r24, r22
    2232:	98 ab       	std	Y+48, r25	; 0x30
    2234:	8f a7       	std	Y+47, r24	; 0x2f
    2236:	8f a5       	ldd	r24, Y+47	; 0x2f
    2238:	98 a9       	ldd	r25, Y+48	; 0x30
    223a:	9c a7       	std	Y+44, r25	; 0x2c
    223c:	8b a7       	std	Y+43, r24	; 0x2b
    223e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2240:	9c a5       	ldd	r25, Y+44	; 0x2c
    2242:	01 97       	sbiw	r24, 0x01	; 1
    2244:	f1 f7       	brne	.-4      	; 0x2242 <Run+0x24e>
    2246:	9c a7       	std	Y+44, r25	; 0x2c
    2248:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(250);
		XPos ++ ;
    224a:	de 01       	movw	r26, r28
    224c:	a8 5b       	subi	r26, 0xB8	; 184
    224e:	bf 4f       	sbci	r27, 0xFF	; 255
    2250:	fe 01       	movw	r30, r28
    2252:	e8 5b       	subi	r30, 0xB8	; 184
    2254:	ff 4f       	sbci	r31, 0xFF	; 255
    2256:	80 81       	ld	r24, Z
    2258:	8f 5f       	subi	r24, 0xFF	; 255
    225a:	8c 93       	st	X, r24
		CLCD_voidSendCommand(1);
    225c:	81 e0       	ldi	r24, 0x01	; 1
    225e:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <CLCD_voidSendCommand>
		voidSendString("   I Can Run");
    2262:	82 eb       	ldi	r24, 0xB2	; 178
    2264:	90 e0       	ldi	r25, 0x00	; 0
    2266:	0e 94 2a 07 	call	0xe54	; 0xe54 <voidSendString>
		CLCD_u8WriteSpecialCharacter( 2u , Local_u8Pattern2Arr, XPos , 1u );
    226a:	2f ef       	ldi	r18, 0xFF	; 255
    226c:	30 e0       	ldi	r19, 0x00	; 0
    226e:	fe 01       	movw	r30, r28
    2270:	e8 5b       	subi	r30, 0xB8	; 184
    2272:	ff 4f       	sbci	r31, 0xFF	; 255
    2274:	82 e0       	ldi	r24, 0x02	; 2
    2276:	b9 01       	movw	r22, r18
    2278:	40 81       	ld	r20, Z
    227a:	21 e0       	ldi	r18, 0x01	; 1
    227c:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <CLCD_u8WriteSpecialCharacter>
    2280:	80 e0       	ldi	r24, 0x00	; 0
    2282:	90 e0       	ldi	r25, 0x00	; 0
    2284:	aa e7       	ldi	r26, 0x7A	; 122
    2286:	b3 e4       	ldi	r27, 0x43	; 67
    2288:	8f a3       	std	Y+39, r24	; 0x27
    228a:	98 a7       	std	Y+40, r25	; 0x28
    228c:	a9 a7       	std	Y+41, r26	; 0x29
    228e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2290:	6f a1       	ldd	r22, Y+39	; 0x27
    2292:	78 a5       	ldd	r23, Y+40	; 0x28
    2294:	89 a5       	ldd	r24, Y+41	; 0x29
    2296:	9a a5       	ldd	r25, Y+42	; 0x2a
    2298:	20 e0       	ldi	r18, 0x00	; 0
    229a:	30 e0       	ldi	r19, 0x00	; 0
    229c:	4a e7       	ldi	r20, 0x7A	; 122
    229e:	55 e4       	ldi	r21, 0x45	; 69
    22a0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22a4:	dc 01       	movw	r26, r24
    22a6:	cb 01       	movw	r24, r22
    22a8:	8b a3       	std	Y+35, r24	; 0x23
    22aa:	9c a3       	std	Y+36, r25	; 0x24
    22ac:	ad a3       	std	Y+37, r26	; 0x25
    22ae:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    22b0:	6b a1       	ldd	r22, Y+35	; 0x23
    22b2:	7c a1       	ldd	r23, Y+36	; 0x24
    22b4:	8d a1       	ldd	r24, Y+37	; 0x25
    22b6:	9e a1       	ldd	r25, Y+38	; 0x26
    22b8:	20 e0       	ldi	r18, 0x00	; 0
    22ba:	30 e0       	ldi	r19, 0x00	; 0
    22bc:	40 e8       	ldi	r20, 0x80	; 128
    22be:	5f e3       	ldi	r21, 0x3F	; 63
    22c0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    22c4:	88 23       	and	r24, r24
    22c6:	2c f4       	brge	.+10     	; 0x22d2 <Run+0x2de>
		__ticks = 1;
    22c8:	81 e0       	ldi	r24, 0x01	; 1
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	9a a3       	std	Y+34, r25	; 0x22
    22ce:	89 a3       	std	Y+33, r24	; 0x21
    22d0:	3f c0       	rjmp	.+126    	; 0x2350 <Run+0x35c>
	else if (__tmp > 65535)
    22d2:	6b a1       	ldd	r22, Y+35	; 0x23
    22d4:	7c a1       	ldd	r23, Y+36	; 0x24
    22d6:	8d a1       	ldd	r24, Y+37	; 0x25
    22d8:	9e a1       	ldd	r25, Y+38	; 0x26
    22da:	20 e0       	ldi	r18, 0x00	; 0
    22dc:	3f ef       	ldi	r19, 0xFF	; 255
    22de:	4f e7       	ldi	r20, 0x7F	; 127
    22e0:	57 e4       	ldi	r21, 0x47	; 71
    22e2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    22e6:	18 16       	cp	r1, r24
    22e8:	4c f5       	brge	.+82     	; 0x233c <Run+0x348>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22ea:	6f a1       	ldd	r22, Y+39	; 0x27
    22ec:	78 a5       	ldd	r23, Y+40	; 0x28
    22ee:	89 a5       	ldd	r24, Y+41	; 0x29
    22f0:	9a a5       	ldd	r25, Y+42	; 0x2a
    22f2:	20 e0       	ldi	r18, 0x00	; 0
    22f4:	30 e0       	ldi	r19, 0x00	; 0
    22f6:	40 e2       	ldi	r20, 0x20	; 32
    22f8:	51 e4       	ldi	r21, 0x41	; 65
    22fa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22fe:	dc 01       	movw	r26, r24
    2300:	cb 01       	movw	r24, r22
    2302:	bc 01       	movw	r22, r24
    2304:	cd 01       	movw	r24, r26
    2306:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    230a:	dc 01       	movw	r26, r24
    230c:	cb 01       	movw	r24, r22
    230e:	9a a3       	std	Y+34, r25	; 0x22
    2310:	89 a3       	std	Y+33, r24	; 0x21
    2312:	0f c0       	rjmp	.+30     	; 0x2332 <Run+0x33e>
    2314:	80 e9       	ldi	r24, 0x90	; 144
    2316:	91 e0       	ldi	r25, 0x01	; 1
    2318:	98 a3       	std	Y+32, r25	; 0x20
    231a:	8f 8f       	std	Y+31, r24	; 0x1f
    231c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    231e:	98 a1       	ldd	r25, Y+32	; 0x20
    2320:	01 97       	sbiw	r24, 0x01	; 1
    2322:	f1 f7       	brne	.-4      	; 0x2320 <Run+0x32c>
    2324:	98 a3       	std	Y+32, r25	; 0x20
    2326:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2328:	89 a1       	ldd	r24, Y+33	; 0x21
    232a:	9a a1       	ldd	r25, Y+34	; 0x22
    232c:	01 97       	sbiw	r24, 0x01	; 1
    232e:	9a a3       	std	Y+34, r25	; 0x22
    2330:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2332:	89 a1       	ldd	r24, Y+33	; 0x21
    2334:	9a a1       	ldd	r25, Y+34	; 0x22
    2336:	00 97       	sbiw	r24, 0x00	; 0
    2338:	69 f7       	brne	.-38     	; 0x2314 <Run+0x320>
    233a:	14 c0       	rjmp	.+40     	; 0x2364 <Run+0x370>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    233c:	6b a1       	ldd	r22, Y+35	; 0x23
    233e:	7c a1       	ldd	r23, Y+36	; 0x24
    2340:	8d a1       	ldd	r24, Y+37	; 0x25
    2342:	9e a1       	ldd	r25, Y+38	; 0x26
    2344:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2348:	dc 01       	movw	r26, r24
    234a:	cb 01       	movw	r24, r22
    234c:	9a a3       	std	Y+34, r25	; 0x22
    234e:	89 a3       	std	Y+33, r24	; 0x21
    2350:	89 a1       	ldd	r24, Y+33	; 0x21
    2352:	9a a1       	ldd	r25, Y+34	; 0x22
    2354:	9e 8f       	std	Y+30, r25	; 0x1e
    2356:	8d 8f       	std	Y+29, r24	; 0x1d
    2358:	8d 8d       	ldd	r24, Y+29	; 0x1d
    235a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    235c:	01 97       	sbiw	r24, 0x01	; 1
    235e:	f1 f7       	brne	.-4      	; 0x235c <Run+0x368>
    2360:	9e 8f       	std	Y+30, r25	; 0x1e
    2362:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(250);
		XPos ++ ;
    2364:	de 01       	movw	r26, r28
    2366:	a8 5b       	subi	r26, 0xB8	; 184
    2368:	bf 4f       	sbci	r27, 0xFF	; 255
    236a:	fe 01       	movw	r30, r28
    236c:	e8 5b       	subi	r30, 0xB8	; 184
    236e:	ff 4f       	sbci	r31, 0xFF	; 255
    2370:	80 81       	ld	r24, Z
    2372:	8f 5f       	subi	r24, 0xFF	; 255
    2374:	8c 93       	st	X, r24
	uint8 XPos = 1 ;
	CLCD_voidSendCommand(1);
	voidSendString("   I Can Run");
	CLCD_u8WriteSpecialCharacter( 0u , Local_u8Pattern0Arr, 0u , 1u );
	_delay_ms(1500);
	while ( XPos !=19 )
    2376:	fe 01       	movw	r30, r28
    2378:	e8 5b       	subi	r30, 0xB8	; 184
    237a:	ff 4f       	sbci	r31, 0xFF	; 255
    237c:	80 81       	ld	r24, Z
    237e:	83 31       	cpi	r24, 0x13	; 19
    2380:	09 f0       	breq	.+2      	; 0x2384 <Run+0x390>
    2382:	df ce       	rjmp	.-578    	; 0x2142 <Run+0x14e>
		voidSendString("   I Can Run");
		CLCD_u8WriteSpecialCharacter( 2u , Local_u8Pattern2Arr, XPos , 1u );
		_delay_ms(250);
		XPos ++ ;
	}
	for (uint8 i = 0 ; i<5 ; i++)
    2384:	fe 01       	movw	r30, r28
    2386:	e9 5b       	subi	r30, 0xB9	; 185
    2388:	ff 4f       	sbci	r31, 0xFF	; 255
    238a:	10 82       	st	Z, r1
    238c:	0b c1       	rjmp	.+534    	; 0x25a4 <Run+0x5b0>
	{
	CLCD_voidSendCommand(1);
    238e:	81 e0       	ldi	r24, 0x01	; 1
    2390:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <CLCD_voidSendCommand>
	voidSendString("    winner");
    2394:	8f eb       	ldi	r24, 0xBF	; 191
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	0e 94 2a 07 	call	0xe54	; 0xe54 <voidSendString>
	CLCD_u8WriteSpecialCharacter( 0u , Local_u8Pattern0Arr, 19u , 1u );
    239c:	2f ee       	ldi	r18, 0xEF	; 239
    239e:	30 e0       	ldi	r19, 0x00	; 0
    23a0:	80 e0       	ldi	r24, 0x00	; 0
    23a2:	b9 01       	movw	r22, r18
    23a4:	43 e1       	ldi	r20, 0x13	; 19
    23a6:	21 e0       	ldi	r18, 0x01	; 1
    23a8:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <CLCD_u8WriteSpecialCharacter>
    23ac:	80 e0       	ldi	r24, 0x00	; 0
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	a8 e4       	ldi	r26, 0x48	; 72
    23b2:	b3 e4       	ldi	r27, 0x43	; 67
    23b4:	89 8f       	std	Y+25, r24	; 0x19
    23b6:	9a 8f       	std	Y+26, r25	; 0x1a
    23b8:	ab 8f       	std	Y+27, r26	; 0x1b
    23ba:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23bc:	69 8d       	ldd	r22, Y+25	; 0x19
    23be:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23c2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23c4:	20 e0       	ldi	r18, 0x00	; 0
    23c6:	30 e0       	ldi	r19, 0x00	; 0
    23c8:	4a e7       	ldi	r20, 0x7A	; 122
    23ca:	55 e4       	ldi	r21, 0x45	; 69
    23cc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23d0:	dc 01       	movw	r26, r24
    23d2:	cb 01       	movw	r24, r22
    23d4:	8d 8b       	std	Y+21, r24	; 0x15
    23d6:	9e 8b       	std	Y+22, r25	; 0x16
    23d8:	af 8b       	std	Y+23, r26	; 0x17
    23da:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    23dc:	6d 89       	ldd	r22, Y+21	; 0x15
    23de:	7e 89       	ldd	r23, Y+22	; 0x16
    23e0:	8f 89       	ldd	r24, Y+23	; 0x17
    23e2:	98 8d       	ldd	r25, Y+24	; 0x18
    23e4:	20 e0       	ldi	r18, 0x00	; 0
    23e6:	30 e0       	ldi	r19, 0x00	; 0
    23e8:	40 e8       	ldi	r20, 0x80	; 128
    23ea:	5f e3       	ldi	r21, 0x3F	; 63
    23ec:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    23f0:	88 23       	and	r24, r24
    23f2:	2c f4       	brge	.+10     	; 0x23fe <Run+0x40a>
		__ticks = 1;
    23f4:	81 e0       	ldi	r24, 0x01	; 1
    23f6:	90 e0       	ldi	r25, 0x00	; 0
    23f8:	9c 8b       	std	Y+20, r25	; 0x14
    23fa:	8b 8b       	std	Y+19, r24	; 0x13
    23fc:	3f c0       	rjmp	.+126    	; 0x247c <Run+0x488>
	else if (__tmp > 65535)
    23fe:	6d 89       	ldd	r22, Y+21	; 0x15
    2400:	7e 89       	ldd	r23, Y+22	; 0x16
    2402:	8f 89       	ldd	r24, Y+23	; 0x17
    2404:	98 8d       	ldd	r25, Y+24	; 0x18
    2406:	20 e0       	ldi	r18, 0x00	; 0
    2408:	3f ef       	ldi	r19, 0xFF	; 255
    240a:	4f e7       	ldi	r20, 0x7F	; 127
    240c:	57 e4       	ldi	r21, 0x47	; 71
    240e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2412:	18 16       	cp	r1, r24
    2414:	4c f5       	brge	.+82     	; 0x2468 <Run+0x474>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2416:	69 8d       	ldd	r22, Y+25	; 0x19
    2418:	7a 8d       	ldd	r23, Y+26	; 0x1a
    241a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    241c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    241e:	20 e0       	ldi	r18, 0x00	; 0
    2420:	30 e0       	ldi	r19, 0x00	; 0
    2422:	40 e2       	ldi	r20, 0x20	; 32
    2424:	51 e4       	ldi	r21, 0x41	; 65
    2426:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    242a:	dc 01       	movw	r26, r24
    242c:	cb 01       	movw	r24, r22
    242e:	bc 01       	movw	r22, r24
    2430:	cd 01       	movw	r24, r26
    2432:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2436:	dc 01       	movw	r26, r24
    2438:	cb 01       	movw	r24, r22
    243a:	9c 8b       	std	Y+20, r25	; 0x14
    243c:	8b 8b       	std	Y+19, r24	; 0x13
    243e:	0f c0       	rjmp	.+30     	; 0x245e <Run+0x46a>
    2440:	80 e9       	ldi	r24, 0x90	; 144
    2442:	91 e0       	ldi	r25, 0x01	; 1
    2444:	9a 8b       	std	Y+18, r25	; 0x12
    2446:	89 8b       	std	Y+17, r24	; 0x11
    2448:	89 89       	ldd	r24, Y+17	; 0x11
    244a:	9a 89       	ldd	r25, Y+18	; 0x12
    244c:	01 97       	sbiw	r24, 0x01	; 1
    244e:	f1 f7       	brne	.-4      	; 0x244c <Run+0x458>
    2450:	9a 8b       	std	Y+18, r25	; 0x12
    2452:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2454:	8b 89       	ldd	r24, Y+19	; 0x13
    2456:	9c 89       	ldd	r25, Y+20	; 0x14
    2458:	01 97       	sbiw	r24, 0x01	; 1
    245a:	9c 8b       	std	Y+20, r25	; 0x14
    245c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    245e:	8b 89       	ldd	r24, Y+19	; 0x13
    2460:	9c 89       	ldd	r25, Y+20	; 0x14
    2462:	00 97       	sbiw	r24, 0x00	; 0
    2464:	69 f7       	brne	.-38     	; 0x2440 <Run+0x44c>
    2466:	14 c0       	rjmp	.+40     	; 0x2490 <Run+0x49c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2468:	6d 89       	ldd	r22, Y+21	; 0x15
    246a:	7e 89       	ldd	r23, Y+22	; 0x16
    246c:	8f 89       	ldd	r24, Y+23	; 0x17
    246e:	98 8d       	ldd	r25, Y+24	; 0x18
    2470:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2474:	dc 01       	movw	r26, r24
    2476:	cb 01       	movw	r24, r22
    2478:	9c 8b       	std	Y+20, r25	; 0x14
    247a:	8b 8b       	std	Y+19, r24	; 0x13
    247c:	8b 89       	ldd	r24, Y+19	; 0x13
    247e:	9c 89       	ldd	r25, Y+20	; 0x14
    2480:	98 8b       	std	Y+16, r25	; 0x10
    2482:	8f 87       	std	Y+15, r24	; 0x0f
    2484:	8f 85       	ldd	r24, Y+15	; 0x0f
    2486:	98 89       	ldd	r25, Y+16	; 0x10
    2488:	01 97       	sbiw	r24, 0x01	; 1
    248a:	f1 f7       	brne	.-4      	; 0x2488 <Run+0x494>
    248c:	98 8b       	std	Y+16, r25	; 0x10
    248e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(200);
	CLCD_voidSendCommand(1);
    2490:	81 e0       	ldi	r24, 0x01	; 1
    2492:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <CLCD_voidSendCommand>
	voidSendString("    winner");
    2496:	8f eb       	ldi	r24, 0xBF	; 191
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	0e 94 2a 07 	call	0xe54	; 0xe54 <voidSendString>
	CLCD_u8WriteSpecialCharacter( 13u , Local_u8Pattern13Arr, 19u , 1u );
    249e:	27 e2       	ldi	r18, 0x27	; 39
    24a0:	31 e0       	ldi	r19, 0x01	; 1
    24a2:	8d e0       	ldi	r24, 0x0D	; 13
    24a4:	b9 01       	movw	r22, r18
    24a6:	43 e1       	ldi	r20, 0x13	; 19
    24a8:	21 e0       	ldi	r18, 0x01	; 1
    24aa:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <CLCD_u8WriteSpecialCharacter>
    24ae:	80 e0       	ldi	r24, 0x00	; 0
    24b0:	90 e0       	ldi	r25, 0x00	; 0
    24b2:	a8 e4       	ldi	r26, 0x48	; 72
    24b4:	b3 e4       	ldi	r27, 0x43	; 67
    24b6:	8b 87       	std	Y+11, r24	; 0x0b
    24b8:	9c 87       	std	Y+12, r25	; 0x0c
    24ba:	ad 87       	std	Y+13, r26	; 0x0d
    24bc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24be:	6b 85       	ldd	r22, Y+11	; 0x0b
    24c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    24c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    24c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    24c6:	20 e0       	ldi	r18, 0x00	; 0
    24c8:	30 e0       	ldi	r19, 0x00	; 0
    24ca:	4a e7       	ldi	r20, 0x7A	; 122
    24cc:	55 e4       	ldi	r21, 0x45	; 69
    24ce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24d2:	dc 01       	movw	r26, r24
    24d4:	cb 01       	movw	r24, r22
    24d6:	8f 83       	std	Y+7, r24	; 0x07
    24d8:	98 87       	std	Y+8, r25	; 0x08
    24da:	a9 87       	std	Y+9, r26	; 0x09
    24dc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24de:	6f 81       	ldd	r22, Y+7	; 0x07
    24e0:	78 85       	ldd	r23, Y+8	; 0x08
    24e2:	89 85       	ldd	r24, Y+9	; 0x09
    24e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    24e6:	20 e0       	ldi	r18, 0x00	; 0
    24e8:	30 e0       	ldi	r19, 0x00	; 0
    24ea:	40 e8       	ldi	r20, 0x80	; 128
    24ec:	5f e3       	ldi	r21, 0x3F	; 63
    24ee:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    24f2:	88 23       	and	r24, r24
    24f4:	2c f4       	brge	.+10     	; 0x2500 <Run+0x50c>
		__ticks = 1;
    24f6:	81 e0       	ldi	r24, 0x01	; 1
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	9e 83       	std	Y+6, r25	; 0x06
    24fc:	8d 83       	std	Y+5, r24	; 0x05
    24fe:	3f c0       	rjmp	.+126    	; 0x257e <Run+0x58a>
	else if (__tmp > 65535)
    2500:	6f 81       	ldd	r22, Y+7	; 0x07
    2502:	78 85       	ldd	r23, Y+8	; 0x08
    2504:	89 85       	ldd	r24, Y+9	; 0x09
    2506:	9a 85       	ldd	r25, Y+10	; 0x0a
    2508:	20 e0       	ldi	r18, 0x00	; 0
    250a:	3f ef       	ldi	r19, 0xFF	; 255
    250c:	4f e7       	ldi	r20, 0x7F	; 127
    250e:	57 e4       	ldi	r21, 0x47	; 71
    2510:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2514:	18 16       	cp	r1, r24
    2516:	4c f5       	brge	.+82     	; 0x256a <Run+0x576>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2518:	6b 85       	ldd	r22, Y+11	; 0x0b
    251a:	7c 85       	ldd	r23, Y+12	; 0x0c
    251c:	8d 85       	ldd	r24, Y+13	; 0x0d
    251e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2520:	20 e0       	ldi	r18, 0x00	; 0
    2522:	30 e0       	ldi	r19, 0x00	; 0
    2524:	40 e2       	ldi	r20, 0x20	; 32
    2526:	51 e4       	ldi	r21, 0x41	; 65
    2528:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    252c:	dc 01       	movw	r26, r24
    252e:	cb 01       	movw	r24, r22
    2530:	bc 01       	movw	r22, r24
    2532:	cd 01       	movw	r24, r26
    2534:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2538:	dc 01       	movw	r26, r24
    253a:	cb 01       	movw	r24, r22
    253c:	9e 83       	std	Y+6, r25	; 0x06
    253e:	8d 83       	std	Y+5, r24	; 0x05
    2540:	0f c0       	rjmp	.+30     	; 0x2560 <Run+0x56c>
    2542:	80 e9       	ldi	r24, 0x90	; 144
    2544:	91 e0       	ldi	r25, 0x01	; 1
    2546:	9c 83       	std	Y+4, r25	; 0x04
    2548:	8b 83       	std	Y+3, r24	; 0x03
    254a:	8b 81       	ldd	r24, Y+3	; 0x03
    254c:	9c 81       	ldd	r25, Y+4	; 0x04
    254e:	01 97       	sbiw	r24, 0x01	; 1
    2550:	f1 f7       	brne	.-4      	; 0x254e <Run+0x55a>
    2552:	9c 83       	std	Y+4, r25	; 0x04
    2554:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2556:	8d 81       	ldd	r24, Y+5	; 0x05
    2558:	9e 81       	ldd	r25, Y+6	; 0x06
    255a:	01 97       	sbiw	r24, 0x01	; 1
    255c:	9e 83       	std	Y+6, r25	; 0x06
    255e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2560:	8d 81       	ldd	r24, Y+5	; 0x05
    2562:	9e 81       	ldd	r25, Y+6	; 0x06
    2564:	00 97       	sbiw	r24, 0x00	; 0
    2566:	69 f7       	brne	.-38     	; 0x2542 <Run+0x54e>
    2568:	14 c0       	rjmp	.+40     	; 0x2592 <Run+0x59e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    256a:	6f 81       	ldd	r22, Y+7	; 0x07
    256c:	78 85       	ldd	r23, Y+8	; 0x08
    256e:	89 85       	ldd	r24, Y+9	; 0x09
    2570:	9a 85       	ldd	r25, Y+10	; 0x0a
    2572:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2576:	dc 01       	movw	r26, r24
    2578:	cb 01       	movw	r24, r22
    257a:	9e 83       	std	Y+6, r25	; 0x06
    257c:	8d 83       	std	Y+5, r24	; 0x05
    257e:	8d 81       	ldd	r24, Y+5	; 0x05
    2580:	9e 81       	ldd	r25, Y+6	; 0x06
    2582:	9a 83       	std	Y+2, r25	; 0x02
    2584:	89 83       	std	Y+1, r24	; 0x01
    2586:	89 81       	ldd	r24, Y+1	; 0x01
    2588:	9a 81       	ldd	r25, Y+2	; 0x02
    258a:	01 97       	sbiw	r24, 0x01	; 1
    258c:	f1 f7       	brne	.-4      	; 0x258a <Run+0x596>
    258e:	9a 83       	std	Y+2, r25	; 0x02
    2590:	89 83       	std	Y+1, r24	; 0x01
		voidSendString("   I Can Run");
		CLCD_u8WriteSpecialCharacter( 2u , Local_u8Pattern2Arr, XPos , 1u );
		_delay_ms(250);
		XPos ++ ;
	}
	for (uint8 i = 0 ; i<5 ; i++)
    2592:	de 01       	movw	r26, r28
    2594:	a9 5b       	subi	r26, 0xB9	; 185
    2596:	bf 4f       	sbci	r27, 0xFF	; 255
    2598:	fe 01       	movw	r30, r28
    259a:	e9 5b       	subi	r30, 0xB9	; 185
    259c:	ff 4f       	sbci	r31, 0xFF	; 255
    259e:	80 81       	ld	r24, Z
    25a0:	8f 5f       	subi	r24, 0xFF	; 255
    25a2:	8c 93       	st	X, r24
    25a4:	fe 01       	movw	r30, r28
    25a6:	e9 5b       	subi	r30, 0xB9	; 185
    25a8:	ff 4f       	sbci	r31, 0xFF	; 255
    25aa:	80 81       	ld	r24, Z
    25ac:	85 30       	cpi	r24, 0x05	; 5
    25ae:	08 f4       	brcc	.+2      	; 0x25b2 <Run+0x5be>
    25b0:	ee ce       	rjmp	.-548    	; 0x238e <Run+0x39a>
	CLCD_voidSendCommand(1);
	voidSendString("    winner");
	CLCD_u8WriteSpecialCharacter( 13u , Local_u8Pattern13Arr, 19u , 1u );
	_delay_ms(200);
	}
	CLCD_voidSendCommand(1);
    25b2:	81 e0       	ldi	r24, 0x01	; 1
    25b4:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <CLCD_voidSendCommand>
}
    25b8:	c8 5b       	subi	r28, 0xB8	; 184
    25ba:	df 4f       	sbci	r29, 0xFF	; 255
    25bc:	0f b6       	in	r0, 0x3f	; 63
    25be:	f8 94       	cli
    25c0:	de bf       	out	0x3e, r29	; 62
    25c2:	0f be       	out	0x3f, r0	; 63
    25c4:	cd bf       	out	0x3d, r28	; 61
    25c6:	cf 91       	pop	r28
    25c8:	df 91       	pop	r29
    25ca:	1f 91       	pop	r17
    25cc:	0f 91       	pop	r16
    25ce:	08 95       	ret

000025d0 <Dance>:
void Dance ( void )
{
    25d0:	0f 93       	push	r16
    25d2:	1f 93       	push	r17
    25d4:	df 93       	push	r29
    25d6:	cf 93       	push	r28
    25d8:	cd b7       	in	r28, 0x3d	; 61
    25da:	de b7       	in	r29, 0x3e	; 62
    25dc:	c3 56       	subi	r28, 0x63	; 99
    25de:	d0 40       	sbci	r29, 0x00	; 0
    25e0:	0f b6       	in	r0, 0x3f	; 63
    25e2:	f8 94       	cli
    25e4:	de bf       	out	0x3e, r29	; 62
    25e6:	0f be       	out	0x3f, r0	; 63
    25e8:	cd bf       	out	0x3d, r28	; 61
	CLCD_voidSendCommand(1);
    25ea:	81 e0       	ldi	r24, 0x01	; 1
    25ec:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <CLCD_voidSendCommand>
	voidSendString("  I Can Dance");
    25f0:	8a ec       	ldi	r24, 0xCA	; 202
    25f2:	90 e0       	ldi	r25, 0x00	; 0
    25f4:	0e 94 2a 07 	call	0xe54	; 0xe54 <voidSendString>
	CLCD_u8WriteSpecialCharacter( 5u , Local_u8Pattern5Arr, 7u , 1u );
    25f8:	27 e0       	ldi	r18, 0x07	; 7
    25fa:	31 e0       	ldi	r19, 0x01	; 1
    25fc:	85 e0       	ldi	r24, 0x05	; 5
    25fe:	b9 01       	movw	r22, r18
    2600:	47 e0       	ldi	r20, 0x07	; 7
    2602:	21 e0       	ldi	r18, 0x01	; 1
    2604:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <CLCD_u8WriteSpecialCharacter>
	CLCD_u8WriteSpecialCharacter( 5u , Local_u8Pattern5Arr, 8u , 1u );
    2608:	27 e0       	ldi	r18, 0x07	; 7
    260a:	31 e0       	ldi	r19, 0x01	; 1
    260c:	85 e0       	ldi	r24, 0x05	; 5
    260e:	b9 01       	movw	r22, r18
    2610:	48 e0       	ldi	r20, 0x08	; 8
    2612:	21 e0       	ldi	r18, 0x01	; 1
    2614:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <CLCD_u8WriteSpecialCharacter>
    2618:	fe 01       	movw	r30, r28
    261a:	e1 5a       	subi	r30, 0xA1	; 161
    261c:	ff 4f       	sbci	r31, 0xFF	; 255
    261e:	80 e0       	ldi	r24, 0x00	; 0
    2620:	90 e0       	ldi	r25, 0x00	; 0
    2622:	aa ef       	ldi	r26, 0xFA	; 250
    2624:	b4 e4       	ldi	r27, 0x44	; 68
    2626:	80 83       	st	Z, r24
    2628:	91 83       	std	Z+1, r25	; 0x01
    262a:	a2 83       	std	Z+2, r26	; 0x02
    262c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    262e:	8e 01       	movw	r16, r28
    2630:	05 5a       	subi	r16, 0xA5	; 165
    2632:	1f 4f       	sbci	r17, 0xFF	; 255
    2634:	fe 01       	movw	r30, r28
    2636:	e1 5a       	subi	r30, 0xA1	; 161
    2638:	ff 4f       	sbci	r31, 0xFF	; 255
    263a:	60 81       	ld	r22, Z
    263c:	71 81       	ldd	r23, Z+1	; 0x01
    263e:	82 81       	ldd	r24, Z+2	; 0x02
    2640:	93 81       	ldd	r25, Z+3	; 0x03
    2642:	20 e0       	ldi	r18, 0x00	; 0
    2644:	30 e0       	ldi	r19, 0x00	; 0
    2646:	4a e7       	ldi	r20, 0x7A	; 122
    2648:	55 e4       	ldi	r21, 0x45	; 69
    264a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    264e:	dc 01       	movw	r26, r24
    2650:	cb 01       	movw	r24, r22
    2652:	f8 01       	movw	r30, r16
    2654:	80 83       	st	Z, r24
    2656:	91 83       	std	Z+1, r25	; 0x01
    2658:	a2 83       	std	Z+2, r26	; 0x02
    265a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    265c:	fe 01       	movw	r30, r28
    265e:	e5 5a       	subi	r30, 0xA5	; 165
    2660:	ff 4f       	sbci	r31, 0xFF	; 255
    2662:	60 81       	ld	r22, Z
    2664:	71 81       	ldd	r23, Z+1	; 0x01
    2666:	82 81       	ldd	r24, Z+2	; 0x02
    2668:	93 81       	ldd	r25, Z+3	; 0x03
    266a:	20 e0       	ldi	r18, 0x00	; 0
    266c:	30 e0       	ldi	r19, 0x00	; 0
    266e:	40 e8       	ldi	r20, 0x80	; 128
    2670:	5f e3       	ldi	r21, 0x3F	; 63
    2672:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2676:	88 23       	and	r24, r24
    2678:	44 f4       	brge	.+16     	; 0x268a <Dance+0xba>
		__ticks = 1;
    267a:	fe 01       	movw	r30, r28
    267c:	e7 5a       	subi	r30, 0xA7	; 167
    267e:	ff 4f       	sbci	r31, 0xFF	; 255
    2680:	81 e0       	ldi	r24, 0x01	; 1
    2682:	90 e0       	ldi	r25, 0x00	; 0
    2684:	91 83       	std	Z+1, r25	; 0x01
    2686:	80 83       	st	Z, r24
    2688:	64 c0       	rjmp	.+200    	; 0x2752 <Dance+0x182>
	else if (__tmp > 65535)
    268a:	fe 01       	movw	r30, r28
    268c:	e5 5a       	subi	r30, 0xA5	; 165
    268e:	ff 4f       	sbci	r31, 0xFF	; 255
    2690:	60 81       	ld	r22, Z
    2692:	71 81       	ldd	r23, Z+1	; 0x01
    2694:	82 81       	ldd	r24, Z+2	; 0x02
    2696:	93 81       	ldd	r25, Z+3	; 0x03
    2698:	20 e0       	ldi	r18, 0x00	; 0
    269a:	3f ef       	ldi	r19, 0xFF	; 255
    269c:	4f e7       	ldi	r20, 0x7F	; 127
    269e:	57 e4       	ldi	r21, 0x47	; 71
    26a0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    26a4:	18 16       	cp	r1, r24
    26a6:	0c f0       	brlt	.+2      	; 0x26aa <Dance+0xda>
    26a8:	43 c0       	rjmp	.+134    	; 0x2730 <Dance+0x160>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26aa:	fe 01       	movw	r30, r28
    26ac:	e1 5a       	subi	r30, 0xA1	; 161
    26ae:	ff 4f       	sbci	r31, 0xFF	; 255
    26b0:	60 81       	ld	r22, Z
    26b2:	71 81       	ldd	r23, Z+1	; 0x01
    26b4:	82 81       	ldd	r24, Z+2	; 0x02
    26b6:	93 81       	ldd	r25, Z+3	; 0x03
    26b8:	20 e0       	ldi	r18, 0x00	; 0
    26ba:	30 e0       	ldi	r19, 0x00	; 0
    26bc:	40 e2       	ldi	r20, 0x20	; 32
    26be:	51 e4       	ldi	r21, 0x41	; 65
    26c0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26c4:	dc 01       	movw	r26, r24
    26c6:	cb 01       	movw	r24, r22
    26c8:	8e 01       	movw	r16, r28
    26ca:	07 5a       	subi	r16, 0xA7	; 167
    26cc:	1f 4f       	sbci	r17, 0xFF	; 255
    26ce:	bc 01       	movw	r22, r24
    26d0:	cd 01       	movw	r24, r26
    26d2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26d6:	dc 01       	movw	r26, r24
    26d8:	cb 01       	movw	r24, r22
    26da:	f8 01       	movw	r30, r16
    26dc:	91 83       	std	Z+1, r25	; 0x01
    26de:	80 83       	st	Z, r24
    26e0:	1f c0       	rjmp	.+62     	; 0x2720 <Dance+0x150>
    26e2:	fe 01       	movw	r30, r28
    26e4:	e9 5a       	subi	r30, 0xA9	; 169
    26e6:	ff 4f       	sbci	r31, 0xFF	; 255
    26e8:	80 e9       	ldi	r24, 0x90	; 144
    26ea:	91 e0       	ldi	r25, 0x01	; 1
    26ec:	91 83       	std	Z+1, r25	; 0x01
    26ee:	80 83       	st	Z, r24
    26f0:	fe 01       	movw	r30, r28
    26f2:	e9 5a       	subi	r30, 0xA9	; 169
    26f4:	ff 4f       	sbci	r31, 0xFF	; 255
    26f6:	80 81       	ld	r24, Z
    26f8:	91 81       	ldd	r25, Z+1	; 0x01
    26fa:	01 97       	sbiw	r24, 0x01	; 1
    26fc:	f1 f7       	brne	.-4      	; 0x26fa <Dance+0x12a>
    26fe:	fe 01       	movw	r30, r28
    2700:	e9 5a       	subi	r30, 0xA9	; 169
    2702:	ff 4f       	sbci	r31, 0xFF	; 255
    2704:	91 83       	std	Z+1, r25	; 0x01
    2706:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2708:	de 01       	movw	r26, r28
    270a:	a7 5a       	subi	r26, 0xA7	; 167
    270c:	bf 4f       	sbci	r27, 0xFF	; 255
    270e:	fe 01       	movw	r30, r28
    2710:	e7 5a       	subi	r30, 0xA7	; 167
    2712:	ff 4f       	sbci	r31, 0xFF	; 255
    2714:	80 81       	ld	r24, Z
    2716:	91 81       	ldd	r25, Z+1	; 0x01
    2718:	01 97       	sbiw	r24, 0x01	; 1
    271a:	11 96       	adiw	r26, 0x01	; 1
    271c:	9c 93       	st	X, r25
    271e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2720:	fe 01       	movw	r30, r28
    2722:	e7 5a       	subi	r30, 0xA7	; 167
    2724:	ff 4f       	sbci	r31, 0xFF	; 255
    2726:	80 81       	ld	r24, Z
    2728:	91 81       	ldd	r25, Z+1	; 0x01
    272a:	00 97       	sbiw	r24, 0x00	; 0
    272c:	d1 f6       	brne	.-76     	; 0x26e2 <Dance+0x112>
    272e:	28 c0       	rjmp	.+80     	; 0x2780 <Dance+0x1b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2730:	8e 01       	movw	r16, r28
    2732:	07 5a       	subi	r16, 0xA7	; 167
    2734:	1f 4f       	sbci	r17, 0xFF	; 255
    2736:	fe 01       	movw	r30, r28
    2738:	e5 5a       	subi	r30, 0xA5	; 165
    273a:	ff 4f       	sbci	r31, 0xFF	; 255
    273c:	60 81       	ld	r22, Z
    273e:	71 81       	ldd	r23, Z+1	; 0x01
    2740:	82 81       	ldd	r24, Z+2	; 0x02
    2742:	93 81       	ldd	r25, Z+3	; 0x03
    2744:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2748:	dc 01       	movw	r26, r24
    274a:	cb 01       	movw	r24, r22
    274c:	f8 01       	movw	r30, r16
    274e:	91 83       	std	Z+1, r25	; 0x01
    2750:	80 83       	st	Z, r24
    2752:	de 01       	movw	r26, r28
    2754:	ab 5a       	subi	r26, 0xAB	; 171
    2756:	bf 4f       	sbci	r27, 0xFF	; 255
    2758:	fe 01       	movw	r30, r28
    275a:	e7 5a       	subi	r30, 0xA7	; 167
    275c:	ff 4f       	sbci	r31, 0xFF	; 255
    275e:	80 81       	ld	r24, Z
    2760:	91 81       	ldd	r25, Z+1	; 0x01
    2762:	11 96       	adiw	r26, 0x01	; 1
    2764:	9c 93       	st	X, r25
    2766:	8e 93       	st	-X, r24
    2768:	fe 01       	movw	r30, r28
    276a:	eb 5a       	subi	r30, 0xAB	; 171
    276c:	ff 4f       	sbci	r31, 0xFF	; 255
    276e:	80 81       	ld	r24, Z
    2770:	91 81       	ldd	r25, Z+1	; 0x01
    2772:	01 97       	sbiw	r24, 0x01	; 1
    2774:	f1 f7       	brne	.-4      	; 0x2772 <Dance+0x1a2>
    2776:	fe 01       	movw	r30, r28
    2778:	eb 5a       	subi	r30, 0xAB	; 171
    277a:	ff 4f       	sbci	r31, 0xFF	; 255
    277c:	91 83       	std	Z+1, r25	; 0x01
    277e:	80 83       	st	Z, r24
	_delay_ms(2000);
	for (uint8 i = 0 ; i<2 ; i++)
    2780:	fe 01       	movw	r30, r28
    2782:	ed 59       	subi	r30, 0x9D	; 157
    2784:	ff 4f       	sbci	r31, 0xFF	; 255
    2786:	10 82       	st	Z, r1
    2788:	ab c3       	rjmp	.+1878   	; 0x2ee0 <Dance+0x910>
	{
	CLCD_voidSendCommand(1);
    278a:	81 e0       	ldi	r24, 0x01	; 1
    278c:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <CLCD_voidSendCommand>
	voidSendString("I Can Dance");
    2790:	88 ed       	ldi	r24, 0xD8	; 216
    2792:	90 e0       	ldi	r25, 0x00	; 0
    2794:	0e 94 2a 07 	call	0xe54	; 0xe54 <voidSendString>
	CLCD_u8WriteSpecialCharacter( 1u , Local_u8Pattern17Arr, 12u , 0u );
    2798:	2f e5       	ldi	r18, 0x5F	; 95
    279a:	31 e0       	ldi	r19, 0x01	; 1
    279c:	81 e0       	ldi	r24, 0x01	; 1
    279e:	b9 01       	movw	r22, r18
    27a0:	4c e0       	ldi	r20, 0x0C	; 12
    27a2:	20 e0       	ldi	r18, 0x00	; 0
    27a4:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <CLCD_u8WriteSpecialCharacter>
	voidSendString("On");
    27a8:	84 ee       	ldi	r24, 0xE4	; 228
    27aa:	90 e0       	ldi	r25, 0x00	; 0
    27ac:	0e 94 2a 07 	call	0xe54	; 0xe54 <voidSendString>
	CLCD_u8WriteSpecialCharacter( 0u , Local_u8Pattern0Arr, 5u , 1u );
    27b0:	2f ee       	ldi	r18, 0xEF	; 239
    27b2:	30 e0       	ldi	r19, 0x00	; 0
    27b4:	80 e0       	ldi	r24, 0x00	; 0
    27b6:	b9 01       	movw	r22, r18
    27b8:	45 e0       	ldi	r20, 0x05	; 5
    27ba:	21 e0       	ldi	r18, 0x01	; 1
    27bc:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <CLCD_u8WriteSpecialCharacter>
    27c0:	fe 01       	movw	r30, r28
    27c2:	ef 5a       	subi	r30, 0xAF	; 175
    27c4:	ff 4f       	sbci	r31, 0xFF	; 255
    27c6:	80 e0       	ldi	r24, 0x00	; 0
    27c8:	90 e0       	ldi	r25, 0x00	; 0
    27ca:	aa e7       	ldi	r26, 0x7A	; 122
    27cc:	b3 e4       	ldi	r27, 0x43	; 67
    27ce:	80 83       	st	Z, r24
    27d0:	91 83       	std	Z+1, r25	; 0x01
    27d2:	a2 83       	std	Z+2, r26	; 0x02
    27d4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27d6:	8e 01       	movw	r16, r28
    27d8:	03 5b       	subi	r16, 0xB3	; 179
    27da:	1f 4f       	sbci	r17, 0xFF	; 255
    27dc:	fe 01       	movw	r30, r28
    27de:	ef 5a       	subi	r30, 0xAF	; 175
    27e0:	ff 4f       	sbci	r31, 0xFF	; 255
    27e2:	60 81       	ld	r22, Z
    27e4:	71 81       	ldd	r23, Z+1	; 0x01
    27e6:	82 81       	ldd	r24, Z+2	; 0x02
    27e8:	93 81       	ldd	r25, Z+3	; 0x03
    27ea:	20 e0       	ldi	r18, 0x00	; 0
    27ec:	30 e0       	ldi	r19, 0x00	; 0
    27ee:	4a e7       	ldi	r20, 0x7A	; 122
    27f0:	55 e4       	ldi	r21, 0x45	; 69
    27f2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27f6:	dc 01       	movw	r26, r24
    27f8:	cb 01       	movw	r24, r22
    27fa:	f8 01       	movw	r30, r16
    27fc:	80 83       	st	Z, r24
    27fe:	91 83       	std	Z+1, r25	; 0x01
    2800:	a2 83       	std	Z+2, r26	; 0x02
    2802:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2804:	fe 01       	movw	r30, r28
    2806:	e3 5b       	subi	r30, 0xB3	; 179
    2808:	ff 4f       	sbci	r31, 0xFF	; 255
    280a:	60 81       	ld	r22, Z
    280c:	71 81       	ldd	r23, Z+1	; 0x01
    280e:	82 81       	ldd	r24, Z+2	; 0x02
    2810:	93 81       	ldd	r25, Z+3	; 0x03
    2812:	20 e0       	ldi	r18, 0x00	; 0
    2814:	30 e0       	ldi	r19, 0x00	; 0
    2816:	40 e8       	ldi	r20, 0x80	; 128
    2818:	5f e3       	ldi	r21, 0x3F	; 63
    281a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    281e:	88 23       	and	r24, r24
    2820:	44 f4       	brge	.+16     	; 0x2832 <Dance+0x262>
		__ticks = 1;
    2822:	fe 01       	movw	r30, r28
    2824:	e5 5b       	subi	r30, 0xB5	; 181
    2826:	ff 4f       	sbci	r31, 0xFF	; 255
    2828:	81 e0       	ldi	r24, 0x01	; 1
    282a:	90 e0       	ldi	r25, 0x00	; 0
    282c:	91 83       	std	Z+1, r25	; 0x01
    282e:	80 83       	st	Z, r24
    2830:	64 c0       	rjmp	.+200    	; 0x28fa <Dance+0x32a>
	else if (__tmp > 65535)
    2832:	fe 01       	movw	r30, r28
    2834:	e3 5b       	subi	r30, 0xB3	; 179
    2836:	ff 4f       	sbci	r31, 0xFF	; 255
    2838:	60 81       	ld	r22, Z
    283a:	71 81       	ldd	r23, Z+1	; 0x01
    283c:	82 81       	ldd	r24, Z+2	; 0x02
    283e:	93 81       	ldd	r25, Z+3	; 0x03
    2840:	20 e0       	ldi	r18, 0x00	; 0
    2842:	3f ef       	ldi	r19, 0xFF	; 255
    2844:	4f e7       	ldi	r20, 0x7F	; 127
    2846:	57 e4       	ldi	r21, 0x47	; 71
    2848:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    284c:	18 16       	cp	r1, r24
    284e:	0c f0       	brlt	.+2      	; 0x2852 <Dance+0x282>
    2850:	43 c0       	rjmp	.+134    	; 0x28d8 <Dance+0x308>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2852:	fe 01       	movw	r30, r28
    2854:	ef 5a       	subi	r30, 0xAF	; 175
    2856:	ff 4f       	sbci	r31, 0xFF	; 255
    2858:	60 81       	ld	r22, Z
    285a:	71 81       	ldd	r23, Z+1	; 0x01
    285c:	82 81       	ldd	r24, Z+2	; 0x02
    285e:	93 81       	ldd	r25, Z+3	; 0x03
    2860:	20 e0       	ldi	r18, 0x00	; 0
    2862:	30 e0       	ldi	r19, 0x00	; 0
    2864:	40 e2       	ldi	r20, 0x20	; 32
    2866:	51 e4       	ldi	r21, 0x41	; 65
    2868:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    286c:	dc 01       	movw	r26, r24
    286e:	cb 01       	movw	r24, r22
    2870:	8e 01       	movw	r16, r28
    2872:	05 5b       	subi	r16, 0xB5	; 181
    2874:	1f 4f       	sbci	r17, 0xFF	; 255
    2876:	bc 01       	movw	r22, r24
    2878:	cd 01       	movw	r24, r26
    287a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    287e:	dc 01       	movw	r26, r24
    2880:	cb 01       	movw	r24, r22
    2882:	f8 01       	movw	r30, r16
    2884:	91 83       	std	Z+1, r25	; 0x01
    2886:	80 83       	st	Z, r24
    2888:	1f c0       	rjmp	.+62     	; 0x28c8 <Dance+0x2f8>
    288a:	fe 01       	movw	r30, r28
    288c:	e7 5b       	subi	r30, 0xB7	; 183
    288e:	ff 4f       	sbci	r31, 0xFF	; 255
    2890:	80 e9       	ldi	r24, 0x90	; 144
    2892:	91 e0       	ldi	r25, 0x01	; 1
    2894:	91 83       	std	Z+1, r25	; 0x01
    2896:	80 83       	st	Z, r24
    2898:	fe 01       	movw	r30, r28
    289a:	e7 5b       	subi	r30, 0xB7	; 183
    289c:	ff 4f       	sbci	r31, 0xFF	; 255
    289e:	80 81       	ld	r24, Z
    28a0:	91 81       	ldd	r25, Z+1	; 0x01
    28a2:	01 97       	sbiw	r24, 0x01	; 1
    28a4:	f1 f7       	brne	.-4      	; 0x28a2 <Dance+0x2d2>
    28a6:	fe 01       	movw	r30, r28
    28a8:	e7 5b       	subi	r30, 0xB7	; 183
    28aa:	ff 4f       	sbci	r31, 0xFF	; 255
    28ac:	91 83       	std	Z+1, r25	; 0x01
    28ae:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28b0:	de 01       	movw	r26, r28
    28b2:	a5 5b       	subi	r26, 0xB5	; 181
    28b4:	bf 4f       	sbci	r27, 0xFF	; 255
    28b6:	fe 01       	movw	r30, r28
    28b8:	e5 5b       	subi	r30, 0xB5	; 181
    28ba:	ff 4f       	sbci	r31, 0xFF	; 255
    28bc:	80 81       	ld	r24, Z
    28be:	91 81       	ldd	r25, Z+1	; 0x01
    28c0:	01 97       	sbiw	r24, 0x01	; 1
    28c2:	11 96       	adiw	r26, 0x01	; 1
    28c4:	9c 93       	st	X, r25
    28c6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28c8:	fe 01       	movw	r30, r28
    28ca:	e5 5b       	subi	r30, 0xB5	; 181
    28cc:	ff 4f       	sbci	r31, 0xFF	; 255
    28ce:	80 81       	ld	r24, Z
    28d0:	91 81       	ldd	r25, Z+1	; 0x01
    28d2:	00 97       	sbiw	r24, 0x00	; 0
    28d4:	d1 f6       	brne	.-76     	; 0x288a <Dance+0x2ba>
    28d6:	27 c0       	rjmp	.+78     	; 0x2926 <Dance+0x356>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28d8:	8e 01       	movw	r16, r28
    28da:	05 5b       	subi	r16, 0xB5	; 181
    28dc:	1f 4f       	sbci	r17, 0xFF	; 255
    28de:	fe 01       	movw	r30, r28
    28e0:	e3 5b       	subi	r30, 0xB3	; 179
    28e2:	ff 4f       	sbci	r31, 0xFF	; 255
    28e4:	60 81       	ld	r22, Z
    28e6:	71 81       	ldd	r23, Z+1	; 0x01
    28e8:	82 81       	ldd	r24, Z+2	; 0x02
    28ea:	93 81       	ldd	r25, Z+3	; 0x03
    28ec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28f0:	dc 01       	movw	r26, r24
    28f2:	cb 01       	movw	r24, r22
    28f4:	f8 01       	movw	r30, r16
    28f6:	91 83       	std	Z+1, r25	; 0x01
    28f8:	80 83       	st	Z, r24
    28fa:	de 01       	movw	r26, r28
    28fc:	a9 5b       	subi	r26, 0xB9	; 185
    28fe:	bf 4f       	sbci	r27, 0xFF	; 255
    2900:	fe 01       	movw	r30, r28
    2902:	e5 5b       	subi	r30, 0xB5	; 181
    2904:	ff 4f       	sbci	r31, 0xFF	; 255
    2906:	80 81       	ld	r24, Z
    2908:	91 81       	ldd	r25, Z+1	; 0x01
    290a:	8d 93       	st	X+, r24
    290c:	9c 93       	st	X, r25
    290e:	fe 01       	movw	r30, r28
    2910:	e9 5b       	subi	r30, 0xB9	; 185
    2912:	ff 4f       	sbci	r31, 0xFF	; 255
    2914:	80 81       	ld	r24, Z
    2916:	91 81       	ldd	r25, Z+1	; 0x01
    2918:	01 97       	sbiw	r24, 0x01	; 1
    291a:	f1 f7       	brne	.-4      	; 0x2918 <Dance+0x348>
    291c:	fe 01       	movw	r30, r28
    291e:	e9 5b       	subi	r30, 0xB9	; 185
    2920:	ff 4f       	sbci	r31, 0xFF	; 255
    2922:	91 83       	std	Z+1, r25	; 0x01
    2924:	80 83       	st	Z, r24
	_delay_ms(250);
	CLCD_voidSendCommand(1);
    2926:	81 e0       	ldi	r24, 0x01	; 1
    2928:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <CLCD_voidSendCommand>
	voidSendString("I Can Dance");
    292c:	88 ed       	ldi	r24, 0xD8	; 216
    292e:	90 e0       	ldi	r25, 0x00	; 0
    2930:	0e 94 2a 07 	call	0xe54	; 0xe54 <voidSendString>
	CLCD_u8WriteSpecialCharacter( 1u , Local_u8Pattern17Arr, 12u , 0u );
    2934:	2f e5       	ldi	r18, 0x5F	; 95
    2936:	31 e0       	ldi	r19, 0x01	; 1
    2938:	81 e0       	ldi	r24, 0x01	; 1
    293a:	b9 01       	movw	r22, r18
    293c:	4c e0       	ldi	r20, 0x0C	; 12
    293e:	20 e0       	ldi	r18, 0x00	; 0
    2940:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <CLCD_u8WriteSpecialCharacter>
	voidSendString("On");
    2944:	84 ee       	ldi	r24, 0xE4	; 228
    2946:	90 e0       	ldi	r25, 0x00	; 0
    2948:	0e 94 2a 07 	call	0xe54	; 0xe54 <voidSendString>
	CLCD_u8WriteSpecialCharacter( 13u , Local_u8Pattern13Arr,6u , 1u );
    294c:	27 e2       	ldi	r18, 0x27	; 39
    294e:	31 e0       	ldi	r19, 0x01	; 1
    2950:	8d e0       	ldi	r24, 0x0D	; 13
    2952:	b9 01       	movw	r22, r18
    2954:	46 e0       	ldi	r20, 0x06	; 6
    2956:	21 e0       	ldi	r18, 0x01	; 1
    2958:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <CLCD_u8WriteSpecialCharacter>
    295c:	fe 01       	movw	r30, r28
    295e:	ed 5b       	subi	r30, 0xBD	; 189
    2960:	ff 4f       	sbci	r31, 0xFF	; 255
    2962:	80 e0       	ldi	r24, 0x00	; 0
    2964:	90 e0       	ldi	r25, 0x00	; 0
    2966:	aa e7       	ldi	r26, 0x7A	; 122
    2968:	b3 e4       	ldi	r27, 0x43	; 67
    296a:	80 83       	st	Z, r24
    296c:	91 83       	std	Z+1, r25	; 0x01
    296e:	a2 83       	std	Z+2, r26	; 0x02
    2970:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2972:	8e 01       	movw	r16, r28
    2974:	01 5c       	subi	r16, 0xC1	; 193
    2976:	1f 4f       	sbci	r17, 0xFF	; 255
    2978:	fe 01       	movw	r30, r28
    297a:	ed 5b       	subi	r30, 0xBD	; 189
    297c:	ff 4f       	sbci	r31, 0xFF	; 255
    297e:	60 81       	ld	r22, Z
    2980:	71 81       	ldd	r23, Z+1	; 0x01
    2982:	82 81       	ldd	r24, Z+2	; 0x02
    2984:	93 81       	ldd	r25, Z+3	; 0x03
    2986:	20 e0       	ldi	r18, 0x00	; 0
    2988:	30 e0       	ldi	r19, 0x00	; 0
    298a:	4a e7       	ldi	r20, 0x7A	; 122
    298c:	55 e4       	ldi	r21, 0x45	; 69
    298e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2992:	dc 01       	movw	r26, r24
    2994:	cb 01       	movw	r24, r22
    2996:	f8 01       	movw	r30, r16
    2998:	80 83       	st	Z, r24
    299a:	91 83       	std	Z+1, r25	; 0x01
    299c:	a2 83       	std	Z+2, r26	; 0x02
    299e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    29a0:	fe 01       	movw	r30, r28
    29a2:	ff 96       	adiw	r30, 0x3f	; 63
    29a4:	60 81       	ld	r22, Z
    29a6:	71 81       	ldd	r23, Z+1	; 0x01
    29a8:	82 81       	ldd	r24, Z+2	; 0x02
    29aa:	93 81       	ldd	r25, Z+3	; 0x03
    29ac:	20 e0       	ldi	r18, 0x00	; 0
    29ae:	30 e0       	ldi	r19, 0x00	; 0
    29b0:	40 e8       	ldi	r20, 0x80	; 128
    29b2:	5f e3       	ldi	r21, 0x3F	; 63
    29b4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    29b8:	88 23       	and	r24, r24
    29ba:	2c f4       	brge	.+10     	; 0x29c6 <Dance+0x3f6>
		__ticks = 1;
    29bc:	81 e0       	ldi	r24, 0x01	; 1
    29be:	90 e0       	ldi	r25, 0x00	; 0
    29c0:	9e af       	std	Y+62, r25	; 0x3e
    29c2:	8d af       	std	Y+61, r24	; 0x3d
    29c4:	46 c0       	rjmp	.+140    	; 0x2a52 <Dance+0x482>
	else if (__tmp > 65535)
    29c6:	fe 01       	movw	r30, r28
    29c8:	ff 96       	adiw	r30, 0x3f	; 63
    29ca:	60 81       	ld	r22, Z
    29cc:	71 81       	ldd	r23, Z+1	; 0x01
    29ce:	82 81       	ldd	r24, Z+2	; 0x02
    29d0:	93 81       	ldd	r25, Z+3	; 0x03
    29d2:	20 e0       	ldi	r18, 0x00	; 0
    29d4:	3f ef       	ldi	r19, 0xFF	; 255
    29d6:	4f e7       	ldi	r20, 0x7F	; 127
    29d8:	57 e4       	ldi	r21, 0x47	; 71
    29da:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    29de:	18 16       	cp	r1, r24
    29e0:	64 f5       	brge	.+88     	; 0x2a3a <Dance+0x46a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29e2:	fe 01       	movw	r30, r28
    29e4:	ed 5b       	subi	r30, 0xBD	; 189
    29e6:	ff 4f       	sbci	r31, 0xFF	; 255
    29e8:	60 81       	ld	r22, Z
    29ea:	71 81       	ldd	r23, Z+1	; 0x01
    29ec:	82 81       	ldd	r24, Z+2	; 0x02
    29ee:	93 81       	ldd	r25, Z+3	; 0x03
    29f0:	20 e0       	ldi	r18, 0x00	; 0
    29f2:	30 e0       	ldi	r19, 0x00	; 0
    29f4:	40 e2       	ldi	r20, 0x20	; 32
    29f6:	51 e4       	ldi	r21, 0x41	; 65
    29f8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29fc:	dc 01       	movw	r26, r24
    29fe:	cb 01       	movw	r24, r22
    2a00:	bc 01       	movw	r22, r24
    2a02:	cd 01       	movw	r24, r26
    2a04:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a08:	dc 01       	movw	r26, r24
    2a0a:	cb 01       	movw	r24, r22
    2a0c:	9e af       	std	Y+62, r25	; 0x3e
    2a0e:	8d af       	std	Y+61, r24	; 0x3d
    2a10:	0f c0       	rjmp	.+30     	; 0x2a30 <Dance+0x460>
    2a12:	80 e9       	ldi	r24, 0x90	; 144
    2a14:	91 e0       	ldi	r25, 0x01	; 1
    2a16:	9c af       	std	Y+60, r25	; 0x3c
    2a18:	8b af       	std	Y+59, r24	; 0x3b
    2a1a:	8b ad       	ldd	r24, Y+59	; 0x3b
    2a1c:	9c ad       	ldd	r25, Y+60	; 0x3c
    2a1e:	01 97       	sbiw	r24, 0x01	; 1
    2a20:	f1 f7       	brne	.-4      	; 0x2a1e <Dance+0x44e>
    2a22:	9c af       	std	Y+60, r25	; 0x3c
    2a24:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a26:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a28:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a2a:	01 97       	sbiw	r24, 0x01	; 1
    2a2c:	9e af       	std	Y+62, r25	; 0x3e
    2a2e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a30:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a32:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a34:	00 97       	sbiw	r24, 0x00	; 0
    2a36:	69 f7       	brne	.-38     	; 0x2a12 <Dance+0x442>
    2a38:	16 c0       	rjmp	.+44     	; 0x2a66 <Dance+0x496>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a3a:	fe 01       	movw	r30, r28
    2a3c:	ff 96       	adiw	r30, 0x3f	; 63
    2a3e:	60 81       	ld	r22, Z
    2a40:	71 81       	ldd	r23, Z+1	; 0x01
    2a42:	82 81       	ldd	r24, Z+2	; 0x02
    2a44:	93 81       	ldd	r25, Z+3	; 0x03
    2a46:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a4a:	dc 01       	movw	r26, r24
    2a4c:	cb 01       	movw	r24, r22
    2a4e:	9e af       	std	Y+62, r25	; 0x3e
    2a50:	8d af       	std	Y+61, r24	; 0x3d
    2a52:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a54:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a56:	9a af       	std	Y+58, r25	; 0x3a
    2a58:	89 af       	std	Y+57, r24	; 0x39
    2a5a:	89 ad       	ldd	r24, Y+57	; 0x39
    2a5c:	9a ad       	ldd	r25, Y+58	; 0x3a
    2a5e:	01 97       	sbiw	r24, 0x01	; 1
    2a60:	f1 f7       	brne	.-4      	; 0x2a5e <Dance+0x48e>
    2a62:	9a af       	std	Y+58, r25	; 0x3a
    2a64:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(250);
	CLCD_voidSendCommand(1);
    2a66:	81 e0       	ldi	r24, 0x01	; 1
    2a68:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <CLCD_voidSendCommand>
	voidSendString("I Can Dance");
    2a6c:	88 ed       	ldi	r24, 0xD8	; 216
    2a6e:	90 e0       	ldi	r25, 0x00	; 0
    2a70:	0e 94 2a 07 	call	0xe54	; 0xe54 <voidSendString>
	CLCD_u8WriteSpecialCharacter( 1u , Local_u8Pattern17Arr, 12u , 0u );
    2a74:	2f e5       	ldi	r18, 0x5F	; 95
    2a76:	31 e0       	ldi	r19, 0x01	; 1
    2a78:	81 e0       	ldi	r24, 0x01	; 1
    2a7a:	b9 01       	movw	r22, r18
    2a7c:	4c e0       	ldi	r20, 0x0C	; 12
    2a7e:	20 e0       	ldi	r18, 0x00	; 0
    2a80:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <CLCD_u8WriteSpecialCharacter>
	voidSendString("On");
    2a84:	84 ee       	ldi	r24, 0xE4	; 228
    2a86:	90 e0       	ldi	r25, 0x00	; 0
    2a88:	0e 94 2a 07 	call	0xe54	; 0xe54 <voidSendString>
	CLCD_u8WriteSpecialCharacter( 0u , Local_u8Pattern0Arr, 7u , 1u );
    2a8c:	2f ee       	ldi	r18, 0xEF	; 239
    2a8e:	30 e0       	ldi	r19, 0x00	; 0
    2a90:	80 e0       	ldi	r24, 0x00	; 0
    2a92:	b9 01       	movw	r22, r18
    2a94:	47 e0       	ldi	r20, 0x07	; 7
    2a96:	21 e0       	ldi	r18, 0x01	; 1
    2a98:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <CLCD_u8WriteSpecialCharacter>
    2a9c:	80 e0       	ldi	r24, 0x00	; 0
    2a9e:	90 e0       	ldi	r25, 0x00	; 0
    2aa0:	aa e7       	ldi	r26, 0x7A	; 122
    2aa2:	b3 e4       	ldi	r27, 0x43	; 67
    2aa4:	8d ab       	std	Y+53, r24	; 0x35
    2aa6:	9e ab       	std	Y+54, r25	; 0x36
    2aa8:	af ab       	std	Y+55, r26	; 0x37
    2aaa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2aac:	6d a9       	ldd	r22, Y+53	; 0x35
    2aae:	7e a9       	ldd	r23, Y+54	; 0x36
    2ab0:	8f a9       	ldd	r24, Y+55	; 0x37
    2ab2:	98 ad       	ldd	r25, Y+56	; 0x38
    2ab4:	20 e0       	ldi	r18, 0x00	; 0
    2ab6:	30 e0       	ldi	r19, 0x00	; 0
    2ab8:	4a e7       	ldi	r20, 0x7A	; 122
    2aba:	55 e4       	ldi	r21, 0x45	; 69
    2abc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ac0:	dc 01       	movw	r26, r24
    2ac2:	cb 01       	movw	r24, r22
    2ac4:	89 ab       	std	Y+49, r24	; 0x31
    2ac6:	9a ab       	std	Y+50, r25	; 0x32
    2ac8:	ab ab       	std	Y+51, r26	; 0x33
    2aca:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2acc:	69 a9       	ldd	r22, Y+49	; 0x31
    2ace:	7a a9       	ldd	r23, Y+50	; 0x32
    2ad0:	8b a9       	ldd	r24, Y+51	; 0x33
    2ad2:	9c a9       	ldd	r25, Y+52	; 0x34
    2ad4:	20 e0       	ldi	r18, 0x00	; 0
    2ad6:	30 e0       	ldi	r19, 0x00	; 0
    2ad8:	40 e8       	ldi	r20, 0x80	; 128
    2ada:	5f e3       	ldi	r21, 0x3F	; 63
    2adc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2ae0:	88 23       	and	r24, r24
    2ae2:	2c f4       	brge	.+10     	; 0x2aee <Dance+0x51e>
		__ticks = 1;
    2ae4:	81 e0       	ldi	r24, 0x01	; 1
    2ae6:	90 e0       	ldi	r25, 0x00	; 0
    2ae8:	98 ab       	std	Y+48, r25	; 0x30
    2aea:	8f a7       	std	Y+47, r24	; 0x2f
    2aec:	3f c0       	rjmp	.+126    	; 0x2b6c <Dance+0x59c>
	else if (__tmp > 65535)
    2aee:	69 a9       	ldd	r22, Y+49	; 0x31
    2af0:	7a a9       	ldd	r23, Y+50	; 0x32
    2af2:	8b a9       	ldd	r24, Y+51	; 0x33
    2af4:	9c a9       	ldd	r25, Y+52	; 0x34
    2af6:	20 e0       	ldi	r18, 0x00	; 0
    2af8:	3f ef       	ldi	r19, 0xFF	; 255
    2afa:	4f e7       	ldi	r20, 0x7F	; 127
    2afc:	57 e4       	ldi	r21, 0x47	; 71
    2afe:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2b02:	18 16       	cp	r1, r24
    2b04:	4c f5       	brge	.+82     	; 0x2b58 <Dance+0x588>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b06:	6d a9       	ldd	r22, Y+53	; 0x35
    2b08:	7e a9       	ldd	r23, Y+54	; 0x36
    2b0a:	8f a9       	ldd	r24, Y+55	; 0x37
    2b0c:	98 ad       	ldd	r25, Y+56	; 0x38
    2b0e:	20 e0       	ldi	r18, 0x00	; 0
    2b10:	30 e0       	ldi	r19, 0x00	; 0
    2b12:	40 e2       	ldi	r20, 0x20	; 32
    2b14:	51 e4       	ldi	r21, 0x41	; 65
    2b16:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b1a:	dc 01       	movw	r26, r24
    2b1c:	cb 01       	movw	r24, r22
    2b1e:	bc 01       	movw	r22, r24
    2b20:	cd 01       	movw	r24, r26
    2b22:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b26:	dc 01       	movw	r26, r24
    2b28:	cb 01       	movw	r24, r22
    2b2a:	98 ab       	std	Y+48, r25	; 0x30
    2b2c:	8f a7       	std	Y+47, r24	; 0x2f
    2b2e:	0f c0       	rjmp	.+30     	; 0x2b4e <Dance+0x57e>
    2b30:	80 e9       	ldi	r24, 0x90	; 144
    2b32:	91 e0       	ldi	r25, 0x01	; 1
    2b34:	9e a7       	std	Y+46, r25	; 0x2e
    2b36:	8d a7       	std	Y+45, r24	; 0x2d
    2b38:	8d a5       	ldd	r24, Y+45	; 0x2d
    2b3a:	9e a5       	ldd	r25, Y+46	; 0x2e
    2b3c:	01 97       	sbiw	r24, 0x01	; 1
    2b3e:	f1 f7       	brne	.-4      	; 0x2b3c <Dance+0x56c>
    2b40:	9e a7       	std	Y+46, r25	; 0x2e
    2b42:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b44:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b46:	98 a9       	ldd	r25, Y+48	; 0x30
    2b48:	01 97       	sbiw	r24, 0x01	; 1
    2b4a:	98 ab       	std	Y+48, r25	; 0x30
    2b4c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b4e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b50:	98 a9       	ldd	r25, Y+48	; 0x30
    2b52:	00 97       	sbiw	r24, 0x00	; 0
    2b54:	69 f7       	brne	.-38     	; 0x2b30 <Dance+0x560>
    2b56:	14 c0       	rjmp	.+40     	; 0x2b80 <Dance+0x5b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b58:	69 a9       	ldd	r22, Y+49	; 0x31
    2b5a:	7a a9       	ldd	r23, Y+50	; 0x32
    2b5c:	8b a9       	ldd	r24, Y+51	; 0x33
    2b5e:	9c a9       	ldd	r25, Y+52	; 0x34
    2b60:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b64:	dc 01       	movw	r26, r24
    2b66:	cb 01       	movw	r24, r22
    2b68:	98 ab       	std	Y+48, r25	; 0x30
    2b6a:	8f a7       	std	Y+47, r24	; 0x2f
    2b6c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b6e:	98 a9       	ldd	r25, Y+48	; 0x30
    2b70:	9c a7       	std	Y+44, r25	; 0x2c
    2b72:	8b a7       	std	Y+43, r24	; 0x2b
    2b74:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b76:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b78:	01 97       	sbiw	r24, 0x01	; 1
    2b7a:	f1 f7       	brne	.-4      	; 0x2b78 <Dance+0x5a8>
    2b7c:	9c a7       	std	Y+44, r25	; 0x2c
    2b7e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(250);
	CLCD_voidSendCommand(1);
    2b80:	81 e0       	ldi	r24, 0x01	; 1
    2b82:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <CLCD_voidSendCommand>
	voidSendString("I Can Dance");
    2b86:	88 ed       	ldi	r24, 0xD8	; 216
    2b88:	90 e0       	ldi	r25, 0x00	; 0
    2b8a:	0e 94 2a 07 	call	0xe54	; 0xe54 <voidSendString>
	CLCD_u8WriteSpecialCharacter( 1u , Local_u8Pattern17Arr, 12u , 0u );
    2b8e:	2f e5       	ldi	r18, 0x5F	; 95
    2b90:	31 e0       	ldi	r19, 0x01	; 1
    2b92:	81 e0       	ldi	r24, 0x01	; 1
    2b94:	b9 01       	movw	r22, r18
    2b96:	4c e0       	ldi	r20, 0x0C	; 12
    2b98:	20 e0       	ldi	r18, 0x00	; 0
    2b9a:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <CLCD_u8WriteSpecialCharacter>
	voidSendString("On");
    2b9e:	84 ee       	ldi	r24, 0xE4	; 228
    2ba0:	90 e0       	ldi	r25, 0x00	; 0
    2ba2:	0e 94 2a 07 	call	0xe54	; 0xe54 <voidSendString>
	CLCD_u8WriteSpecialCharacter( 13u , Local_u8Pattern13Arr,8u , 1u );
    2ba6:	27 e2       	ldi	r18, 0x27	; 39
    2ba8:	31 e0       	ldi	r19, 0x01	; 1
    2baa:	8d e0       	ldi	r24, 0x0D	; 13
    2bac:	b9 01       	movw	r22, r18
    2bae:	48 e0       	ldi	r20, 0x08	; 8
    2bb0:	21 e0       	ldi	r18, 0x01	; 1
    2bb2:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <CLCD_u8WriteSpecialCharacter>
    2bb6:	80 e0       	ldi	r24, 0x00	; 0
    2bb8:	90 e0       	ldi	r25, 0x00	; 0
    2bba:	aa e7       	ldi	r26, 0x7A	; 122
    2bbc:	b3 e4       	ldi	r27, 0x43	; 67
    2bbe:	8f a3       	std	Y+39, r24	; 0x27
    2bc0:	98 a7       	std	Y+40, r25	; 0x28
    2bc2:	a9 a7       	std	Y+41, r26	; 0x29
    2bc4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bc6:	6f a1       	ldd	r22, Y+39	; 0x27
    2bc8:	78 a5       	ldd	r23, Y+40	; 0x28
    2bca:	89 a5       	ldd	r24, Y+41	; 0x29
    2bcc:	9a a5       	ldd	r25, Y+42	; 0x2a
    2bce:	20 e0       	ldi	r18, 0x00	; 0
    2bd0:	30 e0       	ldi	r19, 0x00	; 0
    2bd2:	4a e7       	ldi	r20, 0x7A	; 122
    2bd4:	55 e4       	ldi	r21, 0x45	; 69
    2bd6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2bda:	dc 01       	movw	r26, r24
    2bdc:	cb 01       	movw	r24, r22
    2bde:	8b a3       	std	Y+35, r24	; 0x23
    2be0:	9c a3       	std	Y+36, r25	; 0x24
    2be2:	ad a3       	std	Y+37, r26	; 0x25
    2be4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2be6:	6b a1       	ldd	r22, Y+35	; 0x23
    2be8:	7c a1       	ldd	r23, Y+36	; 0x24
    2bea:	8d a1       	ldd	r24, Y+37	; 0x25
    2bec:	9e a1       	ldd	r25, Y+38	; 0x26
    2bee:	20 e0       	ldi	r18, 0x00	; 0
    2bf0:	30 e0       	ldi	r19, 0x00	; 0
    2bf2:	40 e8       	ldi	r20, 0x80	; 128
    2bf4:	5f e3       	ldi	r21, 0x3F	; 63
    2bf6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2bfa:	88 23       	and	r24, r24
    2bfc:	2c f4       	brge	.+10     	; 0x2c08 <Dance+0x638>
		__ticks = 1;
    2bfe:	81 e0       	ldi	r24, 0x01	; 1
    2c00:	90 e0       	ldi	r25, 0x00	; 0
    2c02:	9a a3       	std	Y+34, r25	; 0x22
    2c04:	89 a3       	std	Y+33, r24	; 0x21
    2c06:	3f c0       	rjmp	.+126    	; 0x2c86 <Dance+0x6b6>
	else if (__tmp > 65535)
    2c08:	6b a1       	ldd	r22, Y+35	; 0x23
    2c0a:	7c a1       	ldd	r23, Y+36	; 0x24
    2c0c:	8d a1       	ldd	r24, Y+37	; 0x25
    2c0e:	9e a1       	ldd	r25, Y+38	; 0x26
    2c10:	20 e0       	ldi	r18, 0x00	; 0
    2c12:	3f ef       	ldi	r19, 0xFF	; 255
    2c14:	4f e7       	ldi	r20, 0x7F	; 127
    2c16:	57 e4       	ldi	r21, 0x47	; 71
    2c18:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2c1c:	18 16       	cp	r1, r24
    2c1e:	4c f5       	brge	.+82     	; 0x2c72 <Dance+0x6a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c20:	6f a1       	ldd	r22, Y+39	; 0x27
    2c22:	78 a5       	ldd	r23, Y+40	; 0x28
    2c24:	89 a5       	ldd	r24, Y+41	; 0x29
    2c26:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c28:	20 e0       	ldi	r18, 0x00	; 0
    2c2a:	30 e0       	ldi	r19, 0x00	; 0
    2c2c:	40 e2       	ldi	r20, 0x20	; 32
    2c2e:	51 e4       	ldi	r21, 0x41	; 65
    2c30:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c34:	dc 01       	movw	r26, r24
    2c36:	cb 01       	movw	r24, r22
    2c38:	bc 01       	movw	r22, r24
    2c3a:	cd 01       	movw	r24, r26
    2c3c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c40:	dc 01       	movw	r26, r24
    2c42:	cb 01       	movw	r24, r22
    2c44:	9a a3       	std	Y+34, r25	; 0x22
    2c46:	89 a3       	std	Y+33, r24	; 0x21
    2c48:	0f c0       	rjmp	.+30     	; 0x2c68 <Dance+0x698>
    2c4a:	80 e9       	ldi	r24, 0x90	; 144
    2c4c:	91 e0       	ldi	r25, 0x01	; 1
    2c4e:	98 a3       	std	Y+32, r25	; 0x20
    2c50:	8f 8f       	std	Y+31, r24	; 0x1f
    2c52:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c54:	98 a1       	ldd	r25, Y+32	; 0x20
    2c56:	01 97       	sbiw	r24, 0x01	; 1
    2c58:	f1 f7       	brne	.-4      	; 0x2c56 <Dance+0x686>
    2c5a:	98 a3       	std	Y+32, r25	; 0x20
    2c5c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c5e:	89 a1       	ldd	r24, Y+33	; 0x21
    2c60:	9a a1       	ldd	r25, Y+34	; 0x22
    2c62:	01 97       	sbiw	r24, 0x01	; 1
    2c64:	9a a3       	std	Y+34, r25	; 0x22
    2c66:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c68:	89 a1       	ldd	r24, Y+33	; 0x21
    2c6a:	9a a1       	ldd	r25, Y+34	; 0x22
    2c6c:	00 97       	sbiw	r24, 0x00	; 0
    2c6e:	69 f7       	brne	.-38     	; 0x2c4a <Dance+0x67a>
    2c70:	14 c0       	rjmp	.+40     	; 0x2c9a <Dance+0x6ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c72:	6b a1       	ldd	r22, Y+35	; 0x23
    2c74:	7c a1       	ldd	r23, Y+36	; 0x24
    2c76:	8d a1       	ldd	r24, Y+37	; 0x25
    2c78:	9e a1       	ldd	r25, Y+38	; 0x26
    2c7a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c7e:	dc 01       	movw	r26, r24
    2c80:	cb 01       	movw	r24, r22
    2c82:	9a a3       	std	Y+34, r25	; 0x22
    2c84:	89 a3       	std	Y+33, r24	; 0x21
    2c86:	89 a1       	ldd	r24, Y+33	; 0x21
    2c88:	9a a1       	ldd	r25, Y+34	; 0x22
    2c8a:	9e 8f       	std	Y+30, r25	; 0x1e
    2c8c:	8d 8f       	std	Y+29, r24	; 0x1d
    2c8e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c90:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c92:	01 97       	sbiw	r24, 0x01	; 1
    2c94:	f1 f7       	brne	.-4      	; 0x2c92 <Dance+0x6c2>
    2c96:	9e 8f       	std	Y+30, r25	; 0x1e
    2c98:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(250);
	CLCD_voidSendCommand(1);
    2c9a:	81 e0       	ldi	r24, 0x01	; 1
    2c9c:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <CLCD_voidSendCommand>
	voidSendString("I Can Dance");
    2ca0:	88 ed       	ldi	r24, 0xD8	; 216
    2ca2:	90 e0       	ldi	r25, 0x00	; 0
    2ca4:	0e 94 2a 07 	call	0xe54	; 0xe54 <voidSendString>
	CLCD_u8WriteSpecialCharacter( 1u , Local_u8Pattern17Arr, 12u , 0u );
    2ca8:	2f e5       	ldi	r18, 0x5F	; 95
    2caa:	31 e0       	ldi	r19, 0x01	; 1
    2cac:	81 e0       	ldi	r24, 0x01	; 1
    2cae:	b9 01       	movw	r22, r18
    2cb0:	4c e0       	ldi	r20, 0x0C	; 12
    2cb2:	20 e0       	ldi	r18, 0x00	; 0
    2cb4:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <CLCD_u8WriteSpecialCharacter>
	voidSendString("On");
    2cb8:	84 ee       	ldi	r24, 0xE4	; 228
    2cba:	90 e0       	ldi	r25, 0x00	; 0
    2cbc:	0e 94 2a 07 	call	0xe54	; 0xe54 <voidSendString>
	CLCD_u8WriteSpecialCharacter( 0u , Local_u8Pattern0Arr, 7u , 1u );
    2cc0:	2f ee       	ldi	r18, 0xEF	; 239
    2cc2:	30 e0       	ldi	r19, 0x00	; 0
    2cc4:	80 e0       	ldi	r24, 0x00	; 0
    2cc6:	b9 01       	movw	r22, r18
    2cc8:	47 e0       	ldi	r20, 0x07	; 7
    2cca:	21 e0       	ldi	r18, 0x01	; 1
    2ccc:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <CLCD_u8WriteSpecialCharacter>
    2cd0:	80 e0       	ldi	r24, 0x00	; 0
    2cd2:	90 e0       	ldi	r25, 0x00	; 0
    2cd4:	aa e7       	ldi	r26, 0x7A	; 122
    2cd6:	b3 e4       	ldi	r27, 0x43	; 67
    2cd8:	89 8f       	std	Y+25, r24	; 0x19
    2cda:	9a 8f       	std	Y+26, r25	; 0x1a
    2cdc:	ab 8f       	std	Y+27, r26	; 0x1b
    2cde:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ce0:	69 8d       	ldd	r22, Y+25	; 0x19
    2ce2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ce4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ce6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ce8:	20 e0       	ldi	r18, 0x00	; 0
    2cea:	30 e0       	ldi	r19, 0x00	; 0
    2cec:	4a e7       	ldi	r20, 0x7A	; 122
    2cee:	55 e4       	ldi	r21, 0x45	; 69
    2cf0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2cf4:	dc 01       	movw	r26, r24
    2cf6:	cb 01       	movw	r24, r22
    2cf8:	8d 8b       	std	Y+21, r24	; 0x15
    2cfa:	9e 8b       	std	Y+22, r25	; 0x16
    2cfc:	af 8b       	std	Y+23, r26	; 0x17
    2cfe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2d00:	6d 89       	ldd	r22, Y+21	; 0x15
    2d02:	7e 89       	ldd	r23, Y+22	; 0x16
    2d04:	8f 89       	ldd	r24, Y+23	; 0x17
    2d06:	98 8d       	ldd	r25, Y+24	; 0x18
    2d08:	20 e0       	ldi	r18, 0x00	; 0
    2d0a:	30 e0       	ldi	r19, 0x00	; 0
    2d0c:	40 e8       	ldi	r20, 0x80	; 128
    2d0e:	5f e3       	ldi	r21, 0x3F	; 63
    2d10:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2d14:	88 23       	and	r24, r24
    2d16:	2c f4       	brge	.+10     	; 0x2d22 <Dance+0x752>
		__ticks = 1;
    2d18:	81 e0       	ldi	r24, 0x01	; 1
    2d1a:	90 e0       	ldi	r25, 0x00	; 0
    2d1c:	9c 8b       	std	Y+20, r25	; 0x14
    2d1e:	8b 8b       	std	Y+19, r24	; 0x13
    2d20:	3f c0       	rjmp	.+126    	; 0x2da0 <Dance+0x7d0>
	else if (__tmp > 65535)
    2d22:	6d 89       	ldd	r22, Y+21	; 0x15
    2d24:	7e 89       	ldd	r23, Y+22	; 0x16
    2d26:	8f 89       	ldd	r24, Y+23	; 0x17
    2d28:	98 8d       	ldd	r25, Y+24	; 0x18
    2d2a:	20 e0       	ldi	r18, 0x00	; 0
    2d2c:	3f ef       	ldi	r19, 0xFF	; 255
    2d2e:	4f e7       	ldi	r20, 0x7F	; 127
    2d30:	57 e4       	ldi	r21, 0x47	; 71
    2d32:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2d36:	18 16       	cp	r1, r24
    2d38:	4c f5       	brge	.+82     	; 0x2d8c <Dance+0x7bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d3a:	69 8d       	ldd	r22, Y+25	; 0x19
    2d3c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d3e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d40:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d42:	20 e0       	ldi	r18, 0x00	; 0
    2d44:	30 e0       	ldi	r19, 0x00	; 0
    2d46:	40 e2       	ldi	r20, 0x20	; 32
    2d48:	51 e4       	ldi	r21, 0x41	; 65
    2d4a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d4e:	dc 01       	movw	r26, r24
    2d50:	cb 01       	movw	r24, r22
    2d52:	bc 01       	movw	r22, r24
    2d54:	cd 01       	movw	r24, r26
    2d56:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d5a:	dc 01       	movw	r26, r24
    2d5c:	cb 01       	movw	r24, r22
    2d5e:	9c 8b       	std	Y+20, r25	; 0x14
    2d60:	8b 8b       	std	Y+19, r24	; 0x13
    2d62:	0f c0       	rjmp	.+30     	; 0x2d82 <Dance+0x7b2>
    2d64:	80 e9       	ldi	r24, 0x90	; 144
    2d66:	91 e0       	ldi	r25, 0x01	; 1
    2d68:	9a 8b       	std	Y+18, r25	; 0x12
    2d6a:	89 8b       	std	Y+17, r24	; 0x11
    2d6c:	89 89       	ldd	r24, Y+17	; 0x11
    2d6e:	9a 89       	ldd	r25, Y+18	; 0x12
    2d70:	01 97       	sbiw	r24, 0x01	; 1
    2d72:	f1 f7       	brne	.-4      	; 0x2d70 <Dance+0x7a0>
    2d74:	9a 8b       	std	Y+18, r25	; 0x12
    2d76:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d78:	8b 89       	ldd	r24, Y+19	; 0x13
    2d7a:	9c 89       	ldd	r25, Y+20	; 0x14
    2d7c:	01 97       	sbiw	r24, 0x01	; 1
    2d7e:	9c 8b       	std	Y+20, r25	; 0x14
    2d80:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d82:	8b 89       	ldd	r24, Y+19	; 0x13
    2d84:	9c 89       	ldd	r25, Y+20	; 0x14
    2d86:	00 97       	sbiw	r24, 0x00	; 0
    2d88:	69 f7       	brne	.-38     	; 0x2d64 <Dance+0x794>
    2d8a:	14 c0       	rjmp	.+40     	; 0x2db4 <Dance+0x7e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d8c:	6d 89       	ldd	r22, Y+21	; 0x15
    2d8e:	7e 89       	ldd	r23, Y+22	; 0x16
    2d90:	8f 89       	ldd	r24, Y+23	; 0x17
    2d92:	98 8d       	ldd	r25, Y+24	; 0x18
    2d94:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d98:	dc 01       	movw	r26, r24
    2d9a:	cb 01       	movw	r24, r22
    2d9c:	9c 8b       	std	Y+20, r25	; 0x14
    2d9e:	8b 8b       	std	Y+19, r24	; 0x13
    2da0:	8b 89       	ldd	r24, Y+19	; 0x13
    2da2:	9c 89       	ldd	r25, Y+20	; 0x14
    2da4:	98 8b       	std	Y+16, r25	; 0x10
    2da6:	8f 87       	std	Y+15, r24	; 0x0f
    2da8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2daa:	98 89       	ldd	r25, Y+16	; 0x10
    2dac:	01 97       	sbiw	r24, 0x01	; 1
    2dae:	f1 f7       	brne	.-4      	; 0x2dac <Dance+0x7dc>
    2db0:	98 8b       	std	Y+16, r25	; 0x10
    2db2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(250);
	CLCD_voidSendCommand(1);
    2db4:	81 e0       	ldi	r24, 0x01	; 1
    2db6:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <CLCD_voidSendCommand>
	voidSendString("I Can Dance");
    2dba:	88 ed       	ldi	r24, 0xD8	; 216
    2dbc:	90 e0       	ldi	r25, 0x00	; 0
    2dbe:	0e 94 2a 07 	call	0xe54	; 0xe54 <voidSendString>
	CLCD_u8WriteSpecialCharacter( 1u , Local_u8Pattern17Arr, 12u , 0u );
    2dc2:	2f e5       	ldi	r18, 0x5F	; 95
    2dc4:	31 e0       	ldi	r19, 0x01	; 1
    2dc6:	81 e0       	ldi	r24, 0x01	; 1
    2dc8:	b9 01       	movw	r22, r18
    2dca:	4c e0       	ldi	r20, 0x0C	; 12
    2dcc:	20 e0       	ldi	r18, 0x00	; 0
    2dce:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <CLCD_u8WriteSpecialCharacter>
	voidSendString("On");
    2dd2:	84 ee       	ldi	r24, 0xE4	; 228
    2dd4:	90 e0       	ldi	r25, 0x00	; 0
    2dd6:	0e 94 2a 07 	call	0xe54	; 0xe54 <voidSendString>
	CLCD_u8WriteSpecialCharacter( 13u , Local_u8Pattern13Arr,6u , 1u );
    2dda:	27 e2       	ldi	r18, 0x27	; 39
    2ddc:	31 e0       	ldi	r19, 0x01	; 1
    2dde:	8d e0       	ldi	r24, 0x0D	; 13
    2de0:	b9 01       	movw	r22, r18
    2de2:	46 e0       	ldi	r20, 0x06	; 6
    2de4:	21 e0       	ldi	r18, 0x01	; 1
    2de6:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <CLCD_u8WriteSpecialCharacter>
    2dea:	80 e0       	ldi	r24, 0x00	; 0
    2dec:	90 e0       	ldi	r25, 0x00	; 0
    2dee:	aa e7       	ldi	r26, 0x7A	; 122
    2df0:	b3 e4       	ldi	r27, 0x43	; 67
    2df2:	8b 87       	std	Y+11, r24	; 0x0b
    2df4:	9c 87       	std	Y+12, r25	; 0x0c
    2df6:	ad 87       	std	Y+13, r26	; 0x0d
    2df8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dfa:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dfc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dfe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e00:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e02:	20 e0       	ldi	r18, 0x00	; 0
    2e04:	30 e0       	ldi	r19, 0x00	; 0
    2e06:	4a e7       	ldi	r20, 0x7A	; 122
    2e08:	55 e4       	ldi	r21, 0x45	; 69
    2e0a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e0e:	dc 01       	movw	r26, r24
    2e10:	cb 01       	movw	r24, r22
    2e12:	8f 83       	std	Y+7, r24	; 0x07
    2e14:	98 87       	std	Y+8, r25	; 0x08
    2e16:	a9 87       	std	Y+9, r26	; 0x09
    2e18:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e1a:	6f 81       	ldd	r22, Y+7	; 0x07
    2e1c:	78 85       	ldd	r23, Y+8	; 0x08
    2e1e:	89 85       	ldd	r24, Y+9	; 0x09
    2e20:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e22:	20 e0       	ldi	r18, 0x00	; 0
    2e24:	30 e0       	ldi	r19, 0x00	; 0
    2e26:	40 e8       	ldi	r20, 0x80	; 128
    2e28:	5f e3       	ldi	r21, 0x3F	; 63
    2e2a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2e2e:	88 23       	and	r24, r24
    2e30:	2c f4       	brge	.+10     	; 0x2e3c <Dance+0x86c>
		__ticks = 1;
    2e32:	81 e0       	ldi	r24, 0x01	; 1
    2e34:	90 e0       	ldi	r25, 0x00	; 0
    2e36:	9e 83       	std	Y+6, r25	; 0x06
    2e38:	8d 83       	std	Y+5, r24	; 0x05
    2e3a:	3f c0       	rjmp	.+126    	; 0x2eba <Dance+0x8ea>
	else if (__tmp > 65535)
    2e3c:	6f 81       	ldd	r22, Y+7	; 0x07
    2e3e:	78 85       	ldd	r23, Y+8	; 0x08
    2e40:	89 85       	ldd	r24, Y+9	; 0x09
    2e42:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e44:	20 e0       	ldi	r18, 0x00	; 0
    2e46:	3f ef       	ldi	r19, 0xFF	; 255
    2e48:	4f e7       	ldi	r20, 0x7F	; 127
    2e4a:	57 e4       	ldi	r21, 0x47	; 71
    2e4c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2e50:	18 16       	cp	r1, r24
    2e52:	4c f5       	brge	.+82     	; 0x2ea6 <Dance+0x8d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e54:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e56:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e58:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e5c:	20 e0       	ldi	r18, 0x00	; 0
    2e5e:	30 e0       	ldi	r19, 0x00	; 0
    2e60:	40 e2       	ldi	r20, 0x20	; 32
    2e62:	51 e4       	ldi	r21, 0x41	; 65
    2e64:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e68:	dc 01       	movw	r26, r24
    2e6a:	cb 01       	movw	r24, r22
    2e6c:	bc 01       	movw	r22, r24
    2e6e:	cd 01       	movw	r24, r26
    2e70:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e74:	dc 01       	movw	r26, r24
    2e76:	cb 01       	movw	r24, r22
    2e78:	9e 83       	std	Y+6, r25	; 0x06
    2e7a:	8d 83       	std	Y+5, r24	; 0x05
    2e7c:	0f c0       	rjmp	.+30     	; 0x2e9c <Dance+0x8cc>
    2e7e:	80 e9       	ldi	r24, 0x90	; 144
    2e80:	91 e0       	ldi	r25, 0x01	; 1
    2e82:	9c 83       	std	Y+4, r25	; 0x04
    2e84:	8b 83       	std	Y+3, r24	; 0x03
    2e86:	8b 81       	ldd	r24, Y+3	; 0x03
    2e88:	9c 81       	ldd	r25, Y+4	; 0x04
    2e8a:	01 97       	sbiw	r24, 0x01	; 1
    2e8c:	f1 f7       	brne	.-4      	; 0x2e8a <Dance+0x8ba>
    2e8e:	9c 83       	std	Y+4, r25	; 0x04
    2e90:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e92:	8d 81       	ldd	r24, Y+5	; 0x05
    2e94:	9e 81       	ldd	r25, Y+6	; 0x06
    2e96:	01 97       	sbiw	r24, 0x01	; 1
    2e98:	9e 83       	std	Y+6, r25	; 0x06
    2e9a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e9c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e9e:	9e 81       	ldd	r25, Y+6	; 0x06
    2ea0:	00 97       	sbiw	r24, 0x00	; 0
    2ea2:	69 f7       	brne	.-38     	; 0x2e7e <Dance+0x8ae>
    2ea4:	14 c0       	rjmp	.+40     	; 0x2ece <Dance+0x8fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ea6:	6f 81       	ldd	r22, Y+7	; 0x07
    2ea8:	78 85       	ldd	r23, Y+8	; 0x08
    2eaa:	89 85       	ldd	r24, Y+9	; 0x09
    2eac:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2eb2:	dc 01       	movw	r26, r24
    2eb4:	cb 01       	movw	r24, r22
    2eb6:	9e 83       	std	Y+6, r25	; 0x06
    2eb8:	8d 83       	std	Y+5, r24	; 0x05
    2eba:	8d 81       	ldd	r24, Y+5	; 0x05
    2ebc:	9e 81       	ldd	r25, Y+6	; 0x06
    2ebe:	9a 83       	std	Y+2, r25	; 0x02
    2ec0:	89 83       	std	Y+1, r24	; 0x01
    2ec2:	89 81       	ldd	r24, Y+1	; 0x01
    2ec4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ec6:	01 97       	sbiw	r24, 0x01	; 1
    2ec8:	f1 f7       	brne	.-4      	; 0x2ec6 <Dance+0x8f6>
    2eca:	9a 83       	std	Y+2, r25	; 0x02
    2ecc:	89 83       	std	Y+1, r24	; 0x01
	CLCD_voidSendCommand(1);
	voidSendString("  I Can Dance");
	CLCD_u8WriteSpecialCharacter( 5u , Local_u8Pattern5Arr, 7u , 1u );
	CLCD_u8WriteSpecialCharacter( 5u , Local_u8Pattern5Arr, 8u , 1u );
	_delay_ms(2000);
	for (uint8 i = 0 ; i<2 ; i++)
    2ece:	de 01       	movw	r26, r28
    2ed0:	ad 59       	subi	r26, 0x9D	; 157
    2ed2:	bf 4f       	sbci	r27, 0xFF	; 255
    2ed4:	fe 01       	movw	r30, r28
    2ed6:	ed 59       	subi	r30, 0x9D	; 157
    2ed8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eda:	80 81       	ld	r24, Z
    2edc:	8f 5f       	subi	r24, 0xFF	; 255
    2ede:	8c 93       	st	X, r24
    2ee0:	fe 01       	movw	r30, r28
    2ee2:	ed 59       	subi	r30, 0x9D	; 157
    2ee4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee6:	80 81       	ld	r24, Z
    2ee8:	82 30       	cpi	r24, 0x02	; 2
    2eea:	08 f4       	brcc	.+2      	; 0x2eee <Dance+0x91e>
    2eec:	4e cc       	rjmp	.-1892   	; 0x278a <Dance+0x1ba>
	CLCD_u8WriteSpecialCharacter( 1u , Local_u8Pattern17Arr, 12u , 0u );
	voidSendString("On");
	CLCD_u8WriteSpecialCharacter( 13u , Local_u8Pattern13Arr,6u , 1u );
	_delay_ms(250);
	}
	CLCD_voidSendCommand(1);
    2eee:	81 e0       	ldi	r24, 0x01	; 1
    2ef0:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <CLCD_voidSendCommand>
}
    2ef4:	cd 59       	subi	r28, 0x9D	; 157
    2ef6:	df 4f       	sbci	r29, 0xFF	; 255
    2ef8:	0f b6       	in	r0, 0x3f	; 63
    2efa:	f8 94       	cli
    2efc:	de bf       	out	0x3e, r29	; 62
    2efe:	0f be       	out	0x3f, r0	; 63
    2f00:	cd bf       	out	0x3d, r28	; 61
    2f02:	cf 91       	pop	r28
    2f04:	df 91       	pop	r29
    2f06:	1f 91       	pop	r17
    2f08:	0f 91       	pop	r16
    2f0a:	08 95       	ret

00002f0c <__divmodsi4>:
    2f0c:	97 fb       	bst	r25, 7
    2f0e:	09 2e       	mov	r0, r25
    2f10:	05 26       	eor	r0, r21
    2f12:	0e d0       	rcall	.+28     	; 0x2f30 <__divmodsi4_neg1>
    2f14:	57 fd       	sbrc	r21, 7
    2f16:	04 d0       	rcall	.+8      	; 0x2f20 <__divmodsi4_neg2>
    2f18:	14 d0       	rcall	.+40     	; 0x2f42 <__udivmodsi4>
    2f1a:	0a d0       	rcall	.+20     	; 0x2f30 <__divmodsi4_neg1>
    2f1c:	00 1c       	adc	r0, r0
    2f1e:	38 f4       	brcc	.+14     	; 0x2f2e <__divmodsi4_exit>

00002f20 <__divmodsi4_neg2>:
    2f20:	50 95       	com	r21
    2f22:	40 95       	com	r20
    2f24:	30 95       	com	r19
    2f26:	21 95       	neg	r18
    2f28:	3f 4f       	sbci	r19, 0xFF	; 255
    2f2a:	4f 4f       	sbci	r20, 0xFF	; 255
    2f2c:	5f 4f       	sbci	r21, 0xFF	; 255

00002f2e <__divmodsi4_exit>:
    2f2e:	08 95       	ret

00002f30 <__divmodsi4_neg1>:
    2f30:	f6 f7       	brtc	.-4      	; 0x2f2e <__divmodsi4_exit>
    2f32:	90 95       	com	r25
    2f34:	80 95       	com	r24
    2f36:	70 95       	com	r23
    2f38:	61 95       	neg	r22
    2f3a:	7f 4f       	sbci	r23, 0xFF	; 255
    2f3c:	8f 4f       	sbci	r24, 0xFF	; 255
    2f3e:	9f 4f       	sbci	r25, 0xFF	; 255
    2f40:	08 95       	ret

00002f42 <__udivmodsi4>:
    2f42:	a1 e2       	ldi	r26, 0x21	; 33
    2f44:	1a 2e       	mov	r1, r26
    2f46:	aa 1b       	sub	r26, r26
    2f48:	bb 1b       	sub	r27, r27
    2f4a:	fd 01       	movw	r30, r26
    2f4c:	0d c0       	rjmp	.+26     	; 0x2f68 <__udivmodsi4_ep>

00002f4e <__udivmodsi4_loop>:
    2f4e:	aa 1f       	adc	r26, r26
    2f50:	bb 1f       	adc	r27, r27
    2f52:	ee 1f       	adc	r30, r30
    2f54:	ff 1f       	adc	r31, r31
    2f56:	a2 17       	cp	r26, r18
    2f58:	b3 07       	cpc	r27, r19
    2f5a:	e4 07       	cpc	r30, r20
    2f5c:	f5 07       	cpc	r31, r21
    2f5e:	20 f0       	brcs	.+8      	; 0x2f68 <__udivmodsi4_ep>
    2f60:	a2 1b       	sub	r26, r18
    2f62:	b3 0b       	sbc	r27, r19
    2f64:	e4 0b       	sbc	r30, r20
    2f66:	f5 0b       	sbc	r31, r21

00002f68 <__udivmodsi4_ep>:
    2f68:	66 1f       	adc	r22, r22
    2f6a:	77 1f       	adc	r23, r23
    2f6c:	88 1f       	adc	r24, r24
    2f6e:	99 1f       	adc	r25, r25
    2f70:	1a 94       	dec	r1
    2f72:	69 f7       	brne	.-38     	; 0x2f4e <__udivmodsi4_loop>
    2f74:	60 95       	com	r22
    2f76:	70 95       	com	r23
    2f78:	80 95       	com	r24
    2f7a:	90 95       	com	r25
    2f7c:	9b 01       	movw	r18, r22
    2f7e:	ac 01       	movw	r20, r24
    2f80:	bd 01       	movw	r22, r26
    2f82:	cf 01       	movw	r24, r30
    2f84:	08 95       	ret

00002f86 <__prologue_saves__>:
    2f86:	2f 92       	push	r2
    2f88:	3f 92       	push	r3
    2f8a:	4f 92       	push	r4
    2f8c:	5f 92       	push	r5
    2f8e:	6f 92       	push	r6
    2f90:	7f 92       	push	r7
    2f92:	8f 92       	push	r8
    2f94:	9f 92       	push	r9
    2f96:	af 92       	push	r10
    2f98:	bf 92       	push	r11
    2f9a:	cf 92       	push	r12
    2f9c:	df 92       	push	r13
    2f9e:	ef 92       	push	r14
    2fa0:	ff 92       	push	r15
    2fa2:	0f 93       	push	r16
    2fa4:	1f 93       	push	r17
    2fa6:	cf 93       	push	r28
    2fa8:	df 93       	push	r29
    2faa:	cd b7       	in	r28, 0x3d	; 61
    2fac:	de b7       	in	r29, 0x3e	; 62
    2fae:	ca 1b       	sub	r28, r26
    2fb0:	db 0b       	sbc	r29, r27
    2fb2:	0f b6       	in	r0, 0x3f	; 63
    2fb4:	f8 94       	cli
    2fb6:	de bf       	out	0x3e, r29	; 62
    2fb8:	0f be       	out	0x3f, r0	; 63
    2fba:	cd bf       	out	0x3d, r28	; 61
    2fbc:	09 94       	ijmp

00002fbe <__epilogue_restores__>:
    2fbe:	2a 88       	ldd	r2, Y+18	; 0x12
    2fc0:	39 88       	ldd	r3, Y+17	; 0x11
    2fc2:	48 88       	ldd	r4, Y+16	; 0x10
    2fc4:	5f 84       	ldd	r5, Y+15	; 0x0f
    2fc6:	6e 84       	ldd	r6, Y+14	; 0x0e
    2fc8:	7d 84       	ldd	r7, Y+13	; 0x0d
    2fca:	8c 84       	ldd	r8, Y+12	; 0x0c
    2fcc:	9b 84       	ldd	r9, Y+11	; 0x0b
    2fce:	aa 84       	ldd	r10, Y+10	; 0x0a
    2fd0:	b9 84       	ldd	r11, Y+9	; 0x09
    2fd2:	c8 84       	ldd	r12, Y+8	; 0x08
    2fd4:	df 80       	ldd	r13, Y+7	; 0x07
    2fd6:	ee 80       	ldd	r14, Y+6	; 0x06
    2fd8:	fd 80       	ldd	r15, Y+5	; 0x05
    2fda:	0c 81       	ldd	r16, Y+4	; 0x04
    2fdc:	1b 81       	ldd	r17, Y+3	; 0x03
    2fde:	aa 81       	ldd	r26, Y+2	; 0x02
    2fe0:	b9 81       	ldd	r27, Y+1	; 0x01
    2fe2:	ce 0f       	add	r28, r30
    2fe4:	d1 1d       	adc	r29, r1
    2fe6:	0f b6       	in	r0, 0x3f	; 63
    2fe8:	f8 94       	cli
    2fea:	de bf       	out	0x3e, r29	; 62
    2fec:	0f be       	out	0x3f, r0	; 63
    2fee:	cd bf       	out	0x3d, r28	; 61
    2ff0:	ed 01       	movw	r28, r26
    2ff2:	08 95       	ret

00002ff4 <_exit>:
    2ff4:	f8 94       	cli

00002ff6 <__stop_program>:
    2ff6:	ff cf       	rjmp	.-2      	; 0x2ff6 <__stop_program>
